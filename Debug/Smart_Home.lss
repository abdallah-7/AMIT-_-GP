
Smart_Home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003f7c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000456  00800060  00003f7c  00004010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003a  008004b6  008004b6  00004466  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00004466  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000044c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004b0  00000000  00000000  00004500  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007a43  00000000  00000000  000049b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000013e6  00000000  00000000  0000c3f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003a54  00000000  00000000  0000d7d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c8c  00000000  00000000  00011230  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001660  00000000  00000000  00011ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000328d  00000000  00000000  0001351c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000418  00000000  00000000  000167a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 6e 19 	jmp	0x32dc	; 0x32dc <__vector_4>
      14:	0c 94 33 19 	jmp	0x3266	; 0x3266 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 c0 18 	jmp	0x3180	; 0x3180 <__vector_10>
      2c:	0c 94 85 18 	jmp	0x310a	; 0x310a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	14 e0       	ldi	r17, 0x04	; 4
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e7       	ldi	r30, 0x7C	; 124
      68:	ff e3       	ldi	r31, 0x3F	; 63
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 3b       	cpi	r26, 0xB6	; 182
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	24 e0       	ldi	r18, 0x04	; 4
      78:	a6 eb       	ldi	r26, 0xB6	; 182
      7a:	b4 e0       	ldi	r27, 0x04	; 4
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3f       	cpi	r26, 0xF0	; 240
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <main>
      8a:	0c 94 bc 1f 	jmp	0x3f78	; 0x3f78 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <CheckTempForAc>:

void CheckTempForAc()
//this function is for cheking the temperature and turn on the AC if the temperature is above 28 and turn it off if the temperature is below 21
// this is the function that get called for tmr2 interrupt
{
	ADC_voidGetDigitalValue(ADC_CHANNEL_0, &local_temp);
      92:	66 eb       	ldi	r22, 0xB6	; 182
      94:	74 e0       	ldi	r23, 0x04	; 4
      96:	80 e0       	ldi	r24, 0x00	; 0
      98:	0e 94 fd 15 	call	0x2bfa	; 0x2bfa <ADC_voidGetDigitalValue>
	if (local_temp > 28)
      9c:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <__data_end>
      a0:	8d 31       	cpi	r24, 0x1D	; 29
      a2:	30 f0       	brcs	.+12     	; 0xb0 <CheckTempForAc+0x1e>
	{
		DIO_voidSetPinValue(DIO_PORTC,DIO_PIN2,DIO_PIN_LOW);
      a4:	40 e0       	ldi	r20, 0x00	; 0
      a6:	62 e0       	ldi	r22, 0x02	; 2
      a8:	82 e0       	ldi	r24, 0x02	; 2
      aa:	0e 94 98 16 	call	0x2d30	; 0x2d30 <DIO_voidSetPinValue>
      ae:	08 95       	ret
		
	}
	else if (local_temp <21)
      b0:	85 31       	cpi	r24, 0x15	; 21
      b2:	28 f4       	brcc	.+10     	; 0xbe <CheckTempForAc+0x2c>
	
	{
		DIO_voidSetPinValue(DIO_PORTC,DIO_PIN2,DIO_PIN_HIGH);
      b4:	41 e0       	ldi	r20, 0x01	; 1
      b6:	62 e0       	ldi	r22, 0x02	; 2
      b8:	82 e0       	ldi	r24, 0x02	; 2
      ba:	0e 94 98 16 	call	0x2d30	; 0x2d30 <DIO_voidSetPinValue>
      be:	08 95       	ret

000000c0 <HOME_voidInit>:

void HOME_voidInit(void)
{
	//Home initialization function is for the hardware initialization of the smart home system
	    // initialize the LCD
    LCD_voidInit();
      c0:	0e 94 b9 13 	call	0x2772	; 0x2772 <LCD_voidInit>
	// initialize the PWM
	PWM_voidInitChannel_1A();
      c4:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <PWM_voidInitChannel_1A>
	PWM_voidInitChannel_1B();
      c8:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <PWM_voidInitChannel_1B>

	// initialize the EEPROM
	EEPROM_voidInit();
      cc:	0e 94 b7 11 	call	0x236e	; 0x236e <EEPROM_voidInit>
	
	// initialize the Door_Servo
	SERVO_voidInit(DIO_PORTD,DIO_PIN4);
      d0:	64 e0       	ldi	r22, 0x04	; 4
      d2:	83 e0       	ldi	r24, 0x03	; 3
      d4:	0e 94 89 15 	call	0x2b12	; 0x2b12 <SERVO_voidInit>
	// reset door angle to 0
	SERVO_voidStartByAngle(0);
      d8:	60 e0       	ldi	r22, 0x00	; 0
      da:	70 e0       	ldi	r23, 0x00	; 0
      dc:	cb 01       	movw	r24, r22
      de:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <SERVO_voidStartByAngle>

	// initialize the KPD
    KPD_voidInit();
      e2:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <KPD_voidInit>

	// initialize the ADC
	ADC_voidInit(ADC_REFERENCE_INTRNAL);
      e6:	83 e0       	ldi	r24, 0x03	; 3
      e8:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <ADC_voidInit>
	DIO_voidSetPinDirection(DIO_PORTA,DIO_PIN0,DIO_PIN_INPUT);
      ec:	40 e0       	ldi	r20, 0x00	; 0
      ee:	60 e0       	ldi	r22, 0x00	; 0
      f0:	80 e0       	ldi	r24, 0x00	; 0
      f2:	0e 94 18 16 	call	0x2c30	; 0x2c30 <DIO_voidSetPinDirection>

	// AC PIN
	DIO_voidSetPinDirection(DIO_PORTC,DIO_PIN2,DIO_PIN_OUTPUT);
      f6:	41 e0       	ldi	r20, 0x01	; 1
      f8:	62 e0       	ldi	r22, 0x02	; 2
      fa:	82 e0       	ldi	r24, 0x02	; 2
      fc:	0e 94 18 16 	call	0x2c30	; 0x2c30 <DIO_voidSetPinDirection>

	// initialize the Buzzer
	BUZZER_voidInit(DIO_PORTD,DIO_PIN6);
     100:	66 e0       	ldi	r22, 0x06	; 6
     102:	83 e0       	ldi	r24, 0x03	; 3
     104:	0e 94 b3 11 	call	0x2366	; 0x2366 <BUZZER_voidInit>
	
    // initialize the Bluetooth
	BL_voidInit();
     108:	0e 94 a4 11 	call	0x2348	; 0x2348 <BL_voidInit>
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN1,DIO_PIN_OUTPUT);
     10c:	41 e0       	ldi	r20, 0x01	; 1
     10e:	61 e0       	ldi	r22, 0x01	; 1
     110:	83 e0       	ldi	r24, 0x03	; 3
     112:	0e 94 18 16 	call	0x2c30	; 0x2c30 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN0,DIO_PIN_INPUT);
     116:	40 e0       	ldi	r20, 0x00	; 0
     118:	60 e0       	ldi	r22, 0x00	; 0
     11a:	83 e0       	ldi	r24, 0x03	; 3
     11c:	0e 94 18 16 	call	0x2c30	; 0x2c30 <DIO_voidSetPinDirection>
    //enable global interrupt
    GI_voidEnable();
     120:	0e 94 8b 17 	call	0x2f16	; 0x2f16 <GI_voidEnable>
    //intializing timer by selecting mode and enable timer interrupt overflow and saving perload values
    TMR0_voidInit();
     124:	0e 94 4d 18 	call	0x309a	; 0x309a <TMR0_voidInit>
    // initialize the LEDs(1-5)
	//LED 1
    LED_voidInit(DIO_PORTD, DIO_PIN3);
     128:	63 e0       	ldi	r22, 0x03	; 3
     12a:	83 e0       	ldi	r24, 0x03	; 3
     12c:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <LED_voidInit>
	//LED 2
    LED_voidInit(DIO_PORTB, DIO_PIN0);
     130:	60 e0       	ldi	r22, 0x00	; 0
     132:	81 e0       	ldi	r24, 0x01	; 1
     134:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <LED_voidInit>
	//LED 3
    LED_voidInit(DIO_PORTA, DIO_PIN2);
     138:	62 e0       	ldi	r22, 0x02	; 2
     13a:	80 e0       	ldi	r24, 0x00	; 0
     13c:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <LED_voidInit>
	//LED 4
    LED_voidInit(DIO_PORTA, DIO_PIN3);
     140:	63 e0       	ldi	r22, 0x03	; 3
     142:	80 e0       	ldi	r24, 0x00	; 0
     144:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <LED_voidInit>
	//LED 5
    LED_voidInit(DIO_PORTD, DIO_PIN2);
     148:	62 e0       	ldi	r22, 0x02	; 2
     14a:	83 e0       	ldi	r24, 0x03	; 3
     14c:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <LED_voidInit>
	// Dimmer LED 6
	LED_voidInit(DIO_PORTD, DIO_PIN5);
     150:	65 e0       	ldi	r22, 0x05	; 5
     152:	83 e0       	ldi	r24, 0x03	; 3
     154:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <LED_voidInit>

	// initialize tmr2
	TMR2_voidInit();
     158:	0e 94 fb 18 	call	0x31f6	; 0x31f6 <TMR2_voidInit>
	TMR2_SetCallBackCTC(CheckTempForAc);
     15c:	89 e4       	ldi	r24, 0x49	; 73
     15e:	90 e0       	ldi	r25, 0x00	; 0
     160:	0e 94 25 19 	call	0x324a	; 0x324a <TMR2_SetCallBackCTC>
     164:	08 95       	ret

00000166 <APP_init>:




void APP_init(void)
{
     166:	cf 93       	push	r28
     168:	df 93       	push	r29
     16a:	cd b7       	in	r28, 0x3d	; 61
     16c:	de b7       	in	r29, 0x3e	; 62
     16e:	e0 97       	sbiw	r28, 0x30	; 48
     170:	0f b6       	in	r0, 0x3f	; 63
     172:	f8 94       	cli
     174:	de bf       	out	0x3e, r29	; 62
     176:	0f be       	out	0x3f, r0	; 63
     178:	cd bf       	out	0x3d, r28	; 61
	/*APP_init function is for the logic initialization of the smart home system setting initial 
	values for the users and epprom locations for saving */


    HOME_voidInit();
     17a:	0e 94 60 00 	call	0xc0	; 0xc0 <HOME_voidInit>

	// display the welcome screen

	LCD_voidClear();
     17e:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <LCD_voidClear>

	
	// local users
	u8 testusername[8]="7654321";
     182:	88 e0       	ldi	r24, 0x08	; 8
     184:	e2 e7       	ldi	r30, 0x72	; 114
     186:	f0 e0       	ldi	r31, 0x00	; 0
     188:	de 01       	movw	r26, r28
     18a:	11 96       	adiw	r26, 0x01	; 1
     18c:	01 90       	ld	r0, Z+
     18e:	0d 92       	st	X+, r0
     190:	8a 95       	dec	r24
     192:	e1 f7       	brne	.-8      	; 0x18c <APP_init+0x26>
	u8 testuserpass[8]="7654321";
     194:	88 e0       	ldi	r24, 0x08	; 8
     196:	e2 e7       	ldi	r30, 0x72	; 114
     198:	f0 e0       	ldi	r31, 0x00	; 0
     19a:	de 01       	movw	r26, r28
     19c:	19 96       	adiw	r26, 0x09	; 9
     19e:	01 90       	ld	r0, Z+
     1a0:	0d 92       	st	X+, r0
     1a2:	8a 95       	dec	r24
     1a4:	e1 f7       	brne	.-8      	; 0x19e <APP_init+0x38>

	// Remote users
		//admin users
	u8 testadminname[8]="1122334";
     1a6:	88 e0       	ldi	r24, 0x08	; 8
     1a8:	ea e7       	ldi	r30, 0x7A	; 122
     1aa:	f0 e0       	ldi	r31, 0x00	; 0
     1ac:	de 01       	movw	r26, r28
     1ae:	51 96       	adiw	r26, 0x11	; 17
     1b0:	01 90       	ld	r0, Z+
     1b2:	0d 92       	st	X+, r0
     1b4:	8a 95       	dec	r24
     1b6:	e1 f7       	brne	.-8      	; 0x1b0 <APP_init+0x4a>
	u8 testadminpass[8]="1122334";
     1b8:	88 e0       	ldi	r24, 0x08	; 8
     1ba:	ea e7       	ldi	r30, 0x7A	; 122
     1bc:	f0 e0       	ldi	r31, 0x00	; 0
     1be:	de 01       	movw	r26, r28
     1c0:	59 96       	adiw	r26, 0x19	; 25
     1c2:	01 90       	ld	r0, Z+
     1c4:	0d 92       	st	X+, r0
     1c6:	8a 95       	dec	r24
     1c8:	e1 f7       	brne	.-8      	; 0x1c2 <APP_init+0x5c>
		//remote users
	u8 testusername1[8]="1002003";
     1ca:	88 e0       	ldi	r24, 0x08	; 8
     1cc:	e2 e8       	ldi	r30, 0x82	; 130
     1ce:	f0 e0       	ldi	r31, 0x00	; 0
     1d0:	de 01       	movw	r26, r28
     1d2:	91 96       	adiw	r26, 0x21	; 33
     1d4:	01 90       	ld	r0, Z+
     1d6:	0d 92       	st	X+, r0
     1d8:	8a 95       	dec	r24
     1da:	e1 f7       	brne	.-8      	; 0x1d4 <APP_init+0x6e>
	u8 testuserpass1[8]="1002003";
     1dc:	88 e0       	ldi	r24, 0x08	; 8
     1de:	e2 e8       	ldi	r30, 0x82	; 130
     1e0:	f0 e0       	ldi	r31, 0x00	; 0
     1e2:	de 01       	movw	r26, r28
     1e4:	99 96       	adiw	r26, 0x29	; 41
     1e6:	01 90       	ld	r0, Z+
     1e8:	0d 92       	st	X+, r0
     1ea:	8a 95       	dec	r24
     1ec:	e1 f7       	brne	.-8      	; 0x1e6 <APP_init+0x80>
		
	
	EEPROM_voidWritePage(16,&testusername[0]);
     1ee:	be 01       	movw	r22, r28
     1f0:	6f 5f       	subi	r22, 0xFF	; 255
     1f2:	7f 4f       	sbci	r23, 0xFF	; 255
     1f4:	80 e1       	ldi	r24, 0x10	; 16
     1f6:	90 e0       	ldi	r25, 0x00	; 0
     1f8:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <EEPROM_voidWritePage>
	EEPROM_voidWritePage(24,&testuserpass[0]);
     1fc:	be 01       	movw	r22, r28
     1fe:	67 5f       	subi	r22, 0xF7	; 247
     200:	7f 4f       	sbci	r23, 0xFF	; 255
     202:	88 e1       	ldi	r24, 0x18	; 24
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <EEPROM_voidWritePage>
	EEPROM_voidWritePage(80,&testadminname[0]);
     20a:	be 01       	movw	r22, r28
     20c:	6f 5e       	subi	r22, 0xEF	; 239
     20e:	7f 4f       	sbci	r23, 0xFF	; 255
     210:	80 e5       	ldi	r24, 0x50	; 80
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <EEPROM_voidWritePage>
	EEPROM_voidWritePage(88,&testadminpass[0]);
     218:	be 01       	movw	r22, r28
     21a:	67 5e       	subi	r22, 0xE7	; 231
     21c:	7f 4f       	sbci	r23, 0xFF	; 255
     21e:	88 e5       	ldi	r24, 0x58	; 88
     220:	90 e0       	ldi	r25, 0x00	; 0
     222:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <EEPROM_voidWritePage>
	EEPROM_voidWritePage(96,&testusername1[0]);
     226:	be 01       	movw	r22, r28
     228:	6f 5d       	subi	r22, 0xDF	; 223
     22a:	7f 4f       	sbci	r23, 0xFF	; 255
     22c:	80 e6       	ldi	r24, 0x60	; 96
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <EEPROM_voidWritePage>
	EEPROM_voidWritePage(104,&testuserpass1[0]);
     234:	be 01       	movw	r22, r28
     236:	67 5d       	subi	r22, 0xD7	; 215
     238:	7f 4f       	sbci	r23, 0xFF	; 255
     23a:	88 e6       	ldi	r24, 0x68	; 104
     23c:	90 e0       	ldi	r25, 0x00	; 0
     23e:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <EEPROM_voidWritePage>
	


	
	
}
     242:	e0 96       	adiw	r28, 0x30	; 48
     244:	0f b6       	in	r0, 0x3f	; 63
     246:	f8 94       	cli
     248:	de bf       	out	0x3e, r29	; 62
     24a:	0f be       	out	0x3f, r0	; 63
     24c:	cd bf       	out	0x3d, r28	; 61
     24e:	df 91       	pop	r29
     250:	cf 91       	pop	r28
     252:	08 95       	ret

00000254 <HOME_voidLocalGetUserAndPass>:

}


void HOME_voidLocalGetUserAndPass(u8* copy_pu8LocalUserName,u8* copy_pu8LocalUserPass)
{
     254:	cf 92       	push	r12
     256:	df 92       	push	r13
     258:	ef 92       	push	r14
     25a:	ff 92       	push	r15
     25c:	1f 93       	push	r17
     25e:	cf 93       	push	r28
     260:	df 93       	push	r29
	if((copy_pu8LocalUserName!=NULL)&&(copy_pu8LocalUserPass!=NULL))
     262:	00 97       	sbiw	r24, 0x00	; 0
     264:	09 f4       	brne	.+2      	; 0x268 <HOME_voidLocalGetUserAndPass+0x14>
     266:	69 c0       	rjmp	.+210    	; 0x33a <HOME_voidLocalGetUserAndPass+0xe6>
     268:	61 15       	cp	r22, r1
     26a:	71 05       	cpc	r23, r1
     26c:	09 f4       	brne	.+2      	; 0x270 <HOME_voidLocalGetUserAndPass+0x1c>
     26e:	65 c0       	rjmp	.+202    	; 0x33a <HOME_voidLocalGetUserAndPass+0xe6>
     270:	7b 01       	movw	r14, r22
     272:	6c 01       	movw	r12, r24
	{
			
		u8 Local_u8UserNameLengthCounter,Local_u8UserPassCounter;
	
		//dis request for use name and pass
		LCD_voidClear();
     274:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <LCD_voidClear>
		LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
     278:	60 e0       	ldi	r22, 0x00	; 0
     27a:	81 e0       	ldi	r24, 0x01	; 1
     27c:	0e 94 40 15 	call	0x2a80	; 0x2a80 <LCD_voidGoTOSpecificPosition>
		LCD_voidDisplayString((u8 *)"Please Enter User");
     280:	8a e8       	ldi	r24, 0x8A	; 138
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	0e 94 51 14 	call	0x28a2	; 0x28a2 <LCD_voidDisplayString>
		LCD_voidGoTOSpecificPosition(LCD_LINE_TWO,0);
     288:	60 e0       	ldi	r22, 0x00	; 0
     28a:	82 e0       	ldi	r24, 0x02	; 2
     28c:	0e 94 40 15 	call	0x2a80	; 0x2a80 <LCD_voidGoTOSpecificPosition>
		LCD_voidDisplayString((u8 *)"Name&Password");
     290:	8c e9       	ldi	r24, 0x9C	; 156
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	0e 94 51 14 	call	0x28a2	; 0x28a2 <LCD_voidDisplayString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     298:	2f ef       	ldi	r18, 0xFF	; 255
     29a:	83 ed       	ldi	r24, 0xD3	; 211
     29c:	90 e3       	ldi	r25, 0x30	; 48
     29e:	21 50       	subi	r18, 0x01	; 1
     2a0:	80 40       	sbci	r24, 0x00	; 0
     2a2:	90 40       	sbci	r25, 0x00	; 0
     2a4:	e1 f7       	brne	.-8      	; 0x29e <HOME_voidLocalGetUserAndPass+0x4a>
     2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <HOME_voidLocalGetUserAndPass+0x54>
     2a8:	00 00       	nop
		_delay_ms(1000);
	
		//dis request for user name
		LCD_voidClear();
     2aa:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <LCD_voidClear>
		LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
     2ae:	60 e0       	ldi	r22, 0x00	; 0
     2b0:	81 e0       	ldi	r24, 0x01	; 1
     2b2:	0e 94 40 15 	call	0x2a80	; 0x2a80 <LCD_voidGoTOSpecificPosition>
		LCD_voidDisplayString((u8 *)"User Name:");
     2b6:	8c eb       	ldi	r24, 0xBC	; 188
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	0e 94 51 14 	call	0x28a2	; 0x28a2 <LCD_voidDisplayString>
	
		//loop for 8 digits user name
		for(Local_u8UserNameLengthCounter=0;Local_u8UserNameLengthCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh-1;Local_u8UserNameLengthCounter++)
     2be:	10 e0       	ldi	r17, 0x00	; 0
     2c0:	11 c0       	rjmp	.+34     	; 0x2e4 <HOME_voidLocalGetUserAndPass+0x90>
		{
		
		
			do
			{
				KPD_voidGetValue(&copy_pu8LocalUserName[Local_u8UserNameLengthCounter]);
     2c2:	e6 01       	movw	r28, r12
     2c4:	c1 0f       	add	r28, r17
     2c6:	d1 1d       	adc	r29, r1
     2c8:	ce 01       	movw	r24, r28
     2ca:	0e 94 9f 12 	call	0x253e	; 0x253e <KPD_voidGetValue>
			
			}while(copy_pu8LocalUserName[Local_u8UserNameLengthCounter]== KPD_Not_Pressed);
     2ce:	98 81       	ld	r25, Y
     2d0:	9f 3f       	cpi	r25, 0xFF	; 255
     2d2:	b9 f3       	breq	.-18     	; 0x2c2 <HOME_voidLocalGetUserAndPass+0x6e>
		
			LCD_voidGoTOSpecificPosition(LCD_LINE_TWO,Local_u8UserNameLengthCounter);
     2d4:	61 2f       	mov	r22, r17
     2d6:	82 e0       	ldi	r24, 0x02	; 2
     2d8:	0e 94 40 15 	call	0x2a80	; 0x2a80 <LCD_voidGoTOSpecificPosition>
			LCD_voidDisplayChar(copy_pu8LocalUserName[Local_u8UserNameLengthCounter]);
     2dc:	88 81       	ld	r24, Y
     2de:	0e 94 1b 14 	call	0x2836	; 0x2836 <LCD_voidDisplayChar>
		LCD_voidClear();
		LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
		LCD_voidDisplayString((u8 *)"User Name:");
	
		//loop for 8 digits user name
		for(Local_u8UserNameLengthCounter=0;Local_u8UserNameLengthCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh-1;Local_u8UserNameLengthCounter++)
     2e2:	1f 5f       	subi	r17, 0xFF	; 255
     2e4:	17 30       	cpi	r17, 0x07	; 7
     2e6:	68 f3       	brcs	.-38     	; 0x2c2 <HOME_voidLocalGetUserAndPass+0x6e>
			}while(copy_pu8LocalUserName[Local_u8UserNameLengthCounter]== KPD_Not_Pressed);
		
			LCD_voidGoTOSpecificPosition(LCD_LINE_TWO,Local_u8UserNameLengthCounter);
			LCD_voidDisplayChar(copy_pu8LocalUserName[Local_u8UserNameLengthCounter]);
		}
		copy_pu8LocalUserName[Local_u8UserNameLengthCounter]='\0';
     2e8:	f6 01       	movw	r30, r12
     2ea:	e1 0f       	add	r30, r17
     2ec:	f1 1d       	adc	r31, r1
     2ee:	10 82       	st	Z, r1
		//display request for pass
		LCD_voidClear();
     2f0:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <LCD_voidClear>
		LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
     2f4:	60 e0       	ldi	r22, 0x00	; 0
     2f6:	81 e0       	ldi	r24, 0x01	; 1
     2f8:	0e 94 40 15 	call	0x2a80	; 0x2a80 <LCD_voidGoTOSpecificPosition>
		LCD_voidDisplayString((u8 *)"PASSWORD:");
     2fc:	8a ea       	ldi	r24, 0xAA	; 170
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	0e 94 51 14 	call	0x28a2	; 0x28a2 <LCD_voidDisplayString>
	
		//loop for 8 digits user pass
			for(Local_u8UserPassCounter=0;Local_u8UserPassCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh-1;Local_u8UserPassCounter++)
     304:	10 e0       	ldi	r17, 0x00	; 0
     306:	13 c0       	rjmp	.+38     	; 0x32e <HOME_voidLocalGetUserAndPass+0xda>
			{
				do
				{
					KPD_voidGetValue(&copy_pu8LocalUserPass[Local_u8UserPassCounter]);
     308:	e7 01       	movw	r28, r14
     30a:	c1 0f       	add	r28, r17
     30c:	d1 1d       	adc	r29, r1
     30e:	ce 01       	movw	r24, r28
     310:	0e 94 9f 12 	call	0x253e	; 0x253e <KPD_voidGetValue>
				
				}while(copy_pu8LocalUserPass[Local_u8UserPassCounter]==KPD_Not_Pressed);
     314:	88 81       	ld	r24, Y
     316:	8f 3f       	cpi	r24, 0xFF	; 255
     318:	b9 f3       	breq	.-18     	; 0x308 <HOME_voidLocalGetUserAndPass+0xb4>
			
				LCD_voidGoTOSpecificPosition(LCD_LINE_TWO,Local_u8UserPassCounter);
     31a:	61 2f       	mov	r22, r17
     31c:	82 e0       	ldi	r24, 0x02	; 2
     31e:	0e 94 40 15 	call	0x2a80	; 0x2a80 <LCD_voidGoTOSpecificPosition>
				LCD_voidDisplayChar(copy_pu8LocalUserPass[Local_u8UserPassCounter]);
     322:	88 81       	ld	r24, Y
     324:	0e 94 1b 14 	call	0x2836	; 0x2836 <LCD_voidDisplayChar>
				LCD_voidPwdEffect();
     328:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <LCD_voidPwdEffect>
		LCD_voidClear();
		LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
		LCD_voidDisplayString((u8 *)"PASSWORD:");
	
		//loop for 8 digits user pass
			for(Local_u8UserPassCounter=0;Local_u8UserPassCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh-1;Local_u8UserPassCounter++)
     32c:	1f 5f       	subi	r17, 0xFF	; 255
     32e:	17 30       	cpi	r17, 0x07	; 7
     330:	58 f3       	brcs	.-42     	; 0x308 <HOME_voidLocalGetUserAndPass+0xb4>
			
				LCD_voidGoTOSpecificPosition(LCD_LINE_TWO,Local_u8UserPassCounter);
				LCD_voidDisplayChar(copy_pu8LocalUserPass[Local_u8UserPassCounter]);
				LCD_voidPwdEffect();
			}
			copy_pu8LocalUserPass[Local_u8UserPassCounter]='\0';
     332:	f7 01       	movw	r30, r14
     334:	e1 0f       	add	r30, r17
     336:	f1 1d       	adc	r31, r1
     338:	10 82       	st	Z, r1
		//error massage
	}
			
	
		
}
     33a:	df 91       	pop	r29
     33c:	cf 91       	pop	r28
     33e:	1f 91       	pop	r17
     340:	ff 90       	pop	r15
     342:	ef 90       	pop	r14
     344:	df 90       	pop	r13
     346:	cf 90       	pop	r12
     348:	08 95       	ret

0000034a <HOME_voidRemoteGetUserAndPass>:



void HOME_voidRemoteGetUserAndPass(u8* copy_pu8RemoteUserName,u8* copy_pu8RemoteUserPass)
{
     34a:	cf 92       	push	r12
     34c:	df 92       	push	r13
     34e:	ef 92       	push	r14
     350:	ff 92       	push	r15
     352:	0f 93       	push	r16
     354:	1f 93       	push	r17
     356:	cf 93       	push	r28
	if((copy_pu8RemoteUserName!=NULL)&&(copy_pu8RemoteUserPass!=NULL))
     358:	00 97       	sbiw	r24, 0x00	; 0
     35a:	09 f4       	brne	.+2      	; 0x35e <HOME_voidRemoteGetUserAndPass+0x14>
     35c:	64 c0       	rjmp	.+200    	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
     35e:	61 15       	cp	r22, r1
     360:	71 05       	cpc	r23, r1
     362:	09 f4       	brne	.+2      	; 0x366 <HOME_voidRemoteGetUserAndPass+0x1c>
     364:	60 c0       	rjmp	.+192    	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
     366:	8b 01       	movw	r16, r22
     368:	7c 01       	movw	r14, r24
		u8 Local_u8UserNameLengthCounter=0,Local_u8UserPassCounter=0;
	
		
	
		//dis request for user name
		BL_voidTxString	("User Name:");
     36a:	8c eb       	ldi	r24, 0xBC	; 188
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
		BL_voidTxChar('\r');
     372:	8d e0       	ldi	r24, 0x0D	; 13
     374:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
	
		//loop for 8 digits user name
		for(Local_u8UserNameLengthCounter=0;Local_u8UserNameLengthCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8UserNameLengthCounter++)
     378:	c0 e0       	ldi	r28, 0x00	; 0
     37a:	0b c0       	rjmp	.+22     	; 0x392 <HOME_voidRemoteGetUserAndPass+0x48>
		{
			
			
			BL_voidRxChar(&copy_pu8RemoteUserName[Local_u8UserNameLengthCounter]);	
     37c:	67 01       	movw	r12, r14
     37e:	cc 0e       	add	r12, r28
     380:	d1 1c       	adc	r13, r1
     382:	c6 01       	movw	r24, r12
     384:	0e 94 aa 11 	call	0x2354	; 0x2354 <BL_voidRxChar>
			if(copy_pu8RemoteUserName[Local_u8UserNameLengthCounter]=='#')
     388:	f6 01       	movw	r30, r12
     38a:	80 81       	ld	r24, Z
     38c:	83 32       	cpi	r24, 0x23	; 35
     38e:	19 f0       	breq	.+6      	; 0x396 <HOME_voidRemoteGetUserAndPass+0x4c>
		//dis request for user name
		BL_voidTxString	("User Name:");
		BL_voidTxChar('\r');
	
		//loop for 8 digits user name
		for(Local_u8UserNameLengthCounter=0;Local_u8UserNameLengthCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8UserNameLengthCounter++)
     390:	cf 5f       	subi	r28, 0xFF	; 255
     392:	c8 30       	cpi	r28, 0x08	; 8
     394:	98 f3       	brcs	.-26     	; 0x37c <HOME_voidRemoteGetUserAndPass+0x32>
			{
				break;
			}
			
		}
		copy_pu8RemoteUserName[Local_u8UserNameLengthCounter]='\0';
     396:	f7 01       	movw	r30, r14
     398:	ec 0f       	add	r30, r28
     39a:	f1 1d       	adc	r31, r1
     39c:	10 82       	st	Z, r1
		BL_voidTxString("Entered User Name:");
     39e:	84 eb       	ldi	r24, 0xB4	; 180
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
		BL_voidTxChar('\r');
     3a6:	8d e0       	ldi	r24, 0x0D	; 13
     3a8:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
		//loop for 8 digits user name
		
		for(Local_u8UserNameLengthCounter=0;Local_u8UserNameLengthCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8UserNameLengthCounter++)
     3ac:	c0 e0       	ldi	r28, 0x00	; 0
     3ae:	07 c0       	rjmp	.+14     	; 0x3be <HOME_voidRemoteGetUserAndPass+0x74>
		{
			
			
			BL_voidTxChar(copy_pu8RemoteUserName[Local_u8UserNameLengthCounter]);	
     3b0:	f7 01       	movw	r30, r14
     3b2:	ec 0f       	add	r30, r28
     3b4:	f1 1d       	adc	r31, r1
     3b6:	80 81       	ld	r24, Z
     3b8:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
		copy_pu8RemoteUserName[Local_u8UserNameLengthCounter]='\0';
		BL_voidTxString("Entered User Name:");
		BL_voidTxChar('\r');
		//loop for 8 digits user name
		
		for(Local_u8UserNameLengthCounter=0;Local_u8UserNameLengthCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8UserNameLengthCounter++)
     3bc:	cf 5f       	subi	r28, 0xFF	; 255
     3be:	c8 30       	cpi	r28, 0x08	; 8
     3c0:	b8 f3       	brcs	.-18     	; 0x3b0 <HOME_voidRemoteGetUserAndPass+0x66>
			
			BL_voidTxChar(copy_pu8RemoteUserName[Local_u8UserNameLengthCounter]);	
			
		}
		
		BL_voidTxChar('\r');
     3c2:	8d e0       	ldi	r24, 0x0D	; 13
     3c4:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
		
		
		//display request for pass
		BL_voidTxString	("Password:");
     3c8:	87 ec       	ldi	r24, 0xC7	; 199
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
		BL_voidTxChar('\r');
     3d0:	8d e0       	ldi	r24, 0x0D	; 13
     3d2:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
	
		//loop for 8 digits user pass
		for(Local_u8UserPassCounter=0;Local_u8UserPassCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh+1;Local_u8UserPassCounter++)
     3d6:	c0 e0       	ldi	r28, 0x00	; 0
     3d8:	0b c0       	rjmp	.+22     	; 0x3f0 <HOME_voidRemoteGetUserAndPass+0xa6>
		{
			
			BL_voidRxChar(&copy_pu8RemoteUserPass[Local_u8UserPassCounter]);
     3da:	78 01       	movw	r14, r16
     3dc:	ec 0e       	add	r14, r28
     3de:	f1 1c       	adc	r15, r1
     3e0:	c7 01       	movw	r24, r14
     3e2:	0e 94 aa 11 	call	0x2354	; 0x2354 <BL_voidRxChar>
			if(copy_pu8RemoteUserPass[Local_u8UserPassCounter]=='#')
     3e6:	f7 01       	movw	r30, r14
     3e8:	80 81       	ld	r24, Z
     3ea:	83 32       	cpi	r24, 0x23	; 35
     3ec:	19 f0       	breq	.+6      	; 0x3f4 <HOME_voidRemoteGetUserAndPass+0xaa>
		//display request for pass
		BL_voidTxString	("Password:");
		BL_voidTxChar('\r');
	
		//loop for 8 digits user pass
		for(Local_u8UserPassCounter=0;Local_u8UserPassCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh+1;Local_u8UserPassCounter++)
     3ee:	cf 5f       	subi	r28, 0xFF	; 255
     3f0:	c9 30       	cpi	r28, 0x09	; 9
     3f2:	98 f3       	brcs	.-26     	; 0x3da <HOME_voidRemoteGetUserAndPass+0x90>
			{
				break;
			}
			
		}
		copy_pu8RemoteUserPass[Local_u8UserPassCounter]='\0';
     3f4:	f8 01       	movw	r30, r16
     3f6:	ec 0f       	add	r30, r28
     3f8:	f1 1d       	adc	r31, r1
     3fa:	10 82       	st	Z, r1
		BL_voidTxString("Entered Pass:");
     3fc:	81 ed       	ldi	r24, 0xD1	; 209
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
		BL_voidTxChar('\r');
     404:	8d e0       	ldi	r24, 0x0D	; 13
     406:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
		//loop for 8 digits user pass
		for(Local_u8UserPassCounter=0;Local_u8UserPassCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8UserPassCounter++)
     40a:	c0 e0       	ldi	r28, 0x00	; 0
     40c:	07 c0       	rjmp	.+14     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
		{
			
			BL_voidTxChar(copy_pu8RemoteUserPass[Local_u8UserPassCounter]);
     40e:	f8 01       	movw	r30, r16
     410:	ec 0f       	add	r30, r28
     412:	f1 1d       	adc	r31, r1
     414:	80 81       	ld	r24, Z
     416:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
		}
		copy_pu8RemoteUserPass[Local_u8UserPassCounter]='\0';
		BL_voidTxString("Entered Pass:");
		BL_voidTxChar('\r');
		//loop for 8 digits user pass
		for(Local_u8UserPassCounter=0;Local_u8UserPassCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8UserPassCounter++)
     41a:	cf 5f       	subi	r28, 0xFF	; 255
     41c:	c8 30       	cpi	r28, 0x08	; 8
     41e:	b8 f3       	brcs	.-18     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
			
			BL_voidTxChar(copy_pu8RemoteUserPass[Local_u8UserPassCounter]);
		
		}

		BL_voidTxChar('\r');
     420:	8d e0       	ldi	r24, 0x0D	; 13
     422:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
		//error massage
	}
			
	
		
}
     426:	cf 91       	pop	r28
     428:	1f 91       	pop	r17
     42a:	0f 91       	pop	r16
     42c:	ff 90       	pop	r15
     42e:	ef 90       	pop	r14
     430:	df 90       	pop	r13
     432:	cf 90       	pop	r12
     434:	08 95       	ret

00000436 <HOME_voidCheckUserAndPass>:


void HOME_voidCheckUserAndPass(u8 copy_u8AccessType,u8* copy_pu8UserStatus)
{
     436:	8f 92       	push	r8
     438:	9f 92       	push	r9
     43a:	af 92       	push	r10
     43c:	bf 92       	push	r11
     43e:	cf 92       	push	r12
     440:	df 92       	push	r13
     442:	ef 92       	push	r14
     444:	ff 92       	push	r15
     446:	0f 93       	push	r16
     448:	1f 93       	push	r17
     44a:	cf 93       	push	r28
     44c:	df 93       	push	r29
     44e:	cd b7       	in	r28, 0x3d	; 61
     450:	de b7       	in	r29, 0x3e	; 62
     452:	a0 97       	sbiw	r28, 0x20	; 32
     454:	0f b6       	in	r0, 0x3f	; 63
     456:	f8 94       	cli
     458:	de bf       	out	0x3e, r29	; 62
     45a:	0f be       	out	0x3f, r0	; 63
     45c:	cd bf       	out	0x3d, r28	; 61
	//page 12 to 21 for remote user name and password the first page for user name the followed by password
	//word 180 in eeprom is saved for alarm history
	
	
	//validate pointer
	if(copy_pu8UserStatus!=NULL)
     45e:	61 15       	cp	r22, r1
     460:	71 05       	cpc	r23, r1
     462:	09 f4       	brne	.+2      	; 0x466 <HOME_voidCheckUserAndPass+0x30>
     464:	b6 c1       	rjmp	.+876    	; 0x7d2 <HOME_voidCheckUserAndPass+0x39c>
     466:	4b 01       	movw	r8, r22
		u8 Local_u8TrailsCounter,Local_u8NameByteCheckCounter,Local_u8NameByteCheck=0,
		Local_u8PassByteCheckCounter,Local_u8PassByteCheck=0,Local_u8FireAnAlarm=0,Local_u8PagesCounter,
		Local_u8WrongUserNameCounter=0,Local_u8WrongUserPassCounter=0,LocaL_u8RightEntery=0;
		
		//first case for local access
		if(copy_u8AccessType==HOME_LOCAL_ACCESS)
     468:	81 30       	cpi	r24, 0x01	; 1
     46a:	09 f0       	breq	.+2      	; 0x46e <HOME_voidCheckUserAndPass+0x38>
     46c:	e8 c0       	rjmp	.+464    	; 0x63e <HOME_voidCheckUserAndPass+0x208>
     46e:	d8 c0       	rjmp	.+432    	; 0x620 <HOME_voidCheckUserAndPass+0x1ea>
			u8 Local_u8LocalUserNameLocation;
			
			//every user have max of 3 trials for user name and pass
			for(Local_u8TrailsCounter=0;Local_u8TrailsCounter<HOME_MAX_NUMBER_OF_TRIALS;Local_u8TrailsCounter++)
			{
				Local_u8FireAnAlarm++;
     470:	a3 94       	inc	r10
				Local_u8WrongUserNameCounter=0;
				Local_u8WrongUserPassCounter=0;
				
				//get user name and pass from KPD & LCD
				HOME_voidLocalGetUserAndPass(&local_u8EnteredLocalUserName,&local_u8EnteredLocalUserPass);
     472:	be 01       	movw	r22, r28
     474:	6f 5e       	subi	r22, 0xEF	; 239
     476:	7f 4f       	sbci	r23, 0xFF	; 255
     478:	ce 01       	movw	r24, r28
     47a:	49 96       	adiw	r24, 0x19	; 25
     47c:	0e 94 2a 01 	call	0x254	; 0x254 <HOME_voidLocalGetUserAndPass>
			//every user have max of 3 trials for user name and pass
			for(Local_u8TrailsCounter=0;Local_u8TrailsCounter<HOME_MAX_NUMBER_OF_TRIALS;Local_u8TrailsCounter++)
			{
				Local_u8FireAnAlarm++;
				Local_u8WrongUserNameCounter=0;
				Local_u8WrongUserPassCounter=0;
     480:	b1 2c       	mov	r11, r1
			
			//every user have max of 3 trials for user name and pass
			for(Local_u8TrailsCounter=0;Local_u8TrailsCounter<HOME_MAX_NUMBER_OF_TRIALS;Local_u8TrailsCounter++)
			{
				Local_u8FireAnAlarm++;
				Local_u8WrongUserNameCounter=0;
     482:	c1 2c       	mov	r12, r1
				
				//get user name and pass from KPD & LCD
				HOME_voidLocalGetUserAndPass(&local_u8EnteredLocalUserName,&local_u8EnteredLocalUserPass);
				
				//loop on all reserved local eeprom locations
				for(Local_u8PagesCounter=0;Local_u8PagesCounter<(HOME_MAX_NUM_OF_LOCAL_USER+1);Local_u8PagesCounter++)
     484:	00 e0       	ldi	r16, 0x00	; 0
     486:	60 c0       	rjmp	.+192    	; 0x548 <HOME_voidCheckUserAndPass+0x112>
					Local_u8NameByteCheck=0;
					Local_u8PassByteCheck=0;
					
					//get user name and pass from eeprom for local sys
					Local_u8LocalUserNameLocation=(2*Local_u8PagesCounter)*HOME_USER_NAME_AND_PASS_MAX_LENGTh;
					EEPROM_voidSequentialRead(Local_u8LocalUserNameLocation,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredLocalUserName);
     488:	e0 2e       	mov	r14, r16
     48a:	ee 0c       	add	r14, r14
     48c:	ee 0c       	add	r14, r14
     48e:	ee 0c       	add	r14, r14
     490:	ee 0c       	add	r14, r14
     492:	f1 2c       	mov	r15, r1
     494:	ae 01       	movw	r20, r28
     496:	47 5f       	subi	r20, 0xF7	; 247
     498:	5f 4f       	sbci	r21, 0xFF	; 255
     49a:	68 e0       	ldi	r22, 0x08	; 8
     49c:	70 e0       	ldi	r23, 0x00	; 0
     49e:	c7 01       	movw	r24, r14
     4a0:	0e 94 2b 12 	call	0x2456	; 0x2456 <EEPROM_voidSequentialRead>
					EEPROM_voidSequentialRead(Local_u8LocalUserNameLocation+HOME_USER_NAME_AND_PASS_MAX_LENGTh,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredLocalUserPass);
     4a4:	ae 01       	movw	r20, r28
     4a6:	4f 5f       	subi	r20, 0xFF	; 255
     4a8:	5f 4f       	sbci	r21, 0xFF	; 255
     4aa:	68 e0       	ldi	r22, 0x08	; 8
     4ac:	70 e0       	ldi	r23, 0x00	; 0
     4ae:	c7 01       	movw	r24, r14
     4b0:	08 96       	adiw	r24, 0x08	; 8
     4b2:	0e 94 2b 12 	call	0x2456	; 0x2456 <EEPROM_voidSequentialRead>
				
				//loop on all reserved local eeprom locations
				for(Local_u8PagesCounter=0;Local_u8PagesCounter<(HOME_MAX_NUM_OF_LOCAL_USER+1);Local_u8PagesCounter++)
				
				{
					Local_u8NameByteCheck=0;
     4b6:	40 e0       	ldi	r20, 0x00	; 0
					Local_u8LocalUserNameLocation=(2*Local_u8PagesCounter)*HOME_USER_NAME_AND_PASS_MAX_LENGTh;
					EEPROM_voidSequentialRead(Local_u8LocalUserNameLocation,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredLocalUserName);
					EEPROM_voidSequentialRead(Local_u8LocalUserNameLocation+HOME_USER_NAME_AND_PASS_MAX_LENGTh,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredLocalUserPass);
					
					//check user name which is entered by is user is the same as the one from eeprom
					for(Local_u8NameByteCheckCounter=0;Local_u8NameByteCheckCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8NameByteCheckCounter++)
     4b8:	20 e0       	ldi	r18, 0x00	; 0
     4ba:	14 c0       	rjmp	.+40     	; 0x4e4 <HOME_voidCheckUserAndPass+0xae>
					{
							
						if(local_u8EnteredLocalUserName[Local_u8NameByteCheckCounter]==local_u8StoredLocalUserName[Local_u8NameByteCheckCounter])
     4bc:	82 2f       	mov	r24, r18
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	e9 e1       	ldi	r30, 0x19	; 25
     4c2:	f0 e0       	ldi	r31, 0x00	; 0
     4c4:	ec 0f       	add	r30, r28
     4c6:	fd 1f       	adc	r31, r29
     4c8:	e8 0f       	add	r30, r24
     4ca:	f9 1f       	adc	r31, r25
     4cc:	30 81       	ld	r19, Z
     4ce:	e9 e0       	ldi	r30, 0x09	; 9
     4d0:	f0 e0       	ldi	r31, 0x00	; 0
     4d2:	ec 0f       	add	r30, r28
     4d4:	fd 1f       	adc	r31, r29
     4d6:	e8 0f       	add	r30, r24
     4d8:	f9 1f       	adc	r31, r25
     4da:	80 81       	ld	r24, Z
     4dc:	38 13       	cpse	r19, r24
     4de:	01 c0       	rjmp	.+2      	; 0x4e2 <HOME_voidCheckUserAndPass+0xac>
						{
							Local_u8NameByteCheck++;
     4e0:	4f 5f       	subi	r20, 0xFF	; 255
					Local_u8LocalUserNameLocation=(2*Local_u8PagesCounter)*HOME_USER_NAME_AND_PASS_MAX_LENGTh;
					EEPROM_voidSequentialRead(Local_u8LocalUserNameLocation,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredLocalUserName);
					EEPROM_voidSequentialRead(Local_u8LocalUserNameLocation+HOME_USER_NAME_AND_PASS_MAX_LENGTh,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredLocalUserPass);
					
					//check user name which is entered by is user is the same as the one from eeprom
					for(Local_u8NameByteCheckCounter=0;Local_u8NameByteCheckCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8NameByteCheckCounter++)
     4e2:	2f 5f       	subi	r18, 0xFF	; 255
     4e4:	28 30       	cpi	r18, 0x08	; 8
     4e6:	50 f3       	brcs	.-44     	; 0x4bc <HOME_voidCheckUserAndPass+0x86>
						}
					}
					
					
					//if the user name is right now we can check pass
					if(Local_u8NameByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
     4e8:	48 30       	cpi	r20, 0x08	; 8
     4ea:	61 f5       	brne	.+88     	; 0x544 <HOME_voidCheckUserAndPass+0x10e>
     4ec:	15 c0       	rjmp	.+42     	; 0x518 <HOME_voidCheckUserAndPass+0xe2>
					{
						
						for(Local_u8PassByteCheckCounter=0;Local_u8PassByteCheckCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8PassByteCheckCounter++)
						{
							
							if(local_u8EnteredLocalUserPass[Local_u8PassByteCheckCounter]==local_u8StoredLocalUserPass[Local_u8PassByteCheckCounter])
     4ee:	82 2f       	mov	r24, r18
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	e1 e1       	ldi	r30, 0x11	; 17
     4f4:	f0 e0       	ldi	r31, 0x00	; 0
     4f6:	ec 0f       	add	r30, r28
     4f8:	fd 1f       	adc	r31, r29
     4fa:	e8 0f       	add	r30, r24
     4fc:	f9 1f       	adc	r31, r25
     4fe:	30 81       	ld	r19, Z
     500:	e1 e0       	ldi	r30, 0x01	; 1
     502:	f0 e0       	ldi	r31, 0x00	; 0
     504:	ec 0f       	add	r30, r28
     506:	fd 1f       	adc	r31, r29
     508:	e8 0f       	add	r30, r24
     50a:	f9 1f       	adc	r31, r25
     50c:	80 81       	ld	r24, Z
     50e:	38 13       	cpse	r19, r24
     510:	01 c0       	rjmp	.+2      	; 0x514 <HOME_voidCheckUserAndPass+0xde>
							{
								Local_u8PassByteCheck++;
     512:	4f 5f       	subi	r20, 0xFF	; 255
					
					//if the user name is right now we can check pass
					if(Local_u8NameByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
					{
						
						for(Local_u8PassByteCheckCounter=0;Local_u8PassByteCheckCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8PassByteCheckCounter++)
     514:	2f 5f       	subi	r18, 0xFF	; 255
     516:	02 c0       	rjmp	.+4      	; 0x51c <HOME_voidCheckUserAndPass+0xe6>
     518:	40 e0       	ldi	r20, 0x00	; 0
     51a:	20 e0       	ldi	r18, 0x00	; 0
     51c:	28 30       	cpi	r18, 0x08	; 8
     51e:	38 f3       	brcs	.-50     	; 0x4ee <HOME_voidCheckUserAndPass+0xb8>
							}
									
						}
						
						//if the pass right now we difine the user type(admin or user)AD
						if(Local_u8PassByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
     520:	48 30       	cpi	r20, 0x08	; 8
     522:	71 f4       	brne	.+28     	; 0x540 <HOME_voidCheckUserAndPass+0x10a>
							

							LocaL_u8RightEntery=1;
							
							//admin user name is saved at loc 240(page 30)
							if(Local_u8PagesCounter==HOME_MAX_NUM_OF_LOCAL_USER)
     524:	05 30       	cpi	r16, 0x05	; 5
     526:	31 f4       	brne	.+12     	; 0x534 <HOME_voidCheckUserAndPass+0xfe>
							{
								*copy_pu8UserStatus=HOME_LOCAL_ADMIN;	
     528:	81 e0       	ldi	r24, 0x01	; 1
     52a:	f4 01       	movw	r30, r8
     52c:	80 83       	st	Z, r24
						//if the pass right now we difine the user type(admin or user)AD
						if(Local_u8PassByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
						{
							

							LocaL_u8RightEntery=1;
     52e:	dd 24       	eor	r13, r13
     530:	d3 94       	inc	r13
     532:	0d c0       	rjmp	.+26     	; 0x54e <HOME_voidCheckUserAndPass+0x118>
							{
								*copy_pu8UserStatus=HOME_LOCAL_ADMIN;	
							}
							else
							{
								*copy_pu8UserStatus=HOME_LOCAL_USER;
     534:	82 e0       	ldi	r24, 0x02	; 2
     536:	f4 01       	movw	r30, r8
     538:	80 83       	st	Z, r24
						//if the pass right now we difine the user type(admin or user)AD
						if(Local_u8PassByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
						{
							

							LocaL_u8RightEntery=1;
     53a:	dd 24       	eor	r13, r13
     53c:	d3 94       	inc	r13
     53e:	07 c0       	rjmp	.+14     	; 0x54e <HOME_voidCheckUserAndPass+0x118>
							break;
							
						}
						else
						{
							Local_u8WrongUserPassCounter++;
     540:	b3 94       	inc	r11
     542:	01 c0       	rjmp	.+2      	; 0x546 <HOME_voidCheckUserAndPass+0x110>
						}
							
					}
					else
					{
						Local_u8WrongUserNameCounter++;
     544:	c3 94       	inc	r12
				
				//get user name and pass from KPD & LCD
				HOME_voidLocalGetUserAndPass(&local_u8EnteredLocalUserName,&local_u8EnteredLocalUserPass);
				
				//loop on all reserved local eeprom locations
				for(Local_u8PagesCounter=0;Local_u8PagesCounter<(HOME_MAX_NUM_OF_LOCAL_USER+1);Local_u8PagesCounter++)
     546:	0f 5f       	subi	r16, 0xFF	; 255
     548:	06 30       	cpi	r16, 0x06	; 6
     54a:	08 f4       	brcc	.+2      	; 0x54e <HOME_voidCheckUserAndPass+0x118>
     54c:	9d cf       	rjmp	.-198    	; 0x488 <HOME_voidCheckUserAndPass+0x52>
					}
				
				}
			
				//is the entery was right dis on LCD
				if(LocaL_u8RightEntery==1)
     54e:	f1 e0       	ldi	r31, 0x01	; 1
     550:	df 12       	cpse	r13, r31
     552:	14 c0       	rjmp	.+40     	; 0x57c <HOME_voidCheckUserAndPass+0x146>
				{
					LCD_voidClear();
     554:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <LCD_voidClear>
					LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
     558:	60 e0       	ldi	r22, 0x00	; 0
     55a:	81 e0       	ldi	r24, 0x01	; 1
     55c:	0e 94 40 15 	call	0x2a80	; 0x2a80 <LCD_voidGoTOSpecificPosition>
					LCD_voidDisplayString("ACCESS PERMITED");
     560:	8f ed       	ldi	r24, 0xDF	; 223
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	0e 94 51 14 	call	0x28a2	; 0x28a2 <LCD_voidDisplayString>
     568:	2f ef       	ldi	r18, 0xFF	; 255
     56a:	89 e6       	ldi	r24, 0x69	; 105
     56c:	98 e1       	ldi	r25, 0x18	; 24
     56e:	21 50       	subi	r18, 0x01	; 1
     570:	80 40       	sbci	r24, 0x00	; 0
     572:	90 40       	sbci	r25, 0x00	; 0
     574:	e1 f7       	brne	.-8      	; 0x56e <HOME_voidCheckUserAndPass+0x138>
     576:	00 c0       	rjmp	.+0      	; 0x578 <HOME_voidCheckUserAndPass+0x142>
     578:	00 00       	nop
     57a:	58 c0       	rjmp	.+176    	; 0x62c <HOME_voidCheckUserAndPass+0x1f6>
					_delay_ms(500);
					break;
				}
				//is the entery was wrong dis on LCD and hint the reason
				else if(Local_u8WrongUserNameCounter==(HOME_MAX_NUM_OF_LOCAL_USER+1))
     57c:	e6 e0       	ldi	r30, 0x06	; 6
     57e:	ce 12       	cpse	r12, r30
     580:	26 c0       	rjmp	.+76     	; 0x5ce <HOME_voidCheckUserAndPass+0x198>
				{
					LCD_voidClear();
     582:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <LCD_voidClear>
					LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
     586:	60 e0       	ldi	r22, 0x00	; 0
     588:	81 e0       	ldi	r24, 0x01	; 1
     58a:	0e 94 40 15 	call	0x2a80	; 0x2a80 <LCD_voidGoTOSpecificPosition>
					LCD_voidDisplayString("ACCESS DENIED");
     58e:	8f ee       	ldi	r24, 0xEF	; 239
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	0e 94 51 14 	call	0x28a2	; 0x28a2 <LCD_voidDisplayString>
					LCD_voidGoTOSpecificPosition(LCD_LINE_TWO,0);
     596:	60 e0       	ldi	r22, 0x00	; 0
     598:	82 e0       	ldi	r24, 0x02	; 2
     59a:	0e 94 40 15 	call	0x2a80	; 0x2a80 <LCD_voidGoTOSpecificPosition>
					LCD_voidDisplayString("Wrong User Name");
     59e:	8d ef       	ldi	r24, 0xFD	; 253
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	0e 94 51 14 	call	0x28a2	; 0x28a2 <LCD_voidDisplayString>
					//dont display this message on trial 3
					if(Local_u8TrailsCounter!=(HOME_MAX_NUMBER_OF_TRIALS-1))
     5a6:	12 30       	cpi	r17, 0x02	; 2
     5a8:	c9 f1       	breq	.+114    	; 0x61c <HOME_voidCheckUserAndPass+0x1e6>
     5aa:	ff ef       	ldi	r31, 0xFF	; 255
     5ac:	23 ed       	ldi	r18, 0xD3	; 211
     5ae:	80 e3       	ldi	r24, 0x30	; 48
     5b0:	f1 50       	subi	r31, 0x01	; 1
     5b2:	20 40       	sbci	r18, 0x00	; 0
     5b4:	80 40       	sbci	r24, 0x00	; 0
     5b6:	e1 f7       	brne	.-8      	; 0x5b0 <HOME_voidCheckUserAndPass+0x17a>
     5b8:	00 c0       	rjmp	.+0      	; 0x5ba <HOME_voidCheckUserAndPass+0x184>
     5ba:	00 00       	nop
					{	
						_delay_ms(1000);
						LCD_voidGoTOSpecificPosition(LCD_LINE_TWO,0);
     5bc:	60 e0       	ldi	r22, 0x00	; 0
     5be:	82 e0       	ldi	r24, 0x02	; 2
     5c0:	0e 94 40 15 	call	0x2a80	; 0x2a80 <LCD_voidGoTOSpecificPosition>
						LCD_voidDisplayString("Please Try Again");
     5c4:	8d e0       	ldi	r24, 0x0D	; 13
     5c6:	91 e0       	ldi	r25, 0x01	; 1
     5c8:	0e 94 51 14 	call	0x28a2	; 0x28a2 <LCD_voidDisplayString>
     5cc:	27 c0       	rjmp	.+78     	; 0x61c <HOME_voidCheckUserAndPass+0x1e6>
					}
				}
				//is the entery was wrong dis on LCD and hint the reason
				else if(Local_u8WrongUserPassCounter!=0)
     5ce:	bb 20       	and	r11, r11
     5d0:	29 f1       	breq	.+74     	; 0x61c <HOME_voidCheckUserAndPass+0x1e6>
				{
					LCD_voidClear();
     5d2:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <LCD_voidClear>
					LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
     5d6:	60 e0       	ldi	r22, 0x00	; 0
     5d8:	81 e0       	ldi	r24, 0x01	; 1
     5da:	0e 94 40 15 	call	0x2a80	; 0x2a80 <LCD_voidGoTOSpecificPosition>
					LCD_voidDisplayString("ACCESS DENIED");
     5de:	8f ee       	ldi	r24, 0xEF	; 239
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	0e 94 51 14 	call	0x28a2	; 0x28a2 <LCD_voidDisplayString>
					LCD_voidGoTOSpecificPosition(LCD_LINE_TWO,0);
     5e6:	60 e0       	ldi	r22, 0x00	; 0
     5e8:	82 e0       	ldi	r24, 0x02	; 2
     5ea:	0e 94 40 15 	call	0x2a80	; 0x2a80 <LCD_voidGoTOSpecificPosition>
					LCD_voidDisplayString("Wrong Password");
     5ee:	8e e1       	ldi	r24, 0x1E	; 30
     5f0:	91 e0       	ldi	r25, 0x01	; 1
     5f2:	0e 94 51 14 	call	0x28a2	; 0x28a2 <LCD_voidDisplayString>
					
					//dont display this message on trial 3
					if(Local_u8TrailsCounter!=(HOME_MAX_NUMBER_OF_TRIALS-1))
     5f6:	12 30       	cpi	r17, 0x02	; 2
     5f8:	89 f0       	breq	.+34     	; 0x61c <HOME_voidCheckUserAndPass+0x1e6>
     5fa:	9f ef       	ldi	r25, 0xFF	; 255
     5fc:	e3 ed       	ldi	r30, 0xD3	; 211
     5fe:	f0 e3       	ldi	r31, 0x30	; 48
     600:	91 50       	subi	r25, 0x01	; 1
     602:	e0 40       	sbci	r30, 0x00	; 0
     604:	f0 40       	sbci	r31, 0x00	; 0
     606:	e1 f7       	brne	.-8      	; 0x600 <HOME_voidCheckUserAndPass+0x1ca>
     608:	00 c0       	rjmp	.+0      	; 0x60a <HOME_voidCheckUserAndPass+0x1d4>
     60a:	00 00       	nop
					{
						_delay_ms(1000);
						LCD_voidGoTOSpecificPosition(LCD_LINE_TWO,0);
     60c:	60 e0       	ldi	r22, 0x00	; 0
     60e:	82 e0       	ldi	r24, 0x02	; 2
     610:	0e 94 40 15 	call	0x2a80	; 0x2a80 <LCD_voidGoTOSpecificPosition>
						LCD_voidDisplayString("Please Try Again");
     614:	8d e0       	ldi	r24, 0x0D	; 13
     616:	91 e0       	ldi	r25, 0x01	; 1
     618:	0e 94 51 14 	call	0x28a2	; 0x28a2 <LCD_voidDisplayString>
			u8 local_u8EnteredLocalUserName[HOME_USER_NAME_AND_PASS_MAX_LENGTh],local_u8EnteredLocalUserPass[HOME_USER_NAME_AND_PASS_MAX_LENGTh];
			u8 local_u8StoredLocalUserName[HOME_USER_NAME_AND_PASS_MAX_LENGTh],local_u8StoredLocalUserPass[HOME_USER_NAME_AND_PASS_MAX_LENGTh];
			u8 Local_u8LocalUserNameLocation;
			
			//every user have max of 3 trials for user name and pass
			for(Local_u8TrailsCounter=0;Local_u8TrailsCounter<HOME_MAX_NUMBER_OF_TRIALS;Local_u8TrailsCounter++)
     61c:	1f 5f       	subi	r17, 0xFF	; 255
     61e:	03 c0       	rjmp	.+6      	; 0x626 <HOME_voidCheckUserAndPass+0x1f0>
     620:	d1 2c       	mov	r13, r1
     622:	a1 2c       	mov	r10, r1
     624:	10 e0       	ldi	r17, 0x00	; 0
     626:	13 30       	cpi	r17, 0x03	; 3
     628:	08 f4       	brcc	.+2      	; 0x62c <HOME_voidCheckUserAndPass+0x1f6>
     62a:	22 cf       	rjmp	.-444    	; 0x470 <HOME_voidCheckUserAndPass+0x3a>
				}
				
			
			}
			//check the alarm after the 3rd trial
			if((HOME_MAX_NUMBER_OF_TRIALS==Local_u8FireAnAlarm)&&(LocaL_u8RightEntery==0))
     62c:	23 e0       	ldi	r18, 0x03	; 3
     62e:	a2 12       	cpse	r10, r18
     630:	d0 c0       	rjmp	.+416    	; 0x7d2 <HOME_voidCheckUserAndPass+0x39c>
     632:	d1 10       	cpse	r13, r1
     634:	ce c0       	rjmp	.+412    	; 0x7d2 <HOME_voidCheckUserAndPass+0x39c>
			{
				*copy_pu8UserStatus=HOME_LOGIN_FAILED;
     636:	85 e0       	ldi	r24, 0x05	; 5
     638:	f4 01       	movw	r30, r8
     63a:	80 83       	st	Z, r24
     63c:	ca c0       	rjmp	.+404    	; 0x7d2 <HOME_voidCheckUserAndPass+0x39c>
			}
		}
		
		else if(copy_u8AccessType==HOME_REMOTE_ACCESS)
     63e:	82 30       	cpi	r24, 0x02	; 2
     640:	09 f0       	breq	.+2      	; 0x644 <HOME_voidCheckUserAndPass+0x20e>
     642:	c7 c0       	rjmp	.+398    	; 0x7d2 <HOME_voidCheckUserAndPass+0x39c>
     644:	b8 c0       	rjmp	.+368    	; 0x7b6 <HOME_voidCheckUserAndPass+0x380>
			
			//every user have max of 3 trials for user name and pass
			for(Local_u8TrailsCounter=0;Local_u8TrailsCounter<HOME_MAX_NUMBER_OF_TRIALS;Local_u8TrailsCounter++)
			{
				
				Local_u8FireAnAlarm++;
     646:	a3 94       	inc	r10
				Local_u8WrongUserNameCounter=0;
				Local_u8WrongUserPassCounter=0;
				
				
				//dis request for use name and pass
				BL_voidTxString	("Please Enter User Name & Password ");
     648:	8d e2       	ldi	r24, 0x2D	; 45
     64a:	91 e0       	ldi	r25, 0x01	; 1
     64c:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
				BL_voidTxString("\n");
     650:	80 e5       	ldi	r24, 0x50	; 80
     652:	91 e0       	ldi	r25, 0x01	; 1
     654:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
				
				//get user name and pass from BL
				HOME_voidRemoteGetUserAndPass(&local_u8EnteredRemoteUserName,&local_u8EnteredRemoteUserPass);
     658:	be 01       	movw	r22, r28
     65a:	6f 5e       	subi	r22, 0xEF	; 239
     65c:	7f 4f       	sbci	r23, 0xFF	; 255
     65e:	ce 01       	movw	r24, r28
     660:	49 96       	adiw	r24, 0x19	; 25
     662:	0e 94 a5 01 	call	0x34a	; 0x34a <HOME_voidRemoteGetUserAndPass>
			for(Local_u8TrailsCounter=0;Local_u8TrailsCounter<HOME_MAX_NUMBER_OF_TRIALS;Local_u8TrailsCounter++)
			{
				
				Local_u8FireAnAlarm++;
				Local_u8WrongUserNameCounter=0;
				Local_u8WrongUserPassCounter=0;
     666:	b1 2c       	mov	r11, r1
			//every user have max of 3 trials for user name and pass
			for(Local_u8TrailsCounter=0;Local_u8TrailsCounter<HOME_MAX_NUMBER_OF_TRIALS;Local_u8TrailsCounter++)
			{
				
				Local_u8FireAnAlarm++;
				Local_u8WrongUserNameCounter=0;
     668:	c1 2c       	mov	r12, r1
				
				//get user name and pass from BL
				HOME_voidRemoteGetUserAndPass(&local_u8EnteredRemoteUserName,&local_u8EnteredRemoteUserPass);
				
				//loop on every remote user
				for(Local_u8PagesCounter=HOME_MAX_NUM_OF_LOCAL_USER;Local_u8PagesCounter<((HOME_MAX_NUM_OF_LOCAL_USER*2)+1);Local_u8PagesCounter++)
     66a:	05 e0       	ldi	r16, 0x05	; 5
     66c:	60 c0       	rjmp	.+192    	; 0x72e <HOME_voidCheckUserAndPass+0x2f8>
					Local_u8NameByteCheck=0;
					Local_u8PassByteCheck=0;
					
					//get user name and pass from EEPROM
					Local_u8RemoteUserNameLocation=(2*Local_u8PagesCounter)*HOME_USER_NAME_AND_PASS_MAX_LENGTh;
					EEPROM_voidSequentialRead(Local_u8RemoteUserNameLocation,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredRemoteUserName);
     66e:	e0 2e       	mov	r14, r16
     670:	ee 0c       	add	r14, r14
     672:	ee 0c       	add	r14, r14
     674:	ee 0c       	add	r14, r14
     676:	ee 0c       	add	r14, r14
     678:	f1 2c       	mov	r15, r1
     67a:	ae 01       	movw	r20, r28
     67c:	47 5f       	subi	r20, 0xF7	; 247
     67e:	5f 4f       	sbci	r21, 0xFF	; 255
     680:	68 e0       	ldi	r22, 0x08	; 8
     682:	70 e0       	ldi	r23, 0x00	; 0
     684:	c7 01       	movw	r24, r14
     686:	0e 94 2b 12 	call	0x2456	; 0x2456 <EEPROM_voidSequentialRead>
					EEPROM_voidSequentialRead((Local_u8RemoteUserNameLocation+HOME_USER_NAME_AND_PASS_MAX_LENGTh),HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredRemoteUserPass);
     68a:	ae 01       	movw	r20, r28
     68c:	4f 5f       	subi	r20, 0xFF	; 255
     68e:	5f 4f       	sbci	r21, 0xFF	; 255
     690:	68 e0       	ldi	r22, 0x08	; 8
     692:	70 e0       	ldi	r23, 0x00	; 0
     694:	c7 01       	movw	r24, r14
     696:	08 96       	adiw	r24, 0x08	; 8
     698:	0e 94 2b 12 	call	0x2456	; 0x2456 <EEPROM_voidSequentialRead>
				HOME_voidRemoteGetUserAndPass(&local_u8EnteredRemoteUserName,&local_u8EnteredRemoteUserPass);
				
				//loop on every remote user
				for(Local_u8PagesCounter=HOME_MAX_NUM_OF_LOCAL_USER;Local_u8PagesCounter<((HOME_MAX_NUM_OF_LOCAL_USER*2)+1);Local_u8PagesCounter++)
				{
					Local_u8NameByteCheck=0;
     69c:	40 e0       	ldi	r20, 0x00	; 0
					Local_u8RemoteUserNameLocation=(2*Local_u8PagesCounter)*HOME_USER_NAME_AND_PASS_MAX_LENGTh;
					EEPROM_voidSequentialRead(Local_u8RemoteUserNameLocation,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredRemoteUserName);
					EEPROM_voidSequentialRead((Local_u8RemoteUserNameLocation+HOME_USER_NAME_AND_PASS_MAX_LENGTh),HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredRemoteUserPass);
					
					//loop on every byte of user name
					for(Local_u8NameByteCheckCounter=0;Local_u8NameByteCheckCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8NameByteCheckCounter++)
     69e:	20 e0       	ldi	r18, 0x00	; 0
     6a0:	14 c0       	rjmp	.+40     	; 0x6ca <HOME_voidCheckUserAndPass+0x294>
					{
						
						//check the byte stored with the entered	
						if(local_u8EnteredRemoteUserName[Local_u8NameByteCheckCounter]==local_u8StoredRemoteUserName[Local_u8NameByteCheckCounter])
     6a2:	82 2f       	mov	r24, r18
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	e9 e1       	ldi	r30, 0x19	; 25
     6a8:	f0 e0       	ldi	r31, 0x00	; 0
     6aa:	ec 0f       	add	r30, r28
     6ac:	fd 1f       	adc	r31, r29
     6ae:	e8 0f       	add	r30, r24
     6b0:	f9 1f       	adc	r31, r25
     6b2:	30 81       	ld	r19, Z
     6b4:	e9 e0       	ldi	r30, 0x09	; 9
     6b6:	f0 e0       	ldi	r31, 0x00	; 0
     6b8:	ec 0f       	add	r30, r28
     6ba:	fd 1f       	adc	r31, r29
     6bc:	e8 0f       	add	r30, r24
     6be:	f9 1f       	adc	r31, r25
     6c0:	80 81       	ld	r24, Z
     6c2:	38 13       	cpse	r19, r24
     6c4:	01 c0       	rjmp	.+2      	; 0x6c8 <HOME_voidCheckUserAndPass+0x292>
						{
							
							Local_u8NameByteCheck++;
     6c6:	4f 5f       	subi	r20, 0xFF	; 255
					Local_u8RemoteUserNameLocation=(2*Local_u8PagesCounter)*HOME_USER_NAME_AND_PASS_MAX_LENGTh;
					EEPROM_voidSequentialRead(Local_u8RemoteUserNameLocation,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredRemoteUserName);
					EEPROM_voidSequentialRead((Local_u8RemoteUserNameLocation+HOME_USER_NAME_AND_PASS_MAX_LENGTh),HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredRemoteUserPass);
					
					//loop on every byte of user name
					for(Local_u8NameByteCheckCounter=0;Local_u8NameByteCheckCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8NameByteCheckCounter++)
     6c8:	2f 5f       	subi	r18, 0xFF	; 255
     6ca:	28 30       	cpi	r18, 0x08	; 8
     6cc:	50 f3       	brcs	.-44     	; 0x6a2 <HOME_voidCheckUserAndPass+0x26c>
							
							
						}
					
					}
					if(Local_u8NameByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
     6ce:	48 30       	cpi	r20, 0x08	; 8
     6d0:	61 f5       	brne	.+88     	; 0x72a <HOME_voidCheckUserAndPass+0x2f4>
     6d2:	15 c0       	rjmp	.+42     	; 0x6fe <HOME_voidCheckUserAndPass+0x2c8>
					{
						//loop on every byte of password
						for(Local_u8PassByteCheckCounter=0;Local_u8PassByteCheckCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8PassByteCheckCounter++)
						{
							//check the byte stored with the entered
							if(local_u8EnteredRemoteUserPass[Local_u8PassByteCheckCounter]==local_u8StoredRemoteUserPass[Local_u8PassByteCheckCounter])
     6d4:	82 2f       	mov	r24, r18
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	e1 e1       	ldi	r30, 0x11	; 17
     6da:	f0 e0       	ldi	r31, 0x00	; 0
     6dc:	ec 0f       	add	r30, r28
     6de:	fd 1f       	adc	r31, r29
     6e0:	e8 0f       	add	r30, r24
     6e2:	f9 1f       	adc	r31, r25
     6e4:	30 81       	ld	r19, Z
     6e6:	e1 e0       	ldi	r30, 0x01	; 1
     6e8:	f0 e0       	ldi	r31, 0x00	; 0
     6ea:	ec 0f       	add	r30, r28
     6ec:	fd 1f       	adc	r31, r29
     6ee:	e8 0f       	add	r30, r24
     6f0:	f9 1f       	adc	r31, r25
     6f2:	80 81       	ld	r24, Z
     6f4:	38 13       	cpse	r19, r24
     6f6:	01 c0       	rjmp	.+2      	; 0x6fa <HOME_voidCheckUserAndPass+0x2c4>
							{
								Local_u8PassByteCheck++;
     6f8:	4f 5f       	subi	r20, 0xFF	; 255
					
					}
					if(Local_u8NameByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
					{
						//loop on every byte of password
						for(Local_u8PassByteCheckCounter=0;Local_u8PassByteCheckCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8PassByteCheckCounter++)
     6fa:	2f 5f       	subi	r18, 0xFF	; 255
     6fc:	02 c0       	rjmp	.+4      	; 0x702 <HOME_voidCheckUserAndPass+0x2cc>
     6fe:	40 e0       	ldi	r20, 0x00	; 0
     700:	20 e0       	ldi	r18, 0x00	; 0
     702:	28 30       	cpi	r18, 0x08	; 8
     704:	38 f3       	brcs	.-50     	; 0x6d4 <HOME_voidCheckUserAndPass+0x29e>
								
							}
									
						}
						//check the entry is right or wrong
						if(Local_u8PassByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
     706:	48 30       	cpi	r20, 0x08	; 8
     708:	71 f4       	brne	.+28     	; 0x726 <HOME_voidCheckUserAndPass+0x2f0>
							

							LocaL_u8RightEntery=1;
							
							//admin user name is saved at loc 240(page 30)
							if(Local_u8PagesCounter==HOME_MAX_NUM_OF_LOCAL_USER)
     70a:	05 30       	cpi	r16, 0x05	; 5
     70c:	31 f4       	brne	.+12     	; 0x71a <HOME_voidCheckUserAndPass+0x2e4>
							{
								*copy_pu8UserStatus=HOME_REMOTE_ADMIN;	
     70e:	83 e0       	ldi	r24, 0x03	; 3
     710:	f4 01       	movw	r30, r8
     712:	80 83       	st	Z, r24
						//check the entry is right or wrong
						if(Local_u8PassByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
						{
							

							LocaL_u8RightEntery=1;
     714:	dd 24       	eor	r13, r13
     716:	d3 94       	inc	r13
     718:	0d c0       	rjmp	.+26     	; 0x734 <HOME_voidCheckUserAndPass+0x2fe>
							{
								*copy_pu8UserStatus=HOME_REMOTE_ADMIN;	
							}
							else
							{
								*copy_pu8UserStatus=HOME_REMOTE_USER;
     71a:	84 e0       	ldi	r24, 0x04	; 4
     71c:	f4 01       	movw	r30, r8
     71e:	80 83       	st	Z, r24
						//check the entry is right or wrong
						if(Local_u8PassByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
						{
							

							LocaL_u8RightEntery=1;
     720:	dd 24       	eor	r13, r13
     722:	d3 94       	inc	r13
     724:	07 c0       	rjmp	.+14     	; 0x734 <HOME_voidCheckUserAndPass+0x2fe>
							break;
							
						}
						else
						{
							Local_u8WrongUserPassCounter++;
     726:	b3 94       	inc	r11
     728:	01 c0       	rjmp	.+2      	; 0x72c <HOME_voidCheckUserAndPass+0x2f6>
						
						
					}
					else
					{
						Local_u8WrongUserNameCounter++;
     72a:	c3 94       	inc	r12
				
				//get user name and pass from BL
				HOME_voidRemoteGetUserAndPass(&local_u8EnteredRemoteUserName,&local_u8EnteredRemoteUserPass);
				
				//loop on every remote user
				for(Local_u8PagesCounter=HOME_MAX_NUM_OF_LOCAL_USER;Local_u8PagesCounter<((HOME_MAX_NUM_OF_LOCAL_USER*2)+1);Local_u8PagesCounter++)
     72c:	0f 5f       	subi	r16, 0xFF	; 255
     72e:	0b 30       	cpi	r16, 0x0B	; 11
     730:	08 f4       	brcc	.+2      	; 0x734 <HOME_voidCheckUserAndPass+0x2fe>
     732:	9d cf       	rjmp	.-198    	; 0x66e <HOME_voidCheckUserAndPass+0x238>
						
					}
						
				}
				//case of wright entry
				if(LocaL_u8RightEntery==1)
     734:	f1 e0       	ldi	r31, 0x01	; 1
     736:	df 12       	cpse	r13, r31
     738:	08 c0       	rjmp	.+16     	; 0x74a <HOME_voidCheckUserAndPass+0x314>
				{
					
					BL_voidTxString	("ACCESS PERMITED");
     73a:	8f ed       	ldi	r24, 0xDF	; 223
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
					BL_voidTxChar('\r');
     742:	8d e0       	ldi	r24, 0x0D	; 13
     744:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
					break;
     748:	3c c0       	rjmp	.+120    	; 0x7c2 <HOME_voidCheckUserAndPass+0x38c>
				}
				//is the entery was wrong 
				else if(Local_u8WrongUserNameCounter==(HOME_MAX_NUM_OF_LOCAL_USER+1))
     74a:	26 e0       	ldi	r18, 0x06	; 6
     74c:	c2 12       	cpse	r12, r18
     74e:	18 c0       	rjmp	.+48     	; 0x780 <HOME_voidCheckUserAndPass+0x34a>
				{
					BL_voidTxString	("ACCESS DENIED");
     750:	8f ee       	ldi	r24, 0xEF	; 239
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
					BL_voidTxChar('\r');
     758:	8d e0       	ldi	r24, 0x0D	; 13
     75a:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
					BL_voidTxString	("Wrong User Name");
     75e:	8d ef       	ldi	r24, 0xFD	; 253
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
					BL_voidTxChar('\r');
     766:	8d e0       	ldi	r24, 0x0D	; 13
     768:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
					
					//dont display this message on trial 3
					if(Local_u8TrailsCounter!=(HOME_MAX_NUMBER_OF_TRIALS-1))
     76c:	12 30       	cpi	r17, 0x02	; 2
     76e:	09 f1       	breq	.+66     	; 0x7b2 <HOME_voidCheckUserAndPass+0x37c>
					{	
						
						BL_voidTxString	("Please Try Again");
     770:	8d e0       	ldi	r24, 0x0D	; 13
     772:	91 e0       	ldi	r25, 0x01	; 1
     774:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
						BL_voidTxChar('\r');
     778:	8d e0       	ldi	r24, 0x0D	; 13
     77a:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
     77e:	19 c0       	rjmp	.+50     	; 0x7b2 <HOME_voidCheckUserAndPass+0x37c>
						
					}
				}
				//is the entery was wrong dis on LCD and hint the reason
				else if(Local_u8WrongUserPassCounter!=0)
     780:	bb 20       	and	r11, r11
     782:	b9 f0       	breq	.+46     	; 0x7b2 <HOME_voidCheckUserAndPass+0x37c>
				{
					BL_voidTxString	("ACCESS DENIED");
     784:	8f ee       	ldi	r24, 0xEF	; 239
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
					BL_voidTxChar('\r');
     78c:	8d e0       	ldi	r24, 0x0D	; 13
     78e:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
					BL_voidTxString	("Wrong Password");
     792:	8e e1       	ldi	r24, 0x1E	; 30
     794:	91 e0       	ldi	r25, 0x01	; 1
     796:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
					BL_voidTxChar('\r');
     79a:	8d e0       	ldi	r24, 0x0D	; 13
     79c:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
										
					//dont display this message on trial 3
					if(Local_u8TrailsCounter!=(HOME_MAX_NUMBER_OF_TRIALS-1))
     7a0:	12 30       	cpi	r17, 0x02	; 2
     7a2:	39 f0       	breq	.+14     	; 0x7b2 <HOME_voidCheckUserAndPass+0x37c>
					{
						BL_voidTxString	("Please Try Again");
     7a4:	8d e0       	ldi	r24, 0x0D	; 13
     7a6:	91 e0       	ldi	r25, 0x01	; 1
     7a8:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
						BL_voidTxChar('\r');
     7ac:	8d e0       	ldi	r24, 0x0D	; 13
     7ae:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
			u8 local_u8EnteredRemoteUserName[HOME_USER_NAME_AND_PASS_MAX_LENGTh],local_u8EnteredRemoteUserPass[HOME_USER_NAME_AND_PASS_MAX_LENGTh];
			u8 local_u8StoredRemoteUserName[HOME_USER_NAME_AND_PASS_MAX_LENGTh],local_u8StoredRemoteUserPass[HOME_USER_NAME_AND_PASS_MAX_LENGTh];
			u8 Local_u8RemoteUserNameLocation;
			
			//every user have max of 3 trials for user name and pass
			for(Local_u8TrailsCounter=0;Local_u8TrailsCounter<HOME_MAX_NUMBER_OF_TRIALS;Local_u8TrailsCounter++)
     7b2:	1f 5f       	subi	r17, 0xFF	; 255
     7b4:	03 c0       	rjmp	.+6      	; 0x7bc <HOME_voidCheckUserAndPass+0x386>
     7b6:	d1 2c       	mov	r13, r1
     7b8:	a1 2c       	mov	r10, r1
     7ba:	10 e0       	ldi	r17, 0x00	; 0
     7bc:	13 30       	cpi	r17, 0x03	; 3
     7be:	08 f4       	brcc	.+2      	; 0x7c2 <HOME_voidCheckUserAndPass+0x38c>
     7c0:	42 cf       	rjmp	.-380    	; 0x646 <HOME_voidCheckUserAndPass+0x210>
					}
				}
				
			}
			//check the alarm after the 3rd trial
			if((HOME_MAX_NUMBER_OF_TRIALS==Local_u8FireAnAlarm)&&(LocaL_u8RightEntery==0))
     7c2:	83 e0       	ldi	r24, 0x03	; 3
     7c4:	a8 12       	cpse	r10, r24
     7c6:	05 c0       	rjmp	.+10     	; 0x7d2 <HOME_voidCheckUserAndPass+0x39c>
     7c8:	d1 10       	cpse	r13, r1
     7ca:	03 c0       	rjmp	.+6      	; 0x7d2 <HOME_voidCheckUserAndPass+0x39c>
			{
				*copy_pu8UserStatus=HOME_LOGIN_FAILED;
     7cc:	85 e0       	ldi	r24, 0x05	; 5
     7ce:	f4 01       	movw	r30, r8
     7d0:	80 83       	st	Z, r24
	}
	else
	{
		//error massage
	}
}
     7d2:	a0 96       	adiw	r28, 0x20	; 32
     7d4:	0f b6       	in	r0, 0x3f	; 63
     7d6:	f8 94       	cli
     7d8:	de bf       	out	0x3e, r29	; 62
     7da:	0f be       	out	0x3f, r0	; 63
     7dc:	cd bf       	out	0x3d, r28	; 61
     7de:	df 91       	pop	r29
     7e0:	cf 91       	pop	r28
     7e2:	1f 91       	pop	r17
     7e4:	0f 91       	pop	r16
     7e6:	ff 90       	pop	r15
     7e8:	ef 90       	pop	r14
     7ea:	df 90       	pop	r13
     7ec:	cf 90       	pop	r12
     7ee:	bf 90       	pop	r11
     7f0:	af 90       	pop	r10
     7f2:	9f 90       	pop	r9
     7f4:	8f 90       	pop	r8
     7f6:	08 95       	ret

000007f8 <GetUserType>:
	

}
void GetUserType()
{
	BL_voidTxString("Press # to login");
     7f8:	82 e5       	ldi	r24, 0x52	; 82
     7fa:	91 e0       	ldi	r25, 0x01	; 1
     7fc:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
	BL_voidTxChar('\r');
     800:	8d e0       	ldi	r24, 0x0D	; 13
     802:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
	LCD_voidClear();
     806:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <LCD_voidClear>
	LCD_voidDisplayString("Press # to login");
     80a:	82 e5       	ldi	r24, 0x52	; 82
     80c:	91 e0       	ldi	r25, 0x01	; 1
     80e:	0e 94 51 14 	call	0x28a2	; 0x28a2 <LCD_voidDisplayString>
	while (Local_copyKPDValue ==KPD_Not_Pressed && bluetooh_value != '#')
     812:	08 c0       	rjmp	.+16     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
	{
		KPD_voidGetValue(&Local_copyKPDValue);
     814:	84 e6       	ldi	r24, 0x64	; 100
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	0e 94 9f 12 	call	0x253e	; 0x253e <KPD_voidGetValue>
		BL_voidRxCharWithTimeout(&bluetooh_value);
     81c:	87 ec       	ldi	r24, 0xC7	; 199
     81e:	94 e0       	ldi	r25, 0x04	; 4
     820:	0e 94 ad 11 	call	0x235a	; 0x235a <BL_voidRxCharWithTimeout>
{
	BL_voidTxString("Press # to login");
	BL_voidTxChar('\r');
	LCD_voidClear();
	LCD_voidDisplayString("Press # to login");
	while (Local_copyKPDValue ==KPD_Not_Pressed && bluetooh_value != '#')
     824:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <Local_copyKPDValue>
     828:	8f 3f       	cpi	r24, 0xFF	; 255
     82a:	21 f4       	brne	.+8      	; 0x834 <__DATA_REGION_LENGTH__+0x34>
     82c:	90 91 c7 04 	lds	r25, 0x04C7	; 0x8004c7 <bluetooh_value>
     830:	93 32       	cpi	r25, 0x23	; 35
     832:	81 f7       	brne	.-32     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
	{
		KPD_voidGetValue(&Local_copyKPDValue);
		BL_voidRxCharWithTimeout(&bluetooh_value);
	}
	if (Local_copyKPDValue =='#')
     834:	83 32       	cpi	r24, 0x23	; 35
     836:	51 f4       	brne	.+20     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
	{
		BL_voidTxString("Local User");
     838:	83 e6       	ldi	r24, 0x63	; 99
     83a:	91 e0       	ldi	r25, 0x01	; 1
     83c:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
		HOME_voidCheckUserAndPass(HOME_LOCAL_ACCESS,&usertype);
     840:	65 e6       	ldi	r22, 0x65	; 101
     842:	70 e0       	ldi	r23, 0x00	; 0
     844:	81 e0       	ldi	r24, 0x01	; 1
     846:	0e 94 1b 02 	call	0x436	; 0x436 <HOME_voidCheckUserAndPass>
     84a:	08 95       	ret
	
	}
	else if (bluetooh_value == '#')
     84c:	80 91 c7 04 	lds	r24, 0x04C7	; 0x8004c7 <bluetooh_value>
     850:	83 32       	cpi	r24, 0x23	; 35
     852:	59 f4       	brne	.+22     	; 0x86a <__stack+0xb>
	{
		LCD_voidClear();
     854:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <LCD_voidClear>
		LCD_voidDisplayString("Remote User");
     858:	8e e6       	ldi	r24, 0x6E	; 110
     85a:	91 e0       	ldi	r25, 0x01	; 1
     85c:	0e 94 51 14 	call	0x28a2	; 0x28a2 <LCD_voidDisplayString>
		HOME_voidCheckUserAndPass(HOME_REMOTE_ACCESS,&usertype);
     860:	65 e6       	ldi	r22, 0x65	; 101
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	82 e0       	ldi	r24, 0x02	; 2
     866:	0e 94 1b 02 	call	0x436	; 0x436 <HOME_voidCheckUserAndPass>
     86a:	08 95       	ret

0000086c <HOME_voidChangeUserNameAndPass>:
		//error massage
	}
}

void HOME_voidChangeUserNameAndPass(void)
{
     86c:	ef 92       	push	r14
     86e:	ff 92       	push	r15
     870:	0f 93       	push	r16
     872:	1f 93       	push	r17
     874:	cf 93       	push	r28
     876:	df 93       	push	r29
     878:	cd b7       	in	r28, 0x3d	; 61
     87a:	de b7       	in	r29, 0x3e	; 62
     87c:	e0 97       	sbiw	r28, 0x30	; 48
     87e:	0f b6       	in	r0, 0x3f	; 63
     880:	f8 94       	cli
     882:	de bf       	out	0x3e, r29	; 62
     884:	0f be       	out	0x3f, r0	; 63
     886:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8NameByteCheckCounter,Local_u8PagesCounter,Local_u8NameByteCheck,Local_u8PassByteCheck,Local_u8PassByteCheckCounter,
	Local_u8UserNameLocation,LocaL_u8RightEntery=0,Local_u8WrongUserPassCounter=0,Local_u8WrongUserNameCounter=0,Local_u8ReplaceCounter;
	
	
	//dis request for use name and pass
	BL_voidTxString	("Please Enter User Name & Password u want to change");
     888:	8a e7       	ldi	r24, 0x7A	; 122
     88a:	91 e0       	ldi	r25, 0x01	; 1
     88c:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
	BL_voidTxString("\r");
     890:	8d ea       	ldi	r24, 0xAD	; 173
     892:	91 e0       	ldi	r25, 0x01	; 1
     894:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
	
	//get user name and pass from BL
	HOME_voidRemoteGetUserAndPass(&local_u8OldUserName,&local_u8OldUserPass);
     898:	be 01       	movw	r22, r28
     89a:	67 5f       	subi	r22, 0xF7	; 247
     89c:	7f 4f       	sbci	r23, 0xFF	; 255
     89e:	ce 01       	movw	r24, r28
     8a0:	01 96       	adiw	r24, 0x01	; 1
     8a2:	0e 94 a5 01 	call	0x34a	; 0x34a <HOME_voidRemoteGetUserAndPass>
	
	//loop on every user except admin
	for(Local_u8PagesCounter=0;Local_u8PagesCounter<((HOME_MAX_NUM_OF_LOCAL_USER*2)+1);Local_u8PagesCounter++)
     8a6:	10 e0       	ldi	r17, 0x00	; 0
     8a8:	51 c0       	rjmp	.+162    	; 0x94c <HOME_voidChangeUserNameAndPass+0xe0>
	{
		Local_u8NameByteCheck=0;
		Local_u8PassByteCheck=0;
		
		//skip admin page
		if(Local_u8PagesCounter==HOME_MAX_NUM_OF_LOCAL_USER)
     8aa:	15 30       	cpi	r17, 0x05	; 5
     8ac:	09 f4       	brne	.+2      	; 0x8b0 <HOME_voidChangeUserNameAndPass+0x44>
     8ae:	4d c0       	rjmp	.+154    	; 0x94a <HOME_voidChangeUserNameAndPass+0xde>
		{
			continue;
		}
		
		//get user name and pass from EEPROM
		Local_u8UserNameLocation=(2*Local_u8PagesCounter)*HOME_USER_NAME_AND_PASS_MAX_LENGTh;
     8b0:	01 2f       	mov	r16, r17
     8b2:	02 95       	swap	r16
     8b4:	00 7f       	andi	r16, 0xF0	; 240
		EEPROM_voidSequentialRead(Local_u8UserNameLocation,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8SavedUserName);
     8b6:	e0 2e       	mov	r14, r16
     8b8:	f1 2c       	mov	r15, r1
     8ba:	ae 01       	movw	r20, r28
     8bc:	4f 5d       	subi	r20, 0xDF	; 223
     8be:	5f 4f       	sbci	r21, 0xFF	; 255
     8c0:	68 e0       	ldi	r22, 0x08	; 8
     8c2:	70 e0       	ldi	r23, 0x00	; 0
     8c4:	c7 01       	movw	r24, r14
     8c6:	0e 94 2b 12 	call	0x2456	; 0x2456 <EEPROM_voidSequentialRead>
		EEPROM_voidSequentialRead((Local_u8UserNameLocation+HOME_USER_NAME_AND_PASS_MAX_LENGTh),HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8SavedUserPass);
     8ca:	ae 01       	movw	r20, r28
     8cc:	47 5d       	subi	r20, 0xD7	; 215
     8ce:	5f 4f       	sbci	r21, 0xFF	; 255
     8d0:	68 e0       	ldi	r22, 0x08	; 8
     8d2:	70 e0       	ldi	r23, 0x00	; 0
     8d4:	c7 01       	movw	r24, r14
     8d6:	08 96       	adiw	r24, 0x08	; 8
     8d8:	0e 94 2b 12 	call	0x2456	; 0x2456 <EEPROM_voidSequentialRead>
	HOME_voidRemoteGetUserAndPass(&local_u8OldUserName,&local_u8OldUserPass);
	
	//loop on every user except admin
	for(Local_u8PagesCounter=0;Local_u8PagesCounter<((HOME_MAX_NUM_OF_LOCAL_USER*2)+1);Local_u8PagesCounter++)
	{
		Local_u8NameByteCheck=0;
     8dc:	40 e0       	ldi	r20, 0x00	; 0
		Local_u8UserNameLocation=(2*Local_u8PagesCounter)*HOME_USER_NAME_AND_PASS_MAX_LENGTh;
		EEPROM_voidSequentialRead(Local_u8UserNameLocation,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8SavedUserName);
		EEPROM_voidSequentialRead((Local_u8UserNameLocation+HOME_USER_NAME_AND_PASS_MAX_LENGTh),HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8SavedUserPass);
		
		//loop on every byte of user name
		for(Local_u8NameByteCheckCounter=0;Local_u8NameByteCheckCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8NameByteCheckCounter++)
     8de:	20 e0       	ldi	r18, 0x00	; 0
     8e0:	14 c0       	rjmp	.+40     	; 0x90a <HOME_voidChangeUserNameAndPass+0x9e>
		{
			
			//check the byte stored with the entered	
			if(local_u8OldUserName[Local_u8NameByteCheckCounter]==local_u8SavedUserName[Local_u8NameByteCheckCounter])
     8e2:	82 2f       	mov	r24, r18
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	e1 e0       	ldi	r30, 0x01	; 1
     8e8:	f0 e0       	ldi	r31, 0x00	; 0
     8ea:	ec 0f       	add	r30, r28
     8ec:	fd 1f       	adc	r31, r29
     8ee:	e8 0f       	add	r30, r24
     8f0:	f9 1f       	adc	r31, r25
     8f2:	30 81       	ld	r19, Z
     8f4:	e1 e2       	ldi	r30, 0x21	; 33
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	ec 0f       	add	r30, r28
     8fa:	fd 1f       	adc	r31, r29
     8fc:	e8 0f       	add	r30, r24
     8fe:	f9 1f       	adc	r31, r25
     900:	80 81       	ld	r24, Z
     902:	38 13       	cpse	r19, r24
     904:	01 c0       	rjmp	.+2      	; 0x908 <HOME_voidChangeUserNameAndPass+0x9c>
			{
				
				Local_u8NameByteCheck++;
     906:	4f 5f       	subi	r20, 0xFF	; 255
		Local_u8UserNameLocation=(2*Local_u8PagesCounter)*HOME_USER_NAME_AND_PASS_MAX_LENGTh;
		EEPROM_voidSequentialRead(Local_u8UserNameLocation,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8SavedUserName);
		EEPROM_voidSequentialRead((Local_u8UserNameLocation+HOME_USER_NAME_AND_PASS_MAX_LENGTh),HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8SavedUserPass);
		
		//loop on every byte of user name
		for(Local_u8NameByteCheckCounter=0;Local_u8NameByteCheckCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8NameByteCheckCounter++)
     908:	2f 5f       	subi	r18, 0xFF	; 255
     90a:	28 30       	cpi	r18, 0x08	; 8
     90c:	50 f3       	brcs	.-44     	; 0x8e2 <HOME_voidChangeUserNameAndPass+0x76>
				
			}
			
		}
	
		if(Local_u8NameByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
     90e:	48 30       	cpi	r20, 0x08	; 8
     910:	e1 f4       	brne	.+56     	; 0x94a <HOME_voidChangeUserNameAndPass+0xde>
     912:	15 c0       	rjmp	.+42     	; 0x93e <HOME_voidChangeUserNameAndPass+0xd2>
		{
			//loop on every byte of password
			for(Local_u8PassByteCheckCounter=0;Local_u8PassByteCheckCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8PassByteCheckCounter++)
			{
				//check the byte stored with the entered
				if(local_u8OldUserPass[Local_u8PassByteCheckCounter]==local_u8SavedUserPass[Local_u8PassByteCheckCounter])
     914:	82 2f       	mov	r24, r18
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	e9 e0       	ldi	r30, 0x09	; 9
     91a:	f0 e0       	ldi	r31, 0x00	; 0
     91c:	ec 0f       	add	r30, r28
     91e:	fd 1f       	adc	r31, r29
     920:	e8 0f       	add	r30, r24
     922:	f9 1f       	adc	r31, r25
     924:	30 81       	ld	r19, Z
     926:	e9 e2       	ldi	r30, 0x29	; 41
     928:	f0 e0       	ldi	r31, 0x00	; 0
     92a:	ec 0f       	add	r30, r28
     92c:	fd 1f       	adc	r31, r29
     92e:	e8 0f       	add	r30, r24
     930:	f9 1f       	adc	r31, r25
     932:	80 81       	ld	r24, Z
     934:	38 13       	cpse	r19, r24
     936:	01 c0       	rjmp	.+2      	; 0x93a <HOME_voidChangeUserNameAndPass+0xce>
				{
					Local_u8PassByteCheck++;
     938:	4f 5f       	subi	r20, 0xFF	; 255
		}
	
		if(Local_u8NameByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
		{
			//loop on every byte of password
			for(Local_u8PassByteCheckCounter=0;Local_u8PassByteCheckCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8PassByteCheckCounter++)
     93a:	2f 5f       	subi	r18, 0xFF	; 255
     93c:	02 c0       	rjmp	.+4      	; 0x942 <HOME_voidChangeUserNameAndPass+0xd6>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	40 e0       	ldi	r20, 0x00	; 0
     942:	28 30       	cpi	r18, 0x08	; 8
     944:	38 f3       	brcs	.-50     	; 0x914 <HOME_voidChangeUserNameAndPass+0xa8>
				}
						
			}
			
			//check the entry is right or wrong
			if(Local_u8PassByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
     946:	48 30       	cpi	r20, 0x08	; 8
     948:	31 f0       	breq	.+12     	; 0x956 <HOME_voidChangeUserNameAndPass+0xea>
	
	//get user name and pass from BL
	HOME_voidRemoteGetUserAndPass(&local_u8OldUserName,&local_u8OldUserPass);
	
	//loop on every user except admin
	for(Local_u8PagesCounter=0;Local_u8PagesCounter<((HOME_MAX_NUM_OF_LOCAL_USER*2)+1);Local_u8PagesCounter++)
     94a:	1f 5f       	subi	r17, 0xFF	; 255
     94c:	1b 30       	cpi	r17, 0x0B	; 11
     94e:	08 f4       	brcc	.+2      	; 0x952 <HOME_voidChangeUserNameAndPass+0xe6>
     950:	ac cf       	rjmp	.-168    	; 0x8aa <HOME_voidChangeUserNameAndPass+0x3e>
{
	u8 local_u8OldUserName[HOME_USER_NAME_AND_PASS_MAX_LENGTh],local_u8OldUserPass[HOME_USER_NAME_AND_PASS_MAX_LENGTh];
	u8 local_u8TempUserName[HOME_USER_NAME_AND_PASS_MAX_LENGTh],local_u8TempUserPass[HOME_USER_NAME_AND_PASS_MAX_LENGTh];
	u8 local_u8SavedUserName[HOME_USER_NAME_AND_PASS_MAX_LENGTh],local_u8SavedUserPass[HOME_USER_NAME_AND_PASS_MAX_LENGTh];
	u8 Local_u8NameByteCheckCounter,Local_u8PagesCounter,Local_u8NameByteCheck,Local_u8PassByteCheck,Local_u8PassByteCheckCounter,
	Local_u8UserNameLocation,LocaL_u8RightEntery=0,Local_u8WrongUserPassCounter=0,Local_u8WrongUserNameCounter=0,Local_u8ReplaceCounter;
     952:	80 e0       	ldi	r24, 0x00	; 0
     954:	01 c0       	rjmp	.+2      	; 0x958 <HOME_voidChangeUserNameAndPass+0xec>
			//check the entry is right or wrong
			if(Local_u8PassByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
			{
				
			
				LocaL_u8RightEntery=1;
     956:	81 e0       	ldi	r24, 0x01	; 1
		}
			
	}
	
	//case of wright entry
	if(LocaL_u8RightEntery==1)
     958:	81 30       	cpi	r24, 0x01	; 1
     95a:	21 f5       	brne	.+72     	; 0x9a4 <HOME_voidChangeUserNameAndPass+0x138>
	{
		
		BL_voidTxString	("Please Enter The new User And Pass");
     95c:	8f ea       	ldi	r24, 0xAF	; 175
     95e:	91 e0       	ldi	r25, 0x01	; 1
     960:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
		BL_voidTxChar('\r');
     964:	8d e0       	ldi	r24, 0x0D	; 13
     966:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
		//get New user name and pass from BL
		HOME_voidRemoteGetUserAndPass(&local_u8TempUserName,&local_u8TempUserPass);
     96a:	be 01       	movw	r22, r28
     96c:	67 5e       	subi	r22, 0xE7	; 231
     96e:	7f 4f       	sbci	r23, 0xFF	; 255
     970:	ce 01       	movw	r24, r28
     972:	41 96       	adiw	r24, 0x11	; 17
     974:	0e 94 a5 01 	call	0x34a	; 0x34a <HOME_voidRemoteGetUserAndPass>
		//write the new user name & pass in EEPROM
		EEPROM_voidWritePage(Local_u8UserNameLocation,&local_u8TempUserName);
     978:	10 e0       	ldi	r17, 0x00	; 0
     97a:	be 01       	movw	r22, r28
     97c:	6f 5e       	subi	r22, 0xEF	; 239
     97e:	7f 4f       	sbci	r23, 0xFF	; 255
     980:	c8 01       	movw	r24, r16
     982:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <EEPROM_voidWritePage>
		EEPROM_voidWritePage((Local_u8UserNameLocation+HOME_USER_NAME_AND_PASS_MAX_LENGTh),&local_u8TempUserPass);
     986:	be 01       	movw	r22, r28
     988:	67 5e       	subi	r22, 0xE7	; 231
     98a:	7f 4f       	sbci	r23, 0xFF	; 255
     98c:	c8 01       	movw	r24, r16
     98e:	08 96       	adiw	r24, 0x08	; 8
     990:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <EEPROM_voidWritePage>
		BL_voidTxString	("User Data Changed Successfully");
     994:	82 ed       	ldi	r24, 0xD2	; 210
     996:	91 e0       	ldi	r25, 0x01	; 1
     998:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
		BL_voidTxChar('\r');
     99c:	8d e0       	ldi	r24, 0x0D	; 13
     99e:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
     9a2:	07 c0       	rjmp	.+14     	; 0x9b2 <HOME_voidChangeUserNameAndPass+0x146>
	}
	//is the entery was wrong 
	else 
	{

		BL_voidTxString	("Wrong User Name or password");
     9a4:	81 ef       	ldi	r24, 0xF1	; 241
     9a6:	91 e0       	ldi	r25, 0x01	; 1
     9a8:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
		BL_voidTxChar('\r');
     9ac:	8d e0       	ldi	r24, 0x0D	; 13
     9ae:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>

	}

	
	
}
     9b2:	e0 96       	adiw	r28, 0x30	; 48
     9b4:	0f b6       	in	r0, 0x3f	; 63
     9b6:	f8 94       	cli
     9b8:	de bf       	out	0x3e, r29	; 62
     9ba:	0f be       	out	0x3f, r0	; 63
     9bc:	cd bf       	out	0x3d, r28	; 61
     9be:	df 91       	pop	r29
     9c0:	cf 91       	pop	r28
     9c2:	1f 91       	pop	r17
     9c4:	0f 91       	pop	r16
     9c6:	ff 90       	pop	r15
     9c8:	ef 90       	pop	r14
     9ca:	08 95       	ret

000009cc <HOME_voidFireAnALarm>:


void HOME_voidFireAnALarm(u8 copy_pu8UserStatus)
{
     9cc:	cf 93       	push	r28
     9ce:	df 93       	push	r29
     9d0:	1f 92       	push	r1
     9d2:	cd b7       	in	r28, 0x3d	; 61
     9d4:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8CheckAlarm,Local_u8ResetValue;
	
	// fire alarm if the user entry failed
	if(copy_pu8UserStatus==HOME_LOGIN_FAILED)
     9d6:	85 30       	cpi	r24, 0x05	; 5
     9d8:	29 f4       	brne	.+10     	; 0x9e4 <HOME_voidFireAnALarm+0x18>
	{
		EEPROM_voidWriteByte(HOME_ALARM_LOCATION,HOME_ALARM_VALUE);
     9da:	60 ef       	ldi	r22, 0xF0	; 240
     9dc:	84 eb       	ldi	r24, 0xB4	; 180
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	0e 94 ba 11 	call	0x2374	; 0x2374 <EEPROM_voidWriteByte>
	}
	
	//check alarm status
	EEPROM_voidReadByte(HOME_ALARM_LOCATION,&Local_u8CheckAlarm);
     9e4:	be 01       	movw	r22, r28
     9e6:	6f 5f       	subi	r22, 0xFF	; 255
     9e8:	7f 4f       	sbci	r23, 0xFF	; 255
     9ea:	84 eb       	ldi	r24, 0xB4	; 180
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	0e 94 03 12 	call	0x2406	; 0x2406 <EEPROM_voidReadByte>
			
		}
		//clear alarm byte
		EEPROM_voidWriteByte(HOME_ALARM_LOCATION,HOME_ALARM_CLEAR_VALUE);
	}
}
     9f2:	0f 90       	pop	r0
     9f4:	df 91       	pop	r29
     9f6:	cf 91       	pop	r28
     9f8:	08 95       	ret

000009fa <KPD_Interface_RemoteAdmin>:
void KPD_Interface_RemoteAdmin(void)
{
	// This function is for admin usertype for accessing the smart home remotely showing all options available for the admin//

	//setting the TRM0 ctc interrupt function
	TMR0_SetCallBackCTC(&Idle_RemoteAction);
     9fa:	88 ed       	ldi	r24, 0xD8	; 216
     9fc:	9d e0       	ldi	r25, 0x0D	; 13
     9fe:	0e 94 77 18 	call	0x30ee	; 0x30ee <TMR0_SetCallBackCTC>
	BL_voidTxChar('\r');
     a02:	8d e0       	ldi	r24, 0x0D	; 13
     a04:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
	BL_voidTxString("1-AC 2-light");
     a08:	8d e0       	ldi	r24, 0x0D	; 13
     a0a:	92 e0       	ldi	r25, 0x02	; 2
     a0c:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
	BL_voidTxChar('\r');
     a10:	8d e0       	ldi	r24, 0x0D	; 13
     a12:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
	BL_voidTxString("3-temp 4-Door");
     a16:	8a e1       	ldi	r24, 0x1A	; 26
     a18:	92 e0       	ldi	r25, 0x02	; 2
     a1a:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
	BL_voidTxChar('\r');
     a1e:	8d e0       	ldi	r24, 0x0D	; 13
     a20:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
	BL_voidTxString("5- change username and password");
     a24:	88 e2       	ldi	r24, 0x28	; 40
     a26:	92 e0       	ldi	r25, 0x02	; 2
     a28:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
	BL_voidTxChar('\r');
     a2c:	8d e0       	ldi	r24, 0x0D	; 13
     a2e:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
	BL_voidTxString("6- To Sign Out");
     a32:	88 e4       	ldi	r24, 0x48	; 72
     a34:	92 e0       	ldi	r25, 0x02	; 2
     a36:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
	BL_voidTxChar('\r');
     a3a:	8d e0       	ldi	r24, 0x0D	; 13
     a3c:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
	TMR0_voidStart();
     a40:	0e 94 5f 18 	call	0x30be	; 0x30be <TMR0_voidStart>
	//reciving user selection from BL
	BL_voidRxChar(&bluetooh_value);
     a44:	87 ec       	ldi	r24, 0xC7	; 199
     a46:	94 e0       	ldi	r25, 0x04	; 4
     a48:	0e 94 aa 11 	call	0x2354	; 0x2354 <BL_voidRxChar>
	TMR0_voidStop();
     a4c:	0e 94 6d 18 	call	0x30da	; 0x30da <TMR0_voidStop>
	switch (bluetooh_value)
     a50:	80 91 c7 04 	lds	r24, 0x04C7	; 0x8004c7 <bluetooh_value>
     a54:	83 33       	cpi	r24, 0x33	; 51
     a56:	09 f4       	brne	.+2      	; 0xa5a <KPD_Interface_RemoteAdmin+0x60>
     a58:	cb c3       	rjmp	.+1942   	; 0x11f0 <KPD_Interface_RemoteAdmin+0x7f6>
     a5a:	30 f4       	brcc	.+12     	; 0xa68 <KPD_Interface_RemoteAdmin+0x6e>
     a5c:	81 33       	cpi	r24, 0x31	; 49
     a5e:	69 f0       	breq	.+26     	; 0xa7a <KPD_Interface_RemoteAdmin+0x80>
     a60:	82 33       	cpi	r24, 0x32	; 50
     a62:	09 f4       	brne	.+2      	; 0xa66 <KPD_Interface_RemoteAdmin+0x6c>
     a64:	b4 c0       	rjmp	.+360    	; 0xbce <KPD_Interface_RemoteAdmin+0x1d4>
     a66:	08 95       	ret
     a68:	85 33       	cpi	r24, 0x35	; 53
     a6a:	09 f4       	brne	.+2      	; 0xa6e <KPD_Interface_RemoteAdmin+0x74>
     a6c:	3f c4       	rjmp	.+2174   	; 0x12ec <KPD_Interface_RemoteAdmin+0x8f2>
     a6e:	08 f4       	brcc	.+2      	; 0xa72 <KPD_Interface_RemoteAdmin+0x78>
     a70:	eb c3       	rjmp	.+2006   	; 0x1248 <KPD_Interface_RemoteAdmin+0x84e>
     a72:	86 33       	cpi	r24, 0x36	; 54
     a74:	09 f4       	brne	.+2      	; 0xa78 <KPD_Interface_RemoteAdmin+0x7e>
     a76:	3d c4       	rjmp	.+2170   	; 0x12f2 <KPD_Interface_RemoteAdmin+0x8f8>
     a78:	08 95       	ret
	{
	case ('1'):
		DIO_voidGetPinValue(DIO_PORTC,DIO_PIN2,&ac_status);
     a7a:	49 eb       	ldi	r20, 0xB9	; 185
     a7c:	54 e0       	ldi	r21, 0x04	; 4
     a7e:	62 e0       	ldi	r22, 0x02	; 2
     a80:	82 e0       	ldi	r24, 0x02	; 2
     a82:	0e 94 18 17 	call	0x2e30	; 0x2e30 <DIO_voidGetPinValue>
		if (ac_status==0)
     a86:	80 91 b9 04 	lds	r24, 0x04B9	; 0x8004b9 <ac_status>
     a8a:	81 11       	cpse	r24, r1
     a8c:	49 c0       	rjmp	.+146    	; 0xb20 <KPD_Interface_RemoteAdmin+0x126>
		{
			BL_voidTxString("AC is Off");
     a8e:	87 e5       	ldi	r24, 0x57	; 87
     a90:	92 e0       	ldi	r25, 0x02	; 2
     a92:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
			BL_voidTxChar('\r');
     a96:	8d e0       	ldi	r24, 0x0D	; 13
     a98:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
		//getting temp from ADC
        ADC_voidGetDigitalValue(ADC_CHANNEL_0, &local_temp); 
     a9c:	66 eb       	ldi	r22, 0xB6	; 182
     a9e:	74 e0       	ldi	r23, 0x04	; 4
     aa0:	80 e0       	ldi	r24, 0x00	; 0
     aa2:	0e 94 fd 15 	call	0x2bfa	; 0x2bfa <ADC_voidGetDigitalValue>
		//sprintf is used to format and store a string in a buffer
		sprintf(tempString, "Room Temp: %d c", local_temp);
     aa6:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <__data_end>
     aaa:	1f 92       	push	r1
     aac:	8f 93       	push	r24
     aae:	81 e6       	ldi	r24, 0x61	; 97
     ab0:	92 e0       	ldi	r25, 0x02	; 2
     ab2:	9f 93       	push	r25
     ab4:	8f 93       	push	r24
     ab6:	8c ed       	ldi	r24, 0xDC	; 220
     ab8:	94 e0       	ldi	r25, 0x04	; 4
     aba:	9f 93       	push	r25
     abc:	8f 93       	push	r24
     abe:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <sprintf>
		BL_voidTxString(tempString);
     ac2:	8c ed       	ldi	r24, 0xDC	; 220
     ac4:	94 e0       	ldi	r25, 0x04	; 4
     ac6:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
		BL_voidTxChar('\r');
     aca:	8d e0       	ldi	r24, 0x0D	; 13
     acc:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
		BL_voidTxString("1- To Turn It On");
     ad0:	81 e7       	ldi	r24, 0x71	; 113
     ad2:	92 e0       	ldi	r25, 0x02	; 2
     ad4:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
		BL_voidTxChar('\r');
     ad8:	8d e0       	ldi	r24, 0x0D	; 13
     ada:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
		BL_voidTxString("0-go to home");
     ade:	82 e8       	ldi	r24, 0x82	; 130
     ae0:	92 e0       	ldi	r25, 0x02	; 2
     ae2:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
		BL_voidTxChar('\r');
     ae6:	8d e0       	ldi	r24, 0x0D	; 13
     ae8:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
		TMR0_voidStart();
     aec:	0e 94 5f 18 	call	0x30be	; 0x30be <TMR0_voidStart>
		BL_voidRxChar(&bluetooh_value);
     af0:	87 ec       	ldi	r24, 0xC7	; 199
     af2:	94 e0       	ldi	r25, 0x04	; 4
     af4:	0e 94 aa 11 	call	0x2354	; 0x2354 <BL_voidRxChar>
		TMR0_voidStop();
     af8:	0e 94 6d 18 	call	0x30da	; 0x30da <TMR0_voidStop>
		if (bluetooh_value=='0')
     afc:	80 91 c7 04 	lds	r24, 0x04C7	; 0x8004c7 <bluetooh_value>
     b00:	0f 90       	pop	r0
     b02:	0f 90       	pop	r0
     b04:	0f 90       	pop	r0
     b06:	0f 90       	pop	r0
     b08:	0f 90       	pop	r0
     b0a:	0f 90       	pop	r0
     b0c:	80 33       	cpi	r24, 0x30	; 48
     b0e:	09 f4       	brne	.+2      	; 0xb12 <KPD_Interface_RemoteAdmin+0x118>
     b10:	f3 c3       	rjmp	.+2022   	; 0x12f8 <KPD_Interface_RemoteAdmin+0x8fe>
			{
				break;
			}
		if (bluetooh_value=='1')
     b12:	81 33       	cpi	r24, 0x31	; 49
     b14:	29 f4       	brne	.+10     	; 0xb20 <KPD_Interface_RemoteAdmin+0x126>
			{
				DIO_voidSetPinValue(DIO_PORTC,DIO_PIN2,DIO_PIN_HIGH);
     b16:	41 e0       	ldi	r20, 0x01	; 1
     b18:	62 e0       	ldi	r22, 0x02	; 2
     b1a:	82 e0       	ldi	r24, 0x02	; 2
     b1c:	0e 94 98 16 	call	0x2d30	; 0x2d30 <DIO_voidSetPinValue>


			

		}
				if (ac_status==1)
     b20:	80 91 b9 04 	lds	r24, 0x04B9	; 0x8004b9 <ac_status>
     b24:	81 30       	cpi	r24, 0x01	; 1
     b26:	09 f0       	breq	.+2      	; 0xb2a <KPD_Interface_RemoteAdmin+0x130>
     b28:	e7 c3       	rjmp	.+1998   	; 0x12f8 <KPD_Interface_RemoteAdmin+0x8fe>
		{
			BL_voidTxString("AC is On");
     b2a:	8f e8       	ldi	r24, 0x8F	; 143
     b2c:	92 e0       	ldi	r25, 0x02	; 2
     b2e:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
			BL_voidTxChar('\r');
     b32:	8d e0       	ldi	r24, 0x0D	; 13
     b34:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
			BL_voidTxString("1- To Turn It Off");
     b38:	88 e9       	ldi	r24, 0x98	; 152
     b3a:	92 e0       	ldi	r25, 0x02	; 2
     b3c:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
			BL_voidTxChar('\r');
     b40:	8d e0       	ldi	r24, 0x0D	; 13
     b42:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
			ADC_voidGetDigitalValue(ADC_CHANNEL_0, &local_temp); 
     b46:	66 eb       	ldi	r22, 0xB6	; 182
     b48:	74 e0       	ldi	r23, 0x04	; 4
     b4a:	80 e0       	ldi	r24, 0x00	; 0
     b4c:	0e 94 fd 15 	call	0x2bfa	; 0x2bfa <ADC_voidGetDigitalValue>
			//sprintf is used to format and store a string in a buffer
			sprintf(tempString, "Room Temp: %d c", local_temp);
     b50:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <__data_end>
     b54:	1f 92       	push	r1
     b56:	8f 93       	push	r24
     b58:	81 e6       	ldi	r24, 0x61	; 97
     b5a:	92 e0       	ldi	r25, 0x02	; 2
     b5c:	9f 93       	push	r25
     b5e:	8f 93       	push	r24
     b60:	8c ed       	ldi	r24, 0xDC	; 220
     b62:	94 e0       	ldi	r25, 0x04	; 4
     b64:	9f 93       	push	r25
     b66:	8f 93       	push	r24
     b68:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <sprintf>
			BL_voidTxString(tempString);
     b6c:	8c ed       	ldi	r24, 0xDC	; 220
     b6e:	94 e0       	ldi	r25, 0x04	; 4
     b70:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
			BL_voidTxChar('\r');
     b74:	8d e0       	ldi	r24, 0x0D	; 13
     b76:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
			BL_voidTxString("1- To Turn It On");
     b7a:	81 e7       	ldi	r24, 0x71	; 113
     b7c:	92 e0       	ldi	r25, 0x02	; 2
     b7e:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
			BL_voidTxChar('\r');
     b82:	8d e0       	ldi	r24, 0x0D	; 13
     b84:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
			BL_voidTxString("0-go to home");
     b88:	82 e8       	ldi	r24, 0x82	; 130
     b8a:	92 e0       	ldi	r25, 0x02	; 2
     b8c:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
			BL_voidTxChar('\r');
     b90:	8d e0       	ldi	r24, 0x0D	; 13
     b92:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
			TMR0_voidStart();
     b96:	0e 94 5f 18 	call	0x30be	; 0x30be <TMR0_voidStart>
			BL_voidRxChar(&bluetooh_value);
     b9a:	87 ec       	ldi	r24, 0xC7	; 199
     b9c:	94 e0       	ldi	r25, 0x04	; 4
     b9e:	0e 94 aa 11 	call	0x2354	; 0x2354 <BL_voidRxChar>
			TMR0_voidStop();
     ba2:	0e 94 6d 18 	call	0x30da	; 0x30da <TMR0_voidStop>
			if (bluetooh_value=='0')
     ba6:	80 91 c7 04 	lds	r24, 0x04C7	; 0x8004c7 <bluetooh_value>
     baa:	0f 90       	pop	r0
     bac:	0f 90       	pop	r0
     bae:	0f 90       	pop	r0
     bb0:	0f 90       	pop	r0
     bb2:	0f 90       	pop	r0
     bb4:	0f 90       	pop	r0
     bb6:	80 33       	cpi	r24, 0x30	; 48
     bb8:	09 f4       	brne	.+2      	; 0xbbc <KPD_Interface_RemoteAdmin+0x1c2>
     bba:	9e c3       	rjmp	.+1852   	; 0x12f8 <KPD_Interface_RemoteAdmin+0x8fe>
				{
					break;
				}
			
			if (bluetooh_value=='1')
     bbc:	81 33       	cpi	r24, 0x31	; 49
     bbe:	09 f0       	breq	.+2      	; 0xbc2 <KPD_Interface_RemoteAdmin+0x1c8>
     bc0:	9b c3       	rjmp	.+1846   	; 0x12f8 <KPD_Interface_RemoteAdmin+0x8fe>
				{
					DIO_voidSetPinValue(DIO_PORTC,DIO_PIN2,DIO_PIN_LOW);
     bc2:	40 e0       	ldi	r20, 0x00	; 0
     bc4:	62 e0       	ldi	r22, 0x02	; 2
     bc6:	82 e0       	ldi	r24, 0x02	; 2
     bc8:	0e 94 98 16 	call	0x2d30	; 0x2d30 <DIO_voidSetPinValue>
     bcc:	08 95       	ret
		break;
	
	case ('2'):

       
	   		BL_voidTxChar('\r');     
     bce:	8d e0       	ldi	r24, 0x0D	; 13
     bd0:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
            BL_voidTxString("Choose light to");
     bd4:	8a ea       	ldi	r24, 0xAA	; 170
     bd6:	92 e0       	ldi	r25, 0x02	; 2
     bd8:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
            BL_voidTxChar('\r');
     bdc:	8d e0       	ldi	r24, 0x0D	; 13
     bde:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
            BL_voidTxString("control(1-6)");
     be2:	8a eb       	ldi	r24, 0xBA	; 186
     be4:	92 e0       	ldi	r25, 0x02	; 2
     be6:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
			BL_voidTxChar('\r');
     bea:	8d e0       	ldi	r24, 0x0D	; 13
     bec:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
			BL_voidTxChar('\r');
     bf0:	8d e0       	ldi	r24, 0x0D	; 13
     bf2:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
            TMR0_voidStart();
     bf6:	0e 94 5f 18 	call	0x30be	; 0x30be <TMR0_voidStart>
			BL_voidRxChar(&bluetooh_value);
     bfa:	87 ec       	ldi	r24, 0xC7	; 199
     bfc:	94 e0       	ldi	r25, 0x04	; 4
     bfe:	0e 94 aa 11 	call	0x2354	; 0x2354 <BL_voidRxChar>
            TMR0_voidStop();
     c02:	0e 94 6d 18 	call	0x30da	; 0x30da <TMR0_voidStop>
            switch (bluetooh_value)
     c06:	80 91 c7 04 	lds	r24, 0x04C7	; 0x8004c7 <bluetooh_value>
     c0a:	83 33       	cpi	r24, 0x33	; 51
     c0c:	09 f4       	brne	.+2      	; 0xc10 <KPD_Interface_RemoteAdmin+0x216>
     c0e:	a0 c0       	rjmp	.+320    	; 0xd50 <KPD_Interface_RemoteAdmin+0x356>
     c10:	30 f4       	brcc	.+12     	; 0xc1e <KPD_Interface_RemoteAdmin+0x224>
     c12:	81 33       	cpi	r24, 0x31	; 49
     c14:	69 f0       	breq	.+26     	; 0xc30 <KPD_Interface_RemoteAdmin+0x236>
     c16:	82 33       	cpi	r24, 0x32	; 50
     c18:	09 f4       	brne	.+2      	; 0xc1c <KPD_Interface_RemoteAdmin+0x222>
     c1a:	50 c0       	rjmp	.+160    	; 0xcbc <KPD_Interface_RemoteAdmin+0x2c2>
     c1c:	08 95       	ret
     c1e:	85 33       	cpi	r24, 0x35	; 53
     c20:	09 f4       	brne	.+2      	; 0xc24 <KPD_Interface_RemoteAdmin+0x22a>
     c22:	2a c1       	rjmp	.+596    	; 0xe78 <KPD_Interface_RemoteAdmin+0x47e>
     c24:	08 f4       	brcc	.+2      	; 0xc28 <KPD_Interface_RemoteAdmin+0x22e>
     c26:	de c0       	rjmp	.+444    	; 0xde4 <KPD_Interface_RemoteAdmin+0x3ea>
     c28:	86 33       	cpi	r24, 0x36	; 54
     c2a:	09 f4       	brne	.+2      	; 0xc2e <KPD_Interface_RemoteAdmin+0x234>
     c2c:	6f c1       	rjmp	.+734    	; 0xf0c <KPD_Interface_RemoteAdmin+0x512>
     c2e:	08 95       	ret
            {
            case ('1'):
			//DIO_voidGetPinValue is used to check if the led is on or off before changing its state

                DIO_voidGetPinValue(DIO_PORTD, DIO_PIN3, &led_status);
     c30:	48 eb       	ldi	r20, 0xB8	; 184
     c32:	54 e0       	ldi	r21, 0x04	; 4
     c34:	63 e0       	ldi	r22, 0x03	; 3
     c36:	83 e0       	ldi	r24, 0x03	; 3
     c38:	0e 94 18 17 	call	0x2e30	; 0x2e30 <DIO_voidGetPinValue>
                
                if (led_status == 1)
     c3c:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <led_status>
     c40:	81 30       	cpi	r24, 0x01	; 1
     c42:	e9 f4       	brne	.+58     	; 0xc7e <KPD_Interface_RemoteAdmin+0x284>
                {
                    BL_voidTxString("Light 1 is On");
     c44:	87 ec       	ldi	r24, 0xC7	; 199
     c46:	92 e0       	ldi	r25, 0x02	; 2
     c48:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
                    BL_voidTxChar('\r');
     c4c:	8d e0       	ldi	r24, 0x0D	; 13
     c4e:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It Off");
     c52:	85 ed       	ldi	r24, 0xD5	; 213
     c54:	92 e0       	ldi	r25, 0x02	; 2
     c56:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
					BL_voidTxChar('\r');
     c5a:	8d e0       	ldi	r24, 0x0D	; 13
     c5c:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
     c60:	87 ec       	ldi	r24, 0xC7	; 199
     c62:	94 e0       	ldi	r25, 0x04	; 4
     c64:	0e 94 aa 11 	call	0x2354	; 0x2354 <BL_voidRxChar>
                    if (bluetooh_value == '1')
     c68:	80 91 c7 04 	lds	r24, 0x04C7	; 0x8004c7 <bluetooh_value>
     c6c:	81 33       	cpi	r24, 0x31	; 49
     c6e:	09 f0       	breq	.+2      	; 0xc72 <KPD_Interface_RemoteAdmin+0x278>
     c70:	43 c3       	rjmp	.+1670   	; 0x12f8 <KPD_Interface_RemoteAdmin+0x8fe>
                    {
                        LED_voidOff(DIO_PORTD, DIO_PIN3, LED_FORWARD_CONNECTION);
     c72:	41 e0       	ldi	r20, 0x01	; 1
     c74:	63 e0       	ldi	r22, 0x03	; 3
     c76:	83 e0       	ldi	r24, 0x03	; 3
     c78:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <LED_voidOff>
     c7c:	08 95       	ret
                    }
                    
					break;
                }
                else if (led_status == 0)
     c7e:	81 11       	cpse	r24, r1
     c80:	3b c3       	rjmp	.+1654   	; 0x12f8 <KPD_Interface_RemoteAdmin+0x8fe>
                {
                    BL_voidTxString("Light 1 is OFF");
     c82:	86 ee       	ldi	r24, 0xE6	; 230
     c84:	92 e0       	ldi	r25, 0x02	; 2
     c86:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
                    BL_voidTxChar('\r');
     c8a:	8d e0       	ldi	r24, 0x0D	; 13
     c8c:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It On");
     c90:	85 ef       	ldi	r24, 0xF5	; 245
     c92:	92 e0       	ldi	r25, 0x02	; 2
     c94:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
					BL_voidTxChar('\r');
     c98:	8d e0       	ldi	r24, 0x0D	; 13
     c9a:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
     c9e:	87 ec       	ldi	r24, 0xC7	; 199
     ca0:	94 e0       	ldi	r25, 0x04	; 4
     ca2:	0e 94 aa 11 	call	0x2354	; 0x2354 <BL_voidRxChar>
                    if (bluetooh_value == '1')
     ca6:	80 91 c7 04 	lds	r24, 0x04C7	; 0x8004c7 <bluetooh_value>
     caa:	81 33       	cpi	r24, 0x31	; 49
     cac:	09 f0       	breq	.+2      	; 0xcb0 <KPD_Interface_RemoteAdmin+0x2b6>
     cae:	24 c3       	rjmp	.+1608   	; 0x12f8 <KPD_Interface_RemoteAdmin+0x8fe>
                    {
                        LED_voidOn(DIO_PORTD, DIO_PIN3, LED_FORWARD_CONNECTION);
     cb0:	41 e0       	ldi	r20, 0x01	; 1
     cb2:	63 e0       	ldi	r22, 0x03	; 3
     cb4:	83 e0       	ldi	r24, 0x03	; 3
     cb6:	0e 94 6f 15 	call	0x2ade	; 0x2ade <LED_voidOn>
     cba:	08 95       	ret
                }
                break;

            case ('2'):

                DIO_voidGetPinValue(DIO_PORTB, DIO_PIN0, &led_status);
     cbc:	48 eb       	ldi	r20, 0xB8	; 184
     cbe:	54 e0       	ldi	r21, 0x04	; 4
     cc0:	60 e0       	ldi	r22, 0x00	; 0
     cc2:	81 e0       	ldi	r24, 0x01	; 1
     cc4:	0e 94 18 17 	call	0x2e30	; 0x2e30 <DIO_voidGetPinValue>
                
                if (led_status == 1)
     cc8:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <led_status>
     ccc:	81 30       	cpi	r24, 0x01	; 1
     cce:	f9 f4       	brne	.+62     	; 0xd0e <KPD_Interface_RemoteAdmin+0x314>
                {
                    BL_voidTxString("Light 2 is On");
     cd0:	85 e0       	ldi	r24, 0x05	; 5
     cd2:	93 e0       	ldi	r25, 0x03	; 3
     cd4:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
                    BL_voidTxChar('\r');
     cd8:	8d e0       	ldi	r24, 0x0D	; 13
     cda:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It Off");
     cde:	85 ed       	ldi	r24, 0xD5	; 213
     ce0:	92 e0       	ldi	r25, 0x02	; 2
     ce2:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
					BL_voidTxChar('\r');
     ce6:	8d e0       	ldi	r24, 0x0D	; 13
     ce8:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
     cec:	87 ec       	ldi	r24, 0xC7	; 199
     cee:	94 e0       	ldi	r25, 0x04	; 4
     cf0:	0e 94 aa 11 	call	0x2354	; 0x2354 <BL_voidRxChar>
                    if (bluetooh_value == '1')
     cf4:	80 91 c7 04 	lds	r24, 0x04C7	; 0x8004c7 <bluetooh_value>
     cf8:	81 33       	cpi	r24, 0x31	; 49
     cfa:	29 f4       	brne	.+10     	; 0xd06 <KPD_Interface_RemoteAdmin+0x30c>
                    {
                        LED_voidOff(DIO_PORTB, DIO_PIN0, LED_FORWARD_CONNECTION);
     cfc:	41 e0       	ldi	r20, 0x01	; 1
     cfe:	60 e0       	ldi	r22, 0x00	; 0
     d00:	81 e0       	ldi	r24, 0x01	; 1
     d02:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <LED_voidOff>
                    }
                    bluetooh_value = KPD_Not_Pressed;
     d06:	8f ef       	ldi	r24, 0xFF	; 255
     d08:	80 93 c7 04 	sts	0x04C7, r24	; 0x8004c7 <bluetooh_value>
     d0c:	08 95       	ret
                }
                else if (led_status == 0)
     d0e:	81 11       	cpse	r24, r1
     d10:	f3 c2       	rjmp	.+1510   	; 0x12f8 <KPD_Interface_RemoteAdmin+0x8fe>
                {
                    BL_voidTxString("Light 2 is OFF");
     d12:	83 e1       	ldi	r24, 0x13	; 19
     d14:	93 e0       	ldi	r25, 0x03	; 3
     d16:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
                    BL_voidTxChar('\r');
     d1a:	8d e0       	ldi	r24, 0x0D	; 13
     d1c:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It On");
     d20:	85 ef       	ldi	r24, 0xF5	; 245
     d22:	92 e0       	ldi	r25, 0x02	; 2
     d24:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
					BL_voidTxChar('\r');
     d28:	8d e0       	ldi	r24, 0x0D	; 13
     d2a:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
     d2e:	87 ec       	ldi	r24, 0xC7	; 199
     d30:	94 e0       	ldi	r25, 0x04	; 4
     d32:	0e 94 aa 11 	call	0x2354	; 0x2354 <BL_voidRxChar>
                    if (bluetooh_value == '1')
     d36:	80 91 c7 04 	lds	r24, 0x04C7	; 0x8004c7 <bluetooh_value>
     d3a:	81 33       	cpi	r24, 0x31	; 49
     d3c:	29 f4       	brne	.+10     	; 0xd48 <KPD_Interface_RemoteAdmin+0x34e>
                    {
                        LED_voidOn(DIO_PORTB, DIO_PIN0, LED_FORWARD_CONNECTION);
     d3e:	41 e0       	ldi	r20, 0x01	; 1
     d40:	60 e0       	ldi	r22, 0x00	; 0
     d42:	81 e0       	ldi	r24, 0x01	; 1
     d44:	0e 94 6f 15 	call	0x2ade	; 0x2ade <LED_voidOn>
                    }
                    bluetooh_value = KPD_Not_Pressed;
     d48:	8f ef       	ldi	r24, 0xFF	; 255
     d4a:	80 93 c7 04 	sts	0x04C7, r24	; 0x8004c7 <bluetooh_value>
     d4e:	08 95       	ret
                }
                break;

            case ('3'):

                DIO_voidGetPinValue(DIO_PORTA, DIO_PIN2, &led_status);
     d50:	48 eb       	ldi	r20, 0xB8	; 184
     d52:	54 e0       	ldi	r21, 0x04	; 4
     d54:	62 e0       	ldi	r22, 0x02	; 2
     d56:	80 e0       	ldi	r24, 0x00	; 0
     d58:	0e 94 18 17 	call	0x2e30	; 0x2e30 <DIO_voidGetPinValue>
                
                if (led_status == 1)
     d5c:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <led_status>
     d60:	81 30       	cpi	r24, 0x01	; 1
     d62:	f9 f4       	brne	.+62     	; 0xda2 <KPD_Interface_RemoteAdmin+0x3a8>
                {
                    BL_voidTxString("Light 3 is On");
     d64:	82 e2       	ldi	r24, 0x22	; 34
     d66:	93 e0       	ldi	r25, 0x03	; 3
     d68:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
                    BL_voidTxChar('\r');
     d6c:	8d e0       	ldi	r24, 0x0D	; 13
     d6e:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It Off");
     d72:	85 ed       	ldi	r24, 0xD5	; 213
     d74:	92 e0       	ldi	r25, 0x02	; 2
     d76:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
					BL_voidTxChar('\r');
     d7a:	8d e0       	ldi	r24, 0x0D	; 13
     d7c:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
     d80:	87 ec       	ldi	r24, 0xC7	; 199
     d82:	94 e0       	ldi	r25, 0x04	; 4
     d84:	0e 94 aa 11 	call	0x2354	; 0x2354 <BL_voidRxChar>

                    if (bluetooh_value == '1')
     d88:	80 91 c7 04 	lds	r24, 0x04C7	; 0x8004c7 <bluetooh_value>
     d8c:	81 33       	cpi	r24, 0x31	; 49
     d8e:	29 f4       	brne	.+10     	; 0xd9a <KPD_Interface_RemoteAdmin+0x3a0>
                    {
                        LED_voidOff(DIO_PORTA, DIO_PIN2, LED_FORWARD_CONNECTION);
     d90:	41 e0       	ldi	r20, 0x01	; 1
     d92:	62 e0       	ldi	r22, 0x02	; 2
     d94:	80 e0       	ldi	r24, 0x00	; 0
     d96:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <LED_voidOff>
                    }
                    bluetooh_value = KPD_Not_Pressed;
     d9a:	8f ef       	ldi	r24, 0xFF	; 255
     d9c:	80 93 c7 04 	sts	0x04C7, r24	; 0x8004c7 <bluetooh_value>
     da0:	08 95       	ret
                }
                else if (led_status == 0)
     da2:	81 11       	cpse	r24, r1
     da4:	a9 c2       	rjmp	.+1362   	; 0x12f8 <KPD_Interface_RemoteAdmin+0x8fe>
                {
                    BL_voidTxString("Light 3 is OFF");
     da6:	80 e3       	ldi	r24, 0x30	; 48
     da8:	93 e0       	ldi	r25, 0x03	; 3
     daa:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
                    BL_voidTxChar('\r');
     dae:	8d e0       	ldi	r24, 0x0D	; 13
     db0:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It On");
     db4:	85 ef       	ldi	r24, 0xF5	; 245
     db6:	92 e0       	ldi	r25, 0x02	; 2
     db8:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
					BL_voidTxChar('\r');
     dbc:	8d e0       	ldi	r24, 0x0D	; 13
     dbe:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
     dc2:	87 ec       	ldi	r24, 0xC7	; 199
     dc4:	94 e0       	ldi	r25, 0x04	; 4
     dc6:	0e 94 aa 11 	call	0x2354	; 0x2354 <BL_voidRxChar>

                    if (bluetooh_value == '1')
     dca:	80 91 c7 04 	lds	r24, 0x04C7	; 0x8004c7 <bluetooh_value>
     dce:	81 33       	cpi	r24, 0x31	; 49
     dd0:	29 f4       	brne	.+10     	; 0xddc <KPD_Interface_RemoteAdmin+0x3e2>
                    {
                        LED_voidOn(DIO_PORTA, DIO_PIN2, LED_FORWARD_CONNECTION);
     dd2:	41 e0       	ldi	r20, 0x01	; 1
     dd4:	62 e0       	ldi	r22, 0x02	; 2
     dd6:	80 e0       	ldi	r24, 0x00	; 0
     dd8:	0e 94 6f 15 	call	0x2ade	; 0x2ade <LED_voidOn>
                    }
                    bluetooh_value = KPD_Not_Pressed;
     ddc:	8f ef       	ldi	r24, 0xFF	; 255
     dde:	80 93 c7 04 	sts	0x04C7, r24	; 0x8004c7 <bluetooh_value>
     de2:	08 95       	ret
                }
                break;

            case ('4'):

                DIO_voidGetPinValue(DIO_PORTA, DIO_PIN3, &led_status);
     de4:	48 eb       	ldi	r20, 0xB8	; 184
     de6:	54 e0       	ldi	r21, 0x04	; 4
     de8:	63 e0       	ldi	r22, 0x03	; 3
     dea:	80 e0       	ldi	r24, 0x00	; 0
     dec:	0e 94 18 17 	call	0x2e30	; 0x2e30 <DIO_voidGetPinValue>
                
                if (led_status == 1)
     df0:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <led_status>
     df4:	81 30       	cpi	r24, 0x01	; 1
     df6:	f9 f4       	brne	.+62     	; 0xe36 <KPD_Interface_RemoteAdmin+0x43c>
                {
                    BL_voidTxString("Light 4 is On");
     df8:	8f e3       	ldi	r24, 0x3F	; 63
     dfa:	93 e0       	ldi	r25, 0x03	; 3
     dfc:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
                    BL_voidTxChar('\r');
     e00:	8d e0       	ldi	r24, 0x0D	; 13
     e02:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It Off");
     e06:	85 ed       	ldi	r24, 0xD5	; 213
     e08:	92 e0       	ldi	r25, 0x02	; 2
     e0a:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
					BL_voidTxChar('\r');
     e0e:	8d e0       	ldi	r24, 0x0D	; 13
     e10:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
     e14:	87 ec       	ldi	r24, 0xC7	; 199
     e16:	94 e0       	ldi	r25, 0x04	; 4
     e18:	0e 94 aa 11 	call	0x2354	; 0x2354 <BL_voidRxChar>

                    if (bluetooh_value == '1')
     e1c:	80 91 c7 04 	lds	r24, 0x04C7	; 0x8004c7 <bluetooh_value>
     e20:	81 33       	cpi	r24, 0x31	; 49
     e22:	29 f4       	brne	.+10     	; 0xe2e <KPD_Interface_RemoteAdmin+0x434>
                    {
                        LED_voidOff(DIO_PORTA, DIO_PIN3, LED_FORWARD_CONNECTION);
     e24:	41 e0       	ldi	r20, 0x01	; 1
     e26:	63 e0       	ldi	r22, 0x03	; 3
     e28:	80 e0       	ldi	r24, 0x00	; 0
     e2a:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <LED_voidOff>
                    }
                    bluetooh_value = KPD_Not_Pressed;
     e2e:	8f ef       	ldi	r24, 0xFF	; 255
     e30:	80 93 c7 04 	sts	0x04C7, r24	; 0x8004c7 <bluetooh_value>
     e34:	08 95       	ret
                }
                else if (led_status == 0)
     e36:	81 11       	cpse	r24, r1
     e38:	5f c2       	rjmp	.+1214   	; 0x12f8 <KPD_Interface_RemoteAdmin+0x8fe>
                {
                    BL_voidTxString("Light 4 is OFF");
     e3a:	8d e4       	ldi	r24, 0x4D	; 77
     e3c:	93 e0       	ldi	r25, 0x03	; 3
     e3e:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
                    BL_voidTxChar('\r');
     e42:	8d e0       	ldi	r24, 0x0D	; 13
     e44:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It On");
     e48:	85 ef       	ldi	r24, 0xF5	; 245
     e4a:	92 e0       	ldi	r25, 0x02	; 2
     e4c:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
					BL_voidTxChar('\r');
     e50:	8d e0       	ldi	r24, 0x0D	; 13
     e52:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
     e56:	87 ec       	ldi	r24, 0xC7	; 199
     e58:	94 e0       	ldi	r25, 0x04	; 4
     e5a:	0e 94 aa 11 	call	0x2354	; 0x2354 <BL_voidRxChar>

                    if (bluetooh_value == '1')
     e5e:	80 91 c7 04 	lds	r24, 0x04C7	; 0x8004c7 <bluetooh_value>
     e62:	81 33       	cpi	r24, 0x31	; 49
     e64:	29 f4       	brne	.+10     	; 0xe70 <KPD_Interface_RemoteAdmin+0x476>
                    {
                        LED_voidOn(DIO_PORTA, DIO_PIN3, LED_FORWARD_CONNECTION);
     e66:	41 e0       	ldi	r20, 0x01	; 1
     e68:	63 e0       	ldi	r22, 0x03	; 3
     e6a:	80 e0       	ldi	r24, 0x00	; 0
     e6c:	0e 94 6f 15 	call	0x2ade	; 0x2ade <LED_voidOn>
                    }
                    bluetooh_value = KPD_Not_Pressed;
     e70:	8f ef       	ldi	r24, 0xFF	; 255
     e72:	80 93 c7 04 	sts	0x04C7, r24	; 0x8004c7 <bluetooh_value>
     e76:	08 95       	ret
                }
                break;

            case ('5'):

                DIO_voidGetPinValue(DIO_PORTD, DIO_PIN2, &led_status);
     e78:	48 eb       	ldi	r20, 0xB8	; 184
     e7a:	54 e0       	ldi	r21, 0x04	; 4
     e7c:	62 e0       	ldi	r22, 0x02	; 2
     e7e:	83 e0       	ldi	r24, 0x03	; 3
     e80:	0e 94 18 17 	call	0x2e30	; 0x2e30 <DIO_voidGetPinValue>
                
                if (led_status == 1)
     e84:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <led_status>
     e88:	81 30       	cpi	r24, 0x01	; 1
     e8a:	f9 f4       	brne	.+62     	; 0xeca <KPD_Interface_RemoteAdmin+0x4d0>
                {
                    BL_voidTxString("Light 5 is On");
     e8c:	8c e5       	ldi	r24, 0x5C	; 92
     e8e:	93 e0       	ldi	r25, 0x03	; 3
     e90:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
                    BL_voidTxChar('\r');
     e94:	8d e0       	ldi	r24, 0x0D	; 13
     e96:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It Off");
     e9a:	85 ed       	ldi	r24, 0xD5	; 213
     e9c:	92 e0       	ldi	r25, 0x02	; 2
     e9e:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
					BL_voidTxChar('\r');
     ea2:	8d e0       	ldi	r24, 0x0D	; 13
     ea4:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
     ea8:	87 ec       	ldi	r24, 0xC7	; 199
     eaa:	94 e0       	ldi	r25, 0x04	; 4
     eac:	0e 94 aa 11 	call	0x2354	; 0x2354 <BL_voidRxChar>

                    if (bluetooh_value == '1')
     eb0:	80 91 c7 04 	lds	r24, 0x04C7	; 0x8004c7 <bluetooh_value>
     eb4:	81 33       	cpi	r24, 0x31	; 49
     eb6:	29 f4       	brne	.+10     	; 0xec2 <KPD_Interface_RemoteAdmin+0x4c8>
                    {
                        LED_voidOff(DIO_PORTD, DIO_PIN2, LED_FORWARD_CONNECTION);
     eb8:	41 e0       	ldi	r20, 0x01	; 1
     eba:	62 e0       	ldi	r22, 0x02	; 2
     ebc:	83 e0       	ldi	r24, 0x03	; 3
     ebe:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <LED_voidOff>
                    }
                    bluetooh_value = KPD_Not_Pressed;
     ec2:	8f ef       	ldi	r24, 0xFF	; 255
     ec4:	80 93 c7 04 	sts	0x04C7, r24	; 0x8004c7 <bluetooh_value>
     ec8:	08 95       	ret
                }
                else if (led_status == 0)
     eca:	81 11       	cpse	r24, r1
     ecc:	15 c2       	rjmp	.+1066   	; 0x12f8 <KPD_Interface_RemoteAdmin+0x8fe>
                {
                    BL_voidTxString("Light 5 is OFF");
     ece:	8a e6       	ldi	r24, 0x6A	; 106
     ed0:	93 e0       	ldi	r25, 0x03	; 3
     ed2:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
                    BL_voidTxChar('\r');
     ed6:	8d e0       	ldi	r24, 0x0D	; 13
     ed8:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It On");
     edc:	85 ef       	ldi	r24, 0xF5	; 245
     ede:	92 e0       	ldi	r25, 0x02	; 2
     ee0:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
					BL_voidTxChar('\r');
     ee4:	8d e0       	ldi	r24, 0x0D	; 13
     ee6:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
     eea:	87 ec       	ldi	r24, 0xC7	; 199
     eec:	94 e0       	ldi	r25, 0x04	; 4
     eee:	0e 94 aa 11 	call	0x2354	; 0x2354 <BL_voidRxChar>

                    if (bluetooh_value == '1')
     ef2:	80 91 c7 04 	lds	r24, 0x04C7	; 0x8004c7 <bluetooh_value>
     ef6:	81 33       	cpi	r24, 0x31	; 49
     ef8:	29 f4       	brne	.+10     	; 0xf04 <KPD_Interface_RemoteAdmin+0x50a>
                    {
                        LED_voidOn(DIO_PORTD, DIO_PIN2, LED_FORWARD_CONNECTION);
     efa:	41 e0       	ldi	r20, 0x01	; 1
     efc:	62 e0       	ldi	r22, 0x02	; 2
     efe:	83 e0       	ldi	r24, 0x03	; 3
     f00:	0e 94 6f 15 	call	0x2ade	; 0x2ade <LED_voidOn>
                    }
                    bluetooh_value = KPD_Not_Pressed;
     f04:	8f ef       	ldi	r24, 0xFF	; 255
     f06:	80 93 c7 04 	sts	0x04C7, r24	; 0x8004c7 <bluetooh_value>
     f0a:	08 95       	ret
                
			// if the user choose light 6 (DIMMER LED)

            case ('6'):
				// Dimmer can be controlled using TMR1 PWM mode range from 0 to 100 with -+10% step
                if (dimmer_brightness > 0)
     f0c:	80 91 b7 04 	lds	r24, 0x04B7	; 0x8004b7 <dimmer_brightness>
     f10:	88 23       	and	r24, r24
     f12:	09 f4       	brne	.+2      	; 0xf16 <KPD_Interface_RemoteAdmin+0x51c>
     f14:	b1 c0       	rjmp	.+354    	; 0x1078 <KPD_Interface_RemoteAdmin+0x67e>
                {
					 BL_voidTxChar('\r');
     f16:	8d e0       	ldi	r24, 0x0D	; 13
     f18:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
                    BL_voidTxString("Light 6 is On");
     f1c:	89 e7       	ldi	r24, 0x79	; 121
     f1e:	93 e0       	ldi	r25, 0x03	; 3
     f20:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
					BL_voidTxChar('\r');
     f24:	8d e0       	ldi	r24, 0x0D	; 13
     f26:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
					sprintf(DimmerString, "Brightness: %d%", dimmer_brightness);
     f2a:	80 91 b7 04 	lds	r24, 0x04B7	; 0x8004b7 <dimmer_brightness>
     f2e:	1f 92       	push	r1
     f30:	8f 93       	push	r24
     f32:	87 e8       	ldi	r24, 0x87	; 135
     f34:	93 e0       	ldi	r25, 0x03	; 3
     f36:	9f 93       	push	r25
     f38:	8f 93       	push	r24
     f3a:	88 ec       	ldi	r24, 0xC8	; 200
     f3c:	94 e0       	ldi	r25, 0x04	; 4
     f3e:	9f 93       	push	r25
     f40:	8f 93       	push	r24
     f42:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <sprintf>
					BL_voidTxString(DimmerString);
     f46:	88 ec       	ldi	r24, 0xC8	; 200
     f48:	94 e0       	ldi	r25, 0x04	; 4
     f4a:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
                    BL_voidTxChar('\r');
     f4e:	8d e0       	ldi	r24, 0x0D	; 13
     f50:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
                    BL_voidTxString("1)+10 2)-10 0)H");
     f54:	87 e9       	ldi	r24, 0x97	; 151
     f56:	93 e0       	ldi	r25, 0x03	; 3
     f58:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
					BL_voidTxChar('\r');
     f5c:	8d e0       	ldi	r24, 0x0D	; 13
     f5e:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
     f62:	87 ec       	ldi	r24, 0xC7	; 199
     f64:	94 e0       	ldi	r25, 0x04	; 4
     f66:	0e 94 aa 11 	call	0x2354	; 0x2354 <BL_voidRxChar>
					while (bluetooh_value != 0)
     f6a:	80 91 c7 04 	lds	r24, 0x04C7	; 0x8004c7 <bluetooh_value>
     f6e:	0f 90       	pop	r0
     f70:	0f 90       	pop	r0
     f72:	0f 90       	pop	r0
     f74:	0f 90       	pop	r0
     f76:	0f 90       	pop	r0
     f78:	0f 90       	pop	r0
     f7a:	88 23       	and	r24, r24
     f7c:	09 f4       	brne	.+2      	; 0xf80 <KPD_Interface_RemoteAdmin+0x586>
     f7e:	bc c1       	rjmp	.+888    	; 0x12f8 <KPD_Interface_RemoteAdmin+0x8fe>
					{
						if (bluetooh_value == '1')
     f80:	81 33       	cpi	r24, 0x31	; 49
     f82:	09 f0       	breq	.+2      	; 0xf86 <KPD_Interface_RemoteAdmin+0x58c>
     f84:	43 c0       	rjmp	.+134    	; 0x100c <KPD_Interface_RemoteAdmin+0x612>
						{
							dimmer_brightness += 10;
     f86:	60 91 b7 04 	lds	r22, 0x04B7	; 0x8004b7 <dimmer_brightness>
     f8a:	66 5f       	subi	r22, 0xF6	; 246
     f8c:	60 93 b7 04 	sts	0x04B7, r22	; 0x8004b7 <dimmer_brightness>
							PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
     f90:	70 e0       	ldi	r23, 0x00	; 0
     f92:	80 e0       	ldi	r24, 0x00	; 0
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	0e 94 91 1b 	call	0x3722	; 0x3722 <__floatunsisf>
     f9a:	ab 01       	movw	r20, r22
     f9c:	bc 01       	movw	r22, r24
     f9e:	88 ee       	ldi	r24, 0xE8	; 232
     fa0:	93 e0       	ldi	r25, 0x03	; 3
     fa2:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <PWM_voidGenerateChannel_1A>
							sprintf(DimmerString, "Brightness: %d%", dimmer_brightness);
     fa6:	80 91 b7 04 	lds	r24, 0x04B7	; 0x8004b7 <dimmer_brightness>
     faa:	1f 92       	push	r1
     fac:	8f 93       	push	r24
     fae:	87 e8       	ldi	r24, 0x87	; 135
     fb0:	93 e0       	ldi	r25, 0x03	; 3
     fb2:	9f 93       	push	r25
     fb4:	8f 93       	push	r24
     fb6:	88 ec       	ldi	r24, 0xC8	; 200
     fb8:	94 e0       	ldi	r25, 0x04	; 4
     fba:	9f 93       	push	r25
     fbc:	8f 93       	push	r24
     fbe:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <sprintf>
							BL_voidTxString(DimmerString);
     fc2:	88 ec       	ldi	r24, 0xC8	; 200
     fc4:	94 e0       	ldi	r25, 0x04	; 4
     fc6:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
                    		BL_voidTxChar('\r');
     fca:	8d e0       	ldi	r24, 0x0D	; 13
     fcc:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
                    		BL_voidTxString("1)+10 2)-10 0)H");
     fd0:	87 e9       	ldi	r24, 0x97	; 151
     fd2:	93 e0       	ldi	r25, 0x03	; 3
     fd4:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
							BL_voidTxChar('\r');
     fd8:	8d e0       	ldi	r24, 0x0D	; 13
     fda:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
							// check if is the brightness is more than 100
							if (dimmer_brightness > 100)
     fde:	80 91 b7 04 	lds	r24, 0x04B7	; 0x8004b7 <dimmer_brightness>
     fe2:	0f 90       	pop	r0
     fe4:	0f 90       	pop	r0
     fe6:	0f 90       	pop	r0
     fe8:	0f 90       	pop	r0
     fea:	0f 90       	pop	r0
     fec:	0f 90       	pop	r0
     fee:	85 36       	cpi	r24, 0x65	; 101
     ff0:	08 f4       	brcc	.+2      	; 0xff4 <KPD_Interface_RemoteAdmin+0x5fa>
     ff2:	82 c1       	rjmp	.+772    	; 0x12f8 <KPD_Interface_RemoteAdmin+0x8fe>
							{
								//block increasing the brightness above 100
								dimmer_brightness = 100;
     ff4:	84 e6       	ldi	r24, 0x64	; 100
     ff6:	80 93 b7 04 	sts	0x04B7, r24	; 0x8004b7 <dimmer_brightness>
								PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
     ffa:	40 e0       	ldi	r20, 0x00	; 0
     ffc:	50 e0       	ldi	r21, 0x00	; 0
     ffe:	68 ec       	ldi	r22, 0xC8	; 200
    1000:	72 e4       	ldi	r23, 0x42	; 66
    1002:	88 ee       	ldi	r24, 0xE8	; 232
    1004:	93 e0       	ldi	r25, 0x03	; 3
    1006:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <PWM_voidGenerateChannel_1A>
    100a:	08 95       	ret
							}
							break;													
						}
						else if (bluetooh_value == '2')
    100c:	82 33       	cpi	r24, 0x32	; 50
    100e:	09 f0       	breq	.+2      	; 0x1012 <KPD_Interface_RemoteAdmin+0x618>
    1010:	73 c1       	rjmp	.+742    	; 0x12f8 <KPD_Interface_RemoteAdmin+0x8fe>
						{
							dimmer_brightness -= 10;
    1012:	60 91 b7 04 	lds	r22, 0x04B7	; 0x8004b7 <dimmer_brightness>
    1016:	6a 50       	subi	r22, 0x0A	; 10
    1018:	60 93 b7 04 	sts	0x04B7, r22	; 0x8004b7 <dimmer_brightness>
							PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
    101c:	70 e0       	ldi	r23, 0x00	; 0
    101e:	80 e0       	ldi	r24, 0x00	; 0
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	0e 94 91 1b 	call	0x3722	; 0x3722 <__floatunsisf>
    1026:	ab 01       	movw	r20, r22
    1028:	bc 01       	movw	r22, r24
    102a:	88 ee       	ldi	r24, 0xE8	; 232
    102c:	93 e0       	ldi	r25, 0x03	; 3
    102e:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <PWM_voidGenerateChannel_1A>
							sprintf(DimmerString, "Brightness: %d%", dimmer_brightness);
    1032:	80 91 b7 04 	lds	r24, 0x04B7	; 0x8004b7 <dimmer_brightness>
    1036:	1f 92       	push	r1
    1038:	8f 93       	push	r24
    103a:	87 e8       	ldi	r24, 0x87	; 135
    103c:	93 e0       	ldi	r25, 0x03	; 3
    103e:	9f 93       	push	r25
    1040:	8f 93       	push	r24
    1042:	88 ec       	ldi	r24, 0xC8	; 200
    1044:	94 e0       	ldi	r25, 0x04	; 4
    1046:	9f 93       	push	r25
    1048:	8f 93       	push	r24
    104a:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <sprintf>
							BL_voidTxString(DimmerString);
    104e:	88 ec       	ldi	r24, 0xC8	; 200
    1050:	94 e0       	ldi	r25, 0x04	; 4
    1052:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
                    		BL_voidTxChar('\r');
    1056:	8d e0       	ldi	r24, 0x0D	; 13
    1058:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
                    		BL_voidTxString("1)+10 2)-10 0)H");
    105c:	87 e9       	ldi	r24, 0x97	; 151
    105e:	93 e0       	ldi	r25, 0x03	; 3
    1060:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
							BL_voidTxChar('\r');
    1064:	8d e0       	ldi	r24, 0x0D	; 13
    1066:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
							{
								//block decreasing the brightness below 0
								dimmer_brightness = 0;
								PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
							}
							break;
    106a:	0f 90       	pop	r0
    106c:	0f 90       	pop	r0
    106e:	0f 90       	pop	r0
    1070:	0f 90       	pop	r0
    1072:	0f 90       	pop	r0
    1074:	0f 90       	pop	r0
    1076:	08 95       	ret
						break;					
	
					}
					
                }
                else if (dimmer_brightness == 0)
    1078:	81 11       	cpse	r24, r1
    107a:	3e c1       	rjmp	.+636    	; 0x12f8 <KPD_Interface_RemoteAdmin+0x8fe>
                {
                    BL_voidTxString("Light 6 is OFF");
    107c:	87 ea       	ldi	r24, 0xA7	; 167
    107e:	93 e0       	ldi	r25, 0x03	; 3
    1080:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
    1084:	2f ef       	ldi	r18, 0xFF	; 255
    1086:	83 ed       	ldi	r24, 0xD3	; 211
    1088:	90 e3       	ldi	r25, 0x30	; 48
    108a:	21 50       	subi	r18, 0x01	; 1
    108c:	80 40       	sbci	r24, 0x00	; 0
    108e:	90 40       	sbci	r25, 0x00	; 0
    1090:	e1 f7       	brne	.-8      	; 0x108a <KPD_Interface_RemoteAdmin+0x690>
    1092:	00 c0       	rjmp	.+0      	; 0x1094 <KPD_Interface_RemoteAdmin+0x69a>
    1094:	00 00       	nop
					_delay_ms(1000);
					BL_voidTxChar('\r');
    1096:	8d e0       	ldi	r24, 0x0D	; 13
    1098:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
					sprintf(DimmerString, "Brightness: %d%", dimmer_brightness);
    109c:	80 91 b7 04 	lds	r24, 0x04B7	; 0x8004b7 <dimmer_brightness>
    10a0:	1f 92       	push	r1
    10a2:	8f 93       	push	r24
    10a4:	87 e8       	ldi	r24, 0x87	; 135
    10a6:	93 e0       	ldi	r25, 0x03	; 3
    10a8:	9f 93       	push	r25
    10aa:	8f 93       	push	r24
    10ac:	88 ec       	ldi	r24, 0xC8	; 200
    10ae:	94 e0       	ldi	r25, 0x04	; 4
    10b0:	9f 93       	push	r25
    10b2:	8f 93       	push	r24
    10b4:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <sprintf>
					BL_voidTxString(DimmerString);
    10b8:	88 ec       	ldi	r24, 0xC8	; 200
    10ba:	94 e0       	ldi	r25, 0x04	; 4
    10bc:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
                    BL_voidTxChar('\r');
    10c0:	8d e0       	ldi	r24, 0x0D	; 13
    10c2:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
                    BL_voidTxString("1)+10 2)-10 0)H");
    10c6:	87 e9       	ldi	r24, 0x97	; 151
    10c8:	93 e0       	ldi	r25, 0x03	; 3
    10ca:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
					BL_voidTxChar('\r');
    10ce:	8d e0       	ldi	r24, 0x0D	; 13
    10d0:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
    10d4:	87 ec       	ldi	r24, 0xC7	; 199
    10d6:	94 e0       	ldi	r25, 0x04	; 4
    10d8:	0e 94 aa 11 	call	0x2354	; 0x2354 <BL_voidRxChar>
					while (bluetooh_value != 0)
    10dc:	0f 90       	pop	r0
    10de:	0f 90       	pop	r0
    10e0:	0f 90       	pop	r0
    10e2:	0f 90       	pop	r0
    10e4:	0f 90       	pop	r0
    10e6:	0f 90       	pop	r0
    10e8:	7e c0       	rjmp	.+252    	; 0x11e6 <KPD_Interface_RemoteAdmin+0x7ec>
					{
						if (bluetooh_value == '1')
    10ea:	81 33       	cpi	r24, 0x31	; 49
    10ec:	09 f0       	breq	.+2      	; 0x10f0 <KPD_Interface_RemoteAdmin+0x6f6>
    10ee:	43 c0       	rjmp	.+134    	; 0x1176 <KPD_Interface_RemoteAdmin+0x77c>
						{
							dimmer_brightness += 10;
    10f0:	60 91 b7 04 	lds	r22, 0x04B7	; 0x8004b7 <dimmer_brightness>
    10f4:	66 5f       	subi	r22, 0xF6	; 246
    10f6:	60 93 b7 04 	sts	0x04B7, r22	; 0x8004b7 <dimmer_brightness>
							PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
    10fa:	70 e0       	ldi	r23, 0x00	; 0
    10fc:	80 e0       	ldi	r24, 0x00	; 0
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	0e 94 91 1b 	call	0x3722	; 0x3722 <__floatunsisf>
    1104:	ab 01       	movw	r20, r22
    1106:	bc 01       	movw	r22, r24
    1108:	88 ee       	ldi	r24, 0xE8	; 232
    110a:	93 e0       	ldi	r25, 0x03	; 3
    110c:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <PWM_voidGenerateChannel_1A>
							sprintf(DimmerString, "Brightness: %d%", dimmer_brightness);
    1110:	80 91 b7 04 	lds	r24, 0x04B7	; 0x8004b7 <dimmer_brightness>
    1114:	1f 92       	push	r1
    1116:	8f 93       	push	r24
    1118:	87 e8       	ldi	r24, 0x87	; 135
    111a:	93 e0       	ldi	r25, 0x03	; 3
    111c:	9f 93       	push	r25
    111e:	8f 93       	push	r24
    1120:	88 ec       	ldi	r24, 0xC8	; 200
    1122:	94 e0       	ldi	r25, 0x04	; 4
    1124:	9f 93       	push	r25
    1126:	8f 93       	push	r24
    1128:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <sprintf>
							BL_voidTxString(DimmerString);
    112c:	88 ec       	ldi	r24, 0xC8	; 200
    112e:	94 e0       	ldi	r25, 0x04	; 4
    1130:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
                    		BL_voidTxChar('\r');
    1134:	8d e0       	ldi	r24, 0x0D	; 13
    1136:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
                    		BL_voidTxString("1)+10 2)-10 0)H");
    113a:	87 e9       	ldi	r24, 0x97	; 151
    113c:	93 e0       	ldi	r25, 0x03	; 3
    113e:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
							BL_voidTxChar('\r');
    1142:	8d e0       	ldi	r24, 0x0D	; 13
    1144:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
							if (dimmer_brightness > 100)
    1148:	80 91 b7 04 	lds	r24, 0x04B7	; 0x8004b7 <dimmer_brightness>
    114c:	0f 90       	pop	r0
    114e:	0f 90       	pop	r0
    1150:	0f 90       	pop	r0
    1152:	0f 90       	pop	r0
    1154:	0f 90       	pop	r0
    1156:	0f 90       	pop	r0
    1158:	85 36       	cpi	r24, 0x65	; 101
    115a:	08 f4       	brcc	.+2      	; 0x115e <KPD_Interface_RemoteAdmin+0x764>
    115c:	cd c0       	rjmp	.+410    	; 0x12f8 <KPD_Interface_RemoteAdmin+0x8fe>
							{
								dimmer_brightness = 100;
    115e:	84 e6       	ldi	r24, 0x64	; 100
    1160:	80 93 b7 04 	sts	0x04B7, r24	; 0x8004b7 <dimmer_brightness>
								PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
    1164:	40 e0       	ldi	r20, 0x00	; 0
    1166:	50 e0       	ldi	r21, 0x00	; 0
    1168:	68 ec       	ldi	r22, 0xC8	; 200
    116a:	72 e4       	ldi	r23, 0x42	; 66
    116c:	88 ee       	ldi	r24, 0xE8	; 232
    116e:	93 e0       	ldi	r25, 0x03	; 3
    1170:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <PWM_voidGenerateChannel_1A>
    1174:	08 95       	ret
							}
							break;
						
							
						}
						else if (bluetooh_value == '2')
    1176:	82 33       	cpi	r24, 0x32	; 50
    1178:	99 f5       	brne	.+102    	; 0x11e0 <KPD_Interface_RemoteAdmin+0x7e6>
						{
							dimmer_brightness -= 10;
    117a:	60 91 b7 04 	lds	r22, 0x04B7	; 0x8004b7 <dimmer_brightness>
    117e:	6a 50       	subi	r22, 0x0A	; 10
    1180:	60 93 b7 04 	sts	0x04B7, r22	; 0x8004b7 <dimmer_brightness>
							PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
    1184:	70 e0       	ldi	r23, 0x00	; 0
    1186:	80 e0       	ldi	r24, 0x00	; 0
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	0e 94 91 1b 	call	0x3722	; 0x3722 <__floatunsisf>
    118e:	ab 01       	movw	r20, r22
    1190:	bc 01       	movw	r22, r24
    1192:	88 ee       	ldi	r24, 0xE8	; 232
    1194:	93 e0       	ldi	r25, 0x03	; 3
    1196:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <PWM_voidGenerateChannel_1A>
							sprintf(DimmerString, "Brightness: %d%", dimmer_brightness);
    119a:	80 91 b7 04 	lds	r24, 0x04B7	; 0x8004b7 <dimmer_brightness>
    119e:	1f 92       	push	r1
    11a0:	8f 93       	push	r24
    11a2:	87 e8       	ldi	r24, 0x87	; 135
    11a4:	93 e0       	ldi	r25, 0x03	; 3
    11a6:	9f 93       	push	r25
    11a8:	8f 93       	push	r24
    11aa:	88 ec       	ldi	r24, 0xC8	; 200
    11ac:	94 e0       	ldi	r25, 0x04	; 4
    11ae:	9f 93       	push	r25
    11b0:	8f 93       	push	r24
    11b2:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <sprintf>
							BL_voidTxString(DimmerString);
    11b6:	88 ec       	ldi	r24, 0xC8	; 200
    11b8:	94 e0       	ldi	r25, 0x04	; 4
    11ba:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
                    		BL_voidTxChar('\r');
    11be:	8d e0       	ldi	r24, 0x0D	; 13
    11c0:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
                    		BL_voidTxString("1)+10 2)-10 0)H");
    11c4:	87 e9       	ldi	r24, 0x97	; 151
    11c6:	93 e0       	ldi	r25, 0x03	; 3
    11c8:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
							BL_voidTxChar('\r');
    11cc:	8d e0       	ldi	r24, 0x0D	; 13
    11ce:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
							if (dimmer_brightness < 0)
							{
								dimmer_brightness = 0;
								PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
							}
							break;
    11d2:	0f 90       	pop	r0
    11d4:	0f 90       	pop	r0
    11d6:	0f 90       	pop	r0
    11d8:	0f 90       	pop	r0
    11da:	0f 90       	pop	r0
    11dc:	0f 90       	pop	r0
    11de:	08 95       	ret
						}
						else if (bluetooh_value == '0')
    11e0:	80 33       	cpi	r24, 0x30	; 48
    11e2:	09 f4       	brne	.+2      	; 0x11e6 <KPD_Interface_RemoteAdmin+0x7ec>
    11e4:	89 c0       	rjmp	.+274    	; 0x12f8 <KPD_Interface_RemoteAdmin+0x8fe>
					BL_voidTxString(DimmerString);
                    BL_voidTxChar('\r');
                    BL_voidTxString("1)+10 2)-10 0)H");
					BL_voidTxChar('\r');
					BL_voidRxChar(&bluetooh_value);
					while (bluetooh_value != 0)
    11e6:	80 91 c7 04 	lds	r24, 0x04C7	; 0x8004c7 <bluetooh_value>
    11ea:	81 11       	cpse	r24, r1
    11ec:	7e cf       	rjmp	.-260    	; 0x10ea <KPD_Interface_RemoteAdmin+0x6f0>
    11ee:	08 95       	ret
			break;

			case ('3'):
			
				// checking the temperature from the ADC before displaying it
				ADC_voidGetDigitalValue(ADC_CHANNEL_0, &local_temp); 
    11f0:	66 eb       	ldi	r22, 0xB6	; 182
    11f2:	74 e0       	ldi	r23, 0x04	; 4
    11f4:	80 e0       	ldi	r24, 0x00	; 0
    11f6:	0e 94 fd 15 	call	0x2bfa	; 0x2bfa <ADC_voidGetDigitalValue>
				sprintf(tempString, "Room Temp: %d c", local_temp);
    11fa:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <__data_end>
    11fe:	1f 92       	push	r1
    1200:	8f 93       	push	r24
    1202:	81 e6       	ldi	r24, 0x61	; 97
    1204:	92 e0       	ldi	r25, 0x02	; 2
    1206:	9f 93       	push	r25
    1208:	8f 93       	push	r24
    120a:	8c ed       	ldi	r24, 0xDC	; 220
    120c:	94 e0       	ldi	r25, 0x04	; 4
    120e:	9f 93       	push	r25
    1210:	8f 93       	push	r24
    1212:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <sprintf>
				BL_voidTxString(tempString);
    1216:	8c ed       	ldi	r24, 0xDC	; 220
    1218:	94 e0       	ldi	r25, 0x04	; 4
    121a:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
				BL_voidTxChar('\r');
    121e:	8d e0       	ldi	r24, 0x0D	; 13
    1220:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
				BL_voidTxString("0-go to home");
    1224:	82 e8       	ldi	r24, 0x82	; 130
    1226:	92 e0       	ldi	r25, 0x02	; 2
    1228:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
				BL_voidTxChar('\r');
    122c:	8d e0       	ldi	r24, 0x0D	; 13
    122e:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
				BL_voidRxChar(&bluetooh_value);	
    1232:	87 ec       	ldi	r24, 0xC7	; 199
    1234:	94 e0       	ldi	r25, 0x04	; 4
    1236:	0e 94 aa 11 	call	0x2354	; 0x2354 <BL_voidRxChar>
				if (bluetooh_value=='0')
				{
					
				}
				break;
    123a:	0f 90       	pop	r0
    123c:	0f 90       	pop	r0
    123e:	0f 90       	pop	r0
    1240:	0f 90       	pop	r0
    1242:	0f 90       	pop	r0
    1244:	0f 90       	pop	r0
    1246:	08 95       	ret

			case ('4'):
				// checking the door status before displaying it
				if (door_angle==0)
    1248:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <door_angle>
    124c:	81 11       	cpse	r24, r1
    124e:	27 c0       	rjmp	.+78     	; 0x129e <KPD_Interface_RemoteAdmin+0x8a4>
				{
					BL_voidTxString("Door is closed");
    1250:	86 eb       	ldi	r24, 0xB6	; 182
    1252:	93 e0       	ldi	r25, 0x03	; 3
    1254:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
					BL_voidTxChar('\r');
    1258:	8d e0       	ldi	r24, 0x0D	; 13
    125a:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
					BL_voidTxString("1-Open Door 0-Home");
    125e:	85 ec       	ldi	r24, 0xC5	; 197
    1260:	93 e0       	ldi	r25, 0x03	; 3
    1262:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
					BL_voidTxChar('\r');
    1266:	8d e0       	ldi	r24, 0x0D	; 13
    1268:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
    126c:	87 ec       	ldi	r24, 0xC7	; 199
    126e:	94 e0       	ldi	r25, 0x04	; 4
    1270:	0e 94 aa 11 	call	0x2354	; 0x2354 <BL_voidRxChar>
					BL_voidTxChar('\r');
    1274:	8d e0       	ldi	r24, 0x0D	; 13
    1276:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
					if (bluetooh_value=='1')
    127a:	80 91 c7 04 	lds	r24, 0x04C7	; 0x8004c7 <bluetooh_value>
    127e:	81 33       	cpi	r24, 0x31	; 49
    1280:	d9 f5       	brne	.+118    	; 0x12f8 <KPD_Interface_RemoteAdmin+0x8fe>
					{
						BL_voidTxString("Door is opening");
    1282:	88 ed       	ldi	r24, 0xD8	; 216
    1284:	93 e0       	ldi	r25, 0x03	; 3
    1286:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
						SERVO_voidStartByAngle(90);
    128a:	60 e0       	ldi	r22, 0x00	; 0
    128c:	70 e0       	ldi	r23, 0x00	; 0
    128e:	84 eb       	ldi	r24, 0xB4	; 180
    1290:	92 e4       	ldi	r25, 0x42	; 66
    1292:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <SERVO_voidStartByAngle>
						door_angle=90;
    1296:	8a e5       	ldi	r24, 0x5A	; 90
    1298:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <door_angle>
    129c:	08 95       	ret
						break;
					}
					break;

				}
				else if (door_angle==90)
    129e:	8a 35       	cpi	r24, 0x5A	; 90
    12a0:	59 f5       	brne	.+86     	; 0x12f8 <KPD_Interface_RemoteAdmin+0x8fe>
				{
					BL_voidTxString("Door is open");
    12a2:	88 ee       	ldi	r24, 0xE8	; 232
    12a4:	93 e0       	ldi	r25, 0x03	; 3
    12a6:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
					BL_voidTxChar('\r');
    12aa:	8d e0       	ldi	r24, 0x0D	; 13
    12ac:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
					BL_voidTxString("1-Close Door 0-Home");
    12b0:	85 ef       	ldi	r24, 0xF5	; 245
    12b2:	93 e0       	ldi	r25, 0x03	; 3
    12b4:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
					BL_voidTxChar('\r');
    12b8:	8d e0       	ldi	r24, 0x0D	; 13
    12ba:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
    12be:	87 ec       	ldi	r24, 0xC7	; 199
    12c0:	94 e0       	ldi	r25, 0x04	; 4
    12c2:	0e 94 aa 11 	call	0x2354	; 0x2354 <BL_voidRxChar>
					BL_voidTxChar('\r');
    12c6:	8d e0       	ldi	r24, 0x0D	; 13
    12c8:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
					if (bluetooh_value=='1')
    12cc:	80 91 c7 04 	lds	r24, 0x04C7	; 0x8004c7 <bluetooh_value>
    12d0:	81 33       	cpi	r24, 0x31	; 49
    12d2:	91 f4       	brne	.+36     	; 0x12f8 <KPD_Interface_RemoteAdmin+0x8fe>
					{
						BL_voidTxString("Door is closing");
    12d4:	89 e0       	ldi	r24, 0x09	; 9
    12d6:	94 e0       	ldi	r25, 0x04	; 4
    12d8:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
						SERVO_voidStartByAngle(0);
    12dc:	60 e0       	ldi	r22, 0x00	; 0
    12de:	70 e0       	ldi	r23, 0x00	; 0
    12e0:	cb 01       	movw	r24, r22
    12e2:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <SERVO_voidStartByAngle>
						door_angle=0;
    12e6:	10 92 ba 04 	sts	0x04BA, r1	; 0x8004ba <door_angle>
    12ea:	08 95       	ret
			break;


			case ('5'):
			// this case is only for admin to change the username and password (Admin is only remote typeuser)
			HOME_voidChangeUserNameAndPass();
    12ec:	0e 94 36 04 	call	0x86c	; 0x86c <HOME_voidChangeUserNameAndPass>
					
        	break;
    12f0:	08 95       	ret

			case('6'):
			usertype =HOME_NO_LOGIN;
    12f2:	86 e0       	ldi	r24, 0x06	; 6
    12f4:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <usertype>
    12f8:	08 95       	ret

000012fa <KPD_Interface_RemoteUser>:


void KPD_Interface_RemoteUser(void)
{
	//this is the remote user interface to control the smart home (same as the admin but with less options without(door control,changing username and password))
	TMR0_SetCallBackCTC(&Idle_RemoteAction);
    12fa:	88 ed       	ldi	r24, 0xD8	; 216
    12fc:	9d e0       	ldi	r25, 0x0D	; 13
    12fe:	0e 94 77 18 	call	0x30ee	; 0x30ee <TMR0_SetCallBackCTC>
	BL_voidTxChar('\r');
    1302:	8d e0       	ldi	r24, 0x0D	; 13
    1304:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
	BL_voidTxString("1-AC 2-light");
    1308:	8d e0       	ldi	r24, 0x0D	; 13
    130a:	92 e0       	ldi	r25, 0x02	; 2
    130c:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
	BL_voidTxChar('\r');
    1310:	8d e0       	ldi	r24, 0x0D	; 13
    1312:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
	BL_voidTxString("3-temp");
    1316:	89 e1       	ldi	r24, 0x19	; 25
    1318:	94 e0       	ldi	r25, 0x04	; 4
    131a:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
	BL_voidTxChar('\r');
    131e:	8d e0       	ldi	r24, 0x0D	; 13
    1320:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
	BL_voidTxString("6- To Sign Out");
    1324:	88 e4       	ldi	r24, 0x48	; 72
    1326:	92 e0       	ldi	r25, 0x02	; 2
    1328:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
	BL_voidTxChar('\r');
    132c:	8d e0       	ldi	r24, 0x0D	; 13
    132e:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
	TMR0_voidStart();
    1332:	0e 94 5f 18 	call	0x30be	; 0x30be <TMR0_voidStart>
	BL_voidRxChar(&bluetooh_value);
    1336:	87 ec       	ldi	r24, 0xC7	; 199
    1338:	94 e0       	ldi	r25, 0x04	; 4
    133a:	0e 94 aa 11 	call	0x2354	; 0x2354 <BL_voidRxChar>
	TMR0_voidStop();
    133e:	0e 94 6d 18 	call	0x30da	; 0x30da <TMR0_voidStop>
	switch (bluetooh_value)
    1342:	80 91 c7 04 	lds	r24, 0x04C7	; 0x8004c7 <bluetooh_value>
    1346:	82 33       	cpi	r24, 0x32	; 50
    1348:	09 f4       	brne	.+2      	; 0x134c <KPD_Interface_RemoteUser+0x52>
    134a:	b5 c0       	rjmp	.+362    	; 0x14b6 <KPD_Interface_RemoteUser+0x1bc>
    134c:	18 f4       	brcc	.+6      	; 0x1354 <KPD_Interface_RemoteUser+0x5a>
    134e:	81 33       	cpi	r24, 0x31	; 49
    1350:	41 f0       	breq	.+16     	; 0x1362 <KPD_Interface_RemoteUser+0x68>
    1352:	08 95       	ret
    1354:	83 33       	cpi	r24, 0x33	; 51
    1356:	09 f4       	brne	.+2      	; 0x135a <KPD_Interface_RemoteUser+0x60>
    1358:	be c3       	rjmp	.+1916   	; 0x1ad6 <KPD_Interface_RemoteUser+0x7dc>
    135a:	86 33       	cpi	r24, 0x36	; 54
    135c:	09 f4       	brne	.+2      	; 0x1360 <KPD_Interface_RemoteUser+0x66>
    135e:	e6 c3       	rjmp	.+1996   	; 0x1b2c <KPD_Interface_RemoteUser+0x832>
    1360:	08 95       	ret
	{
	case ('1'):
				DIO_voidGetPinValue(DIO_PORTC,DIO_PIN2,&ac_status);
    1362:	49 eb       	ldi	r20, 0xB9	; 185
    1364:	54 e0       	ldi	r21, 0x04	; 4
    1366:	62 e0       	ldi	r22, 0x02	; 2
    1368:	82 e0       	ldi	r24, 0x02	; 2
    136a:	0e 94 18 17 	call	0x2e30	; 0x2e30 <DIO_voidGetPinValue>
		if (ac_status==0)
    136e:	80 91 b9 04 	lds	r24, 0x04B9	; 0x8004b9 <ac_status>
    1372:	81 11       	cpse	r24, r1
    1374:	49 c0       	rjmp	.+146    	; 0x1408 <KPD_Interface_RemoteUser+0x10e>
		{
			BL_voidTxString("AC is Off");
    1376:	87 e5       	ldi	r24, 0x57	; 87
    1378:	92 e0       	ldi	r25, 0x02	; 2
    137a:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
			BL_voidTxChar('\r');
    137e:	8d e0       	ldi	r24, 0x0D	; 13
    1380:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
		//getting temp from ADC
        ADC_voidGetDigitalValue(ADC_CHANNEL_0, &local_temp); 
    1384:	66 eb       	ldi	r22, 0xB6	; 182
    1386:	74 e0       	ldi	r23, 0x04	; 4
    1388:	80 e0       	ldi	r24, 0x00	; 0
    138a:	0e 94 fd 15 	call	0x2bfa	; 0x2bfa <ADC_voidGetDigitalValue>
		//sprintf is used to format and store a string in a buffer
		sprintf(tempString, "Room Temp: %d c", local_temp);
    138e:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <__data_end>
    1392:	1f 92       	push	r1
    1394:	8f 93       	push	r24
    1396:	81 e6       	ldi	r24, 0x61	; 97
    1398:	92 e0       	ldi	r25, 0x02	; 2
    139a:	9f 93       	push	r25
    139c:	8f 93       	push	r24
    139e:	8c ed       	ldi	r24, 0xDC	; 220
    13a0:	94 e0       	ldi	r25, 0x04	; 4
    13a2:	9f 93       	push	r25
    13a4:	8f 93       	push	r24
    13a6:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <sprintf>
		BL_voidTxString(tempString);
    13aa:	8c ed       	ldi	r24, 0xDC	; 220
    13ac:	94 e0       	ldi	r25, 0x04	; 4
    13ae:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
		BL_voidTxChar('\r');
    13b2:	8d e0       	ldi	r24, 0x0D	; 13
    13b4:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
		BL_voidTxString("1- To Turn It On");
    13b8:	81 e7       	ldi	r24, 0x71	; 113
    13ba:	92 e0       	ldi	r25, 0x02	; 2
    13bc:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
		BL_voidTxChar('\r');
    13c0:	8d e0       	ldi	r24, 0x0D	; 13
    13c2:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
		BL_voidTxString("0-go to home");
    13c6:	82 e8       	ldi	r24, 0x82	; 130
    13c8:	92 e0       	ldi	r25, 0x02	; 2
    13ca:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
		BL_voidTxChar('\r');
    13ce:	8d e0       	ldi	r24, 0x0D	; 13
    13d0:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
		TMR0_voidStart();
    13d4:	0e 94 5f 18 	call	0x30be	; 0x30be <TMR0_voidStart>
		BL_voidRxChar(&bluetooh_value);
    13d8:	87 ec       	ldi	r24, 0xC7	; 199
    13da:	94 e0       	ldi	r25, 0x04	; 4
    13dc:	0e 94 aa 11 	call	0x2354	; 0x2354 <BL_voidRxChar>
		TMR0_voidStop();
    13e0:	0e 94 6d 18 	call	0x30da	; 0x30da <TMR0_voidStop>
		if (bluetooh_value=='0')
    13e4:	80 91 c7 04 	lds	r24, 0x04C7	; 0x8004c7 <bluetooh_value>
    13e8:	0f 90       	pop	r0
    13ea:	0f 90       	pop	r0
    13ec:	0f 90       	pop	r0
    13ee:	0f 90       	pop	r0
    13f0:	0f 90       	pop	r0
    13f2:	0f 90       	pop	r0
    13f4:	80 33       	cpi	r24, 0x30	; 48
    13f6:	09 f4       	brne	.+2      	; 0x13fa <KPD_Interface_RemoteUser+0x100>
    13f8:	9c c3       	rjmp	.+1848   	; 0x1b32 <KPD_Interface_RemoteUser+0x838>
			{
				break;
			}
		if (bluetooh_value=='1')
    13fa:	81 33       	cpi	r24, 0x31	; 49
    13fc:	29 f4       	brne	.+10     	; 0x1408 <KPD_Interface_RemoteUser+0x10e>
			{
				DIO_voidSetPinValue(DIO_PORTC,DIO_PIN2,DIO_PIN_HIGH);
    13fe:	41 e0       	ldi	r20, 0x01	; 1
    1400:	62 e0       	ldi	r22, 0x02	; 2
    1402:	82 e0       	ldi	r24, 0x02	; 2
    1404:	0e 94 98 16 	call	0x2d30	; 0x2d30 <DIO_voidSetPinValue>


			

		}
				if (ac_status==1)
    1408:	80 91 b9 04 	lds	r24, 0x04B9	; 0x8004b9 <ac_status>
    140c:	81 30       	cpi	r24, 0x01	; 1
    140e:	09 f0       	breq	.+2      	; 0x1412 <KPD_Interface_RemoteUser+0x118>
    1410:	90 c3       	rjmp	.+1824   	; 0x1b32 <KPD_Interface_RemoteUser+0x838>
		{
			BL_voidTxString("AC is On");
    1412:	8f e8       	ldi	r24, 0x8F	; 143
    1414:	92 e0       	ldi	r25, 0x02	; 2
    1416:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
			BL_voidTxChar('\r');
    141a:	8d e0       	ldi	r24, 0x0D	; 13
    141c:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
			BL_voidTxString("1- To Turn It Off");
    1420:	88 e9       	ldi	r24, 0x98	; 152
    1422:	92 e0       	ldi	r25, 0x02	; 2
    1424:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
			BL_voidTxChar('\r');
    1428:	8d e0       	ldi	r24, 0x0D	; 13
    142a:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
			ADC_voidGetDigitalValue(ADC_CHANNEL_0, &local_temp); 
    142e:	66 eb       	ldi	r22, 0xB6	; 182
    1430:	74 e0       	ldi	r23, 0x04	; 4
    1432:	80 e0       	ldi	r24, 0x00	; 0
    1434:	0e 94 fd 15 	call	0x2bfa	; 0x2bfa <ADC_voidGetDigitalValue>
			//sprintf is used to format and store a string in a buffer
			sprintf(tempString, "Room Temp: %d c", local_temp);
    1438:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <__data_end>
    143c:	1f 92       	push	r1
    143e:	8f 93       	push	r24
    1440:	81 e6       	ldi	r24, 0x61	; 97
    1442:	92 e0       	ldi	r25, 0x02	; 2
    1444:	9f 93       	push	r25
    1446:	8f 93       	push	r24
    1448:	8c ed       	ldi	r24, 0xDC	; 220
    144a:	94 e0       	ldi	r25, 0x04	; 4
    144c:	9f 93       	push	r25
    144e:	8f 93       	push	r24
    1450:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <sprintf>
			BL_voidTxString(tempString);
    1454:	8c ed       	ldi	r24, 0xDC	; 220
    1456:	94 e0       	ldi	r25, 0x04	; 4
    1458:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
			BL_voidTxChar('\r');
    145c:	8d e0       	ldi	r24, 0x0D	; 13
    145e:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
			BL_voidTxString("1- To Turn It On");
    1462:	81 e7       	ldi	r24, 0x71	; 113
    1464:	92 e0       	ldi	r25, 0x02	; 2
    1466:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
			BL_voidTxChar('\r');
    146a:	8d e0       	ldi	r24, 0x0D	; 13
    146c:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
			BL_voidTxString("0-go to home");
    1470:	82 e8       	ldi	r24, 0x82	; 130
    1472:	92 e0       	ldi	r25, 0x02	; 2
    1474:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
			BL_voidTxChar('\r');
    1478:	8d e0       	ldi	r24, 0x0D	; 13
    147a:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
			TMR0_voidStart();
    147e:	0e 94 5f 18 	call	0x30be	; 0x30be <TMR0_voidStart>
			BL_voidRxChar(&bluetooh_value);
    1482:	87 ec       	ldi	r24, 0xC7	; 199
    1484:	94 e0       	ldi	r25, 0x04	; 4
    1486:	0e 94 aa 11 	call	0x2354	; 0x2354 <BL_voidRxChar>
			TMR0_voidStop();
    148a:	0e 94 6d 18 	call	0x30da	; 0x30da <TMR0_voidStop>
			if (bluetooh_value=='0')
    148e:	80 91 c7 04 	lds	r24, 0x04C7	; 0x8004c7 <bluetooh_value>
    1492:	0f 90       	pop	r0
    1494:	0f 90       	pop	r0
    1496:	0f 90       	pop	r0
    1498:	0f 90       	pop	r0
    149a:	0f 90       	pop	r0
    149c:	0f 90       	pop	r0
    149e:	80 33       	cpi	r24, 0x30	; 48
    14a0:	09 f4       	brne	.+2      	; 0x14a4 <KPD_Interface_RemoteUser+0x1aa>
    14a2:	47 c3       	rjmp	.+1678   	; 0x1b32 <KPD_Interface_RemoteUser+0x838>
				{
					break;
				}
			
			if (bluetooh_value=='1')
    14a4:	81 33       	cpi	r24, 0x31	; 49
    14a6:	09 f0       	breq	.+2      	; 0x14aa <KPD_Interface_RemoteUser+0x1b0>
    14a8:	44 c3       	rjmp	.+1672   	; 0x1b32 <KPD_Interface_RemoteUser+0x838>
				{
					DIO_voidSetPinValue(DIO_PORTC,DIO_PIN2,DIO_PIN_LOW);
    14aa:	40 e0       	ldi	r20, 0x00	; 0
    14ac:	62 e0       	ldi	r22, 0x02	; 2
    14ae:	82 e0       	ldi	r24, 0x02	; 2
    14b0:	0e 94 98 16 	call	0x2d30	; 0x2d30 <DIO_voidSetPinValue>
    14b4:	08 95       	ret
		break;
	
	case ('2'):

       
	   		BL_voidTxChar('\r');     
    14b6:	8d e0       	ldi	r24, 0x0D	; 13
    14b8:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
            BL_voidTxString("Choose light to");
    14bc:	8a ea       	ldi	r24, 0xAA	; 170
    14be:	92 e0       	ldi	r25, 0x02	; 2
    14c0:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
            BL_voidTxChar('\r');
    14c4:	8d e0       	ldi	r24, 0x0D	; 13
    14c6:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
            BL_voidTxString("control(1-6)");
    14ca:	8a eb       	ldi	r24, 0xBA	; 186
    14cc:	92 e0       	ldi	r25, 0x02	; 2
    14ce:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
			BL_voidTxChar('\r');
    14d2:	8d e0       	ldi	r24, 0x0D	; 13
    14d4:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
			BL_voidTxChar('\r');
    14d8:	8d e0       	ldi	r24, 0x0D	; 13
    14da:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
            TMR0_voidStart();
    14de:	0e 94 5f 18 	call	0x30be	; 0x30be <TMR0_voidStart>
			BL_voidRxChar(&bluetooh_value);
    14e2:	87 ec       	ldi	r24, 0xC7	; 199
    14e4:	94 e0       	ldi	r25, 0x04	; 4
    14e6:	0e 94 aa 11 	call	0x2354	; 0x2354 <BL_voidRxChar>
            TMR0_voidStop();
    14ea:	0e 94 6d 18 	call	0x30da	; 0x30da <TMR0_voidStop>
            switch (bluetooh_value)
    14ee:	80 91 c7 04 	lds	r24, 0x04C7	; 0x8004c7 <bluetooh_value>
    14f2:	83 33       	cpi	r24, 0x33	; 51
    14f4:	09 f4       	brne	.+2      	; 0x14f8 <KPD_Interface_RemoteUser+0x1fe>
    14f6:	a0 c0       	rjmp	.+320    	; 0x1638 <KPD_Interface_RemoteUser+0x33e>
    14f8:	30 f4       	brcc	.+12     	; 0x1506 <KPD_Interface_RemoteUser+0x20c>
    14fa:	81 33       	cpi	r24, 0x31	; 49
    14fc:	69 f0       	breq	.+26     	; 0x1518 <KPD_Interface_RemoteUser+0x21e>
    14fe:	82 33       	cpi	r24, 0x32	; 50
    1500:	09 f4       	brne	.+2      	; 0x1504 <KPD_Interface_RemoteUser+0x20a>
    1502:	50 c0       	rjmp	.+160    	; 0x15a4 <KPD_Interface_RemoteUser+0x2aa>
    1504:	08 95       	ret
    1506:	85 33       	cpi	r24, 0x35	; 53
    1508:	09 f4       	brne	.+2      	; 0x150c <KPD_Interface_RemoteUser+0x212>
    150a:	2a c1       	rjmp	.+596    	; 0x1760 <KPD_Interface_RemoteUser+0x466>
    150c:	08 f4       	brcc	.+2      	; 0x1510 <KPD_Interface_RemoteUser+0x216>
    150e:	de c0       	rjmp	.+444    	; 0x16cc <KPD_Interface_RemoteUser+0x3d2>
    1510:	86 33       	cpi	r24, 0x36	; 54
    1512:	09 f4       	brne	.+2      	; 0x1516 <KPD_Interface_RemoteUser+0x21c>
    1514:	6f c1       	rjmp	.+734    	; 0x17f4 <KPD_Interface_RemoteUser+0x4fa>
    1516:	08 95       	ret
            {
            case ('1'):

                DIO_voidGetPinValue(DIO_PORTD, DIO_PIN3, &led_status);
    1518:	48 eb       	ldi	r20, 0xB8	; 184
    151a:	54 e0       	ldi	r21, 0x04	; 4
    151c:	63 e0       	ldi	r22, 0x03	; 3
    151e:	83 e0       	ldi	r24, 0x03	; 3
    1520:	0e 94 18 17 	call	0x2e30	; 0x2e30 <DIO_voidGetPinValue>
                
                if (led_status == 1)
    1524:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <led_status>
    1528:	81 30       	cpi	r24, 0x01	; 1
    152a:	e9 f4       	brne	.+58     	; 0x1566 <KPD_Interface_RemoteUser+0x26c>
                {
                    BL_voidTxString("Light 1 is On");
    152c:	87 ec       	ldi	r24, 0xC7	; 199
    152e:	92 e0       	ldi	r25, 0x02	; 2
    1530:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
                    BL_voidTxChar('\r');
    1534:	8d e0       	ldi	r24, 0x0D	; 13
    1536:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It Off");
    153a:	85 ed       	ldi	r24, 0xD5	; 213
    153c:	92 e0       	ldi	r25, 0x02	; 2
    153e:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
					BL_voidTxChar('\r');
    1542:	8d e0       	ldi	r24, 0x0D	; 13
    1544:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
    1548:	87 ec       	ldi	r24, 0xC7	; 199
    154a:	94 e0       	ldi	r25, 0x04	; 4
    154c:	0e 94 aa 11 	call	0x2354	; 0x2354 <BL_voidRxChar>
                    if (bluetooh_value == '1')
    1550:	80 91 c7 04 	lds	r24, 0x04C7	; 0x8004c7 <bluetooh_value>
    1554:	81 33       	cpi	r24, 0x31	; 49
    1556:	09 f0       	breq	.+2      	; 0x155a <KPD_Interface_RemoteUser+0x260>
    1558:	ec c2       	rjmp	.+1496   	; 0x1b32 <KPD_Interface_RemoteUser+0x838>
                    {
                        LED_voidOff(DIO_PORTD, DIO_PIN3, LED_FORWARD_CONNECTION);
    155a:	41 e0       	ldi	r20, 0x01	; 1
    155c:	63 e0       	ldi	r22, 0x03	; 3
    155e:	83 e0       	ldi	r24, 0x03	; 3
    1560:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <LED_voidOff>
    1564:	08 95       	ret
                    }
                    
					break;
                }
                else if (led_status == 0)
    1566:	81 11       	cpse	r24, r1
    1568:	e4 c2       	rjmp	.+1480   	; 0x1b32 <KPD_Interface_RemoteUser+0x838>
                {
                    BL_voidTxString("Light 1 is OFF");
    156a:	86 ee       	ldi	r24, 0xE6	; 230
    156c:	92 e0       	ldi	r25, 0x02	; 2
    156e:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
                    BL_voidTxChar('\r');
    1572:	8d e0       	ldi	r24, 0x0D	; 13
    1574:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It On");
    1578:	85 ef       	ldi	r24, 0xF5	; 245
    157a:	92 e0       	ldi	r25, 0x02	; 2
    157c:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
					BL_voidTxChar('\r');
    1580:	8d e0       	ldi	r24, 0x0D	; 13
    1582:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
    1586:	87 ec       	ldi	r24, 0xC7	; 199
    1588:	94 e0       	ldi	r25, 0x04	; 4
    158a:	0e 94 aa 11 	call	0x2354	; 0x2354 <BL_voidRxChar>
                    if (bluetooh_value == '1')
    158e:	80 91 c7 04 	lds	r24, 0x04C7	; 0x8004c7 <bluetooh_value>
    1592:	81 33       	cpi	r24, 0x31	; 49
    1594:	09 f0       	breq	.+2      	; 0x1598 <KPD_Interface_RemoteUser+0x29e>
    1596:	cd c2       	rjmp	.+1434   	; 0x1b32 <KPD_Interface_RemoteUser+0x838>
                    {
                        LED_voidOn(DIO_PORTD, DIO_PIN3, LED_FORWARD_CONNECTION);
    1598:	41 e0       	ldi	r20, 0x01	; 1
    159a:	63 e0       	ldi	r22, 0x03	; 3
    159c:	83 e0       	ldi	r24, 0x03	; 3
    159e:	0e 94 6f 15 	call	0x2ade	; 0x2ade <LED_voidOn>
    15a2:	08 95       	ret
                }
                break;

            case ('2'):

                DIO_voidGetPinValue(DIO_PORTB, DIO_PIN0, &led_status);
    15a4:	48 eb       	ldi	r20, 0xB8	; 184
    15a6:	54 e0       	ldi	r21, 0x04	; 4
    15a8:	60 e0       	ldi	r22, 0x00	; 0
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	0e 94 18 17 	call	0x2e30	; 0x2e30 <DIO_voidGetPinValue>
                
                if (led_status == 1)
    15b0:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <led_status>
    15b4:	81 30       	cpi	r24, 0x01	; 1
    15b6:	f9 f4       	brne	.+62     	; 0x15f6 <KPD_Interface_RemoteUser+0x2fc>
                {
                    BL_voidTxString("Light 2 is On");
    15b8:	85 e0       	ldi	r24, 0x05	; 5
    15ba:	93 e0       	ldi	r25, 0x03	; 3
    15bc:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
                    BL_voidTxChar('\r');
    15c0:	8d e0       	ldi	r24, 0x0D	; 13
    15c2:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It Off");
    15c6:	85 ed       	ldi	r24, 0xD5	; 213
    15c8:	92 e0       	ldi	r25, 0x02	; 2
    15ca:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
					BL_voidTxChar('\r');
    15ce:	8d e0       	ldi	r24, 0x0D	; 13
    15d0:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
    15d4:	87 ec       	ldi	r24, 0xC7	; 199
    15d6:	94 e0       	ldi	r25, 0x04	; 4
    15d8:	0e 94 aa 11 	call	0x2354	; 0x2354 <BL_voidRxChar>
                    if (bluetooh_value == '1')
    15dc:	80 91 c7 04 	lds	r24, 0x04C7	; 0x8004c7 <bluetooh_value>
    15e0:	81 33       	cpi	r24, 0x31	; 49
    15e2:	29 f4       	brne	.+10     	; 0x15ee <KPD_Interface_RemoteUser+0x2f4>
                    {
                        LED_voidOff(DIO_PORTB, DIO_PIN0, LED_FORWARD_CONNECTION);
    15e4:	41 e0       	ldi	r20, 0x01	; 1
    15e6:	60 e0       	ldi	r22, 0x00	; 0
    15e8:	81 e0       	ldi	r24, 0x01	; 1
    15ea:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <LED_voidOff>
                    }
                    bluetooh_value = KPD_Not_Pressed;
    15ee:	8f ef       	ldi	r24, 0xFF	; 255
    15f0:	80 93 c7 04 	sts	0x04C7, r24	; 0x8004c7 <bluetooh_value>
    15f4:	08 95       	ret
                }
                else if (led_status == 0)
    15f6:	81 11       	cpse	r24, r1
    15f8:	9c c2       	rjmp	.+1336   	; 0x1b32 <KPD_Interface_RemoteUser+0x838>
                {
                    BL_voidTxString("Light 2 is OFF");
    15fa:	83 e1       	ldi	r24, 0x13	; 19
    15fc:	93 e0       	ldi	r25, 0x03	; 3
    15fe:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
                    BL_voidTxChar('\r');
    1602:	8d e0       	ldi	r24, 0x0D	; 13
    1604:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It On");
    1608:	85 ef       	ldi	r24, 0xF5	; 245
    160a:	92 e0       	ldi	r25, 0x02	; 2
    160c:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
					BL_voidTxChar('\r');
    1610:	8d e0       	ldi	r24, 0x0D	; 13
    1612:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
    1616:	87 ec       	ldi	r24, 0xC7	; 199
    1618:	94 e0       	ldi	r25, 0x04	; 4
    161a:	0e 94 aa 11 	call	0x2354	; 0x2354 <BL_voidRxChar>
                    if (bluetooh_value == '1')
    161e:	80 91 c7 04 	lds	r24, 0x04C7	; 0x8004c7 <bluetooh_value>
    1622:	81 33       	cpi	r24, 0x31	; 49
    1624:	29 f4       	brne	.+10     	; 0x1630 <KPD_Interface_RemoteUser+0x336>
                    {
                        LED_voidOn(DIO_PORTB, DIO_PIN0, LED_FORWARD_CONNECTION);
    1626:	41 e0       	ldi	r20, 0x01	; 1
    1628:	60 e0       	ldi	r22, 0x00	; 0
    162a:	81 e0       	ldi	r24, 0x01	; 1
    162c:	0e 94 6f 15 	call	0x2ade	; 0x2ade <LED_voidOn>
                    }
                    bluetooh_value = KPD_Not_Pressed;
    1630:	8f ef       	ldi	r24, 0xFF	; 255
    1632:	80 93 c7 04 	sts	0x04C7, r24	; 0x8004c7 <bluetooh_value>
    1636:	08 95       	ret
                }
                break;

            case ('3'):

                DIO_voidGetPinValue(DIO_PORTA, DIO_PIN2, &led_status);
    1638:	48 eb       	ldi	r20, 0xB8	; 184
    163a:	54 e0       	ldi	r21, 0x04	; 4
    163c:	62 e0       	ldi	r22, 0x02	; 2
    163e:	80 e0       	ldi	r24, 0x00	; 0
    1640:	0e 94 18 17 	call	0x2e30	; 0x2e30 <DIO_voidGetPinValue>
                
                if (led_status == 1)
    1644:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <led_status>
    1648:	81 30       	cpi	r24, 0x01	; 1
    164a:	f9 f4       	brne	.+62     	; 0x168a <KPD_Interface_RemoteUser+0x390>
                {
                    BL_voidTxString("Light 3 is On");
    164c:	82 e2       	ldi	r24, 0x22	; 34
    164e:	93 e0       	ldi	r25, 0x03	; 3
    1650:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
                    BL_voidTxChar('\r');
    1654:	8d e0       	ldi	r24, 0x0D	; 13
    1656:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It Off");
    165a:	85 ed       	ldi	r24, 0xD5	; 213
    165c:	92 e0       	ldi	r25, 0x02	; 2
    165e:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
					BL_voidTxChar('\r');
    1662:	8d e0       	ldi	r24, 0x0D	; 13
    1664:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
    1668:	87 ec       	ldi	r24, 0xC7	; 199
    166a:	94 e0       	ldi	r25, 0x04	; 4
    166c:	0e 94 aa 11 	call	0x2354	; 0x2354 <BL_voidRxChar>

                    if (bluetooh_value == '1')
    1670:	80 91 c7 04 	lds	r24, 0x04C7	; 0x8004c7 <bluetooh_value>
    1674:	81 33       	cpi	r24, 0x31	; 49
    1676:	29 f4       	brne	.+10     	; 0x1682 <KPD_Interface_RemoteUser+0x388>
                    {
                        LED_voidOff(DIO_PORTA, DIO_PIN2, LED_FORWARD_CONNECTION);
    1678:	41 e0       	ldi	r20, 0x01	; 1
    167a:	62 e0       	ldi	r22, 0x02	; 2
    167c:	80 e0       	ldi	r24, 0x00	; 0
    167e:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <LED_voidOff>
                    }
                    bluetooh_value = KPD_Not_Pressed;
    1682:	8f ef       	ldi	r24, 0xFF	; 255
    1684:	80 93 c7 04 	sts	0x04C7, r24	; 0x8004c7 <bluetooh_value>
    1688:	08 95       	ret
                }
                else if (led_status == 0)
    168a:	81 11       	cpse	r24, r1
    168c:	52 c2       	rjmp	.+1188   	; 0x1b32 <KPD_Interface_RemoteUser+0x838>
                {
                    BL_voidTxString("Light 3 is OFF");
    168e:	80 e3       	ldi	r24, 0x30	; 48
    1690:	93 e0       	ldi	r25, 0x03	; 3
    1692:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
                    BL_voidTxChar('\r');
    1696:	8d e0       	ldi	r24, 0x0D	; 13
    1698:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It On");
    169c:	85 ef       	ldi	r24, 0xF5	; 245
    169e:	92 e0       	ldi	r25, 0x02	; 2
    16a0:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
					BL_voidTxChar('\r');
    16a4:	8d e0       	ldi	r24, 0x0D	; 13
    16a6:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
    16aa:	87 ec       	ldi	r24, 0xC7	; 199
    16ac:	94 e0       	ldi	r25, 0x04	; 4
    16ae:	0e 94 aa 11 	call	0x2354	; 0x2354 <BL_voidRxChar>

                    if (bluetooh_value == '1')
    16b2:	80 91 c7 04 	lds	r24, 0x04C7	; 0x8004c7 <bluetooh_value>
    16b6:	81 33       	cpi	r24, 0x31	; 49
    16b8:	29 f4       	brne	.+10     	; 0x16c4 <KPD_Interface_RemoteUser+0x3ca>
                    {
                        LED_voidOn(DIO_PORTA, DIO_PIN2, LED_FORWARD_CONNECTION);
    16ba:	41 e0       	ldi	r20, 0x01	; 1
    16bc:	62 e0       	ldi	r22, 0x02	; 2
    16be:	80 e0       	ldi	r24, 0x00	; 0
    16c0:	0e 94 6f 15 	call	0x2ade	; 0x2ade <LED_voidOn>
                    }
                    bluetooh_value = KPD_Not_Pressed;
    16c4:	8f ef       	ldi	r24, 0xFF	; 255
    16c6:	80 93 c7 04 	sts	0x04C7, r24	; 0x8004c7 <bluetooh_value>
    16ca:	08 95       	ret
                }
                break;

            case ('4'):

                DIO_voidGetPinValue(DIO_PORTA, DIO_PIN3, &led_status);
    16cc:	48 eb       	ldi	r20, 0xB8	; 184
    16ce:	54 e0       	ldi	r21, 0x04	; 4
    16d0:	63 e0       	ldi	r22, 0x03	; 3
    16d2:	80 e0       	ldi	r24, 0x00	; 0
    16d4:	0e 94 18 17 	call	0x2e30	; 0x2e30 <DIO_voidGetPinValue>
                
                if (led_status == 1)
    16d8:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <led_status>
    16dc:	81 30       	cpi	r24, 0x01	; 1
    16de:	f9 f4       	brne	.+62     	; 0x171e <KPD_Interface_RemoteUser+0x424>
                {
                    BL_voidTxString("Light 4 is On");
    16e0:	8f e3       	ldi	r24, 0x3F	; 63
    16e2:	93 e0       	ldi	r25, 0x03	; 3
    16e4:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
                    BL_voidTxChar('\r');
    16e8:	8d e0       	ldi	r24, 0x0D	; 13
    16ea:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It Off");
    16ee:	85 ed       	ldi	r24, 0xD5	; 213
    16f0:	92 e0       	ldi	r25, 0x02	; 2
    16f2:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
					BL_voidTxChar('\r');
    16f6:	8d e0       	ldi	r24, 0x0D	; 13
    16f8:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
    16fc:	87 ec       	ldi	r24, 0xC7	; 199
    16fe:	94 e0       	ldi	r25, 0x04	; 4
    1700:	0e 94 aa 11 	call	0x2354	; 0x2354 <BL_voidRxChar>

                    if (bluetooh_value == '1')
    1704:	80 91 c7 04 	lds	r24, 0x04C7	; 0x8004c7 <bluetooh_value>
    1708:	81 33       	cpi	r24, 0x31	; 49
    170a:	29 f4       	brne	.+10     	; 0x1716 <KPD_Interface_RemoteUser+0x41c>
                    {
                        LED_voidOff(DIO_PORTA, DIO_PIN3, LED_FORWARD_CONNECTION);
    170c:	41 e0       	ldi	r20, 0x01	; 1
    170e:	63 e0       	ldi	r22, 0x03	; 3
    1710:	80 e0       	ldi	r24, 0x00	; 0
    1712:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <LED_voidOff>
                    }
                    bluetooh_value = KPD_Not_Pressed;
    1716:	8f ef       	ldi	r24, 0xFF	; 255
    1718:	80 93 c7 04 	sts	0x04C7, r24	; 0x8004c7 <bluetooh_value>
    171c:	08 95       	ret
                }
                else if (led_status == 0)
    171e:	81 11       	cpse	r24, r1
    1720:	08 c2       	rjmp	.+1040   	; 0x1b32 <KPD_Interface_RemoteUser+0x838>
                {
                    BL_voidTxString("Light 4 is OFF");
    1722:	8d e4       	ldi	r24, 0x4D	; 77
    1724:	93 e0       	ldi	r25, 0x03	; 3
    1726:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
                    BL_voidTxChar('\r');
    172a:	8d e0       	ldi	r24, 0x0D	; 13
    172c:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It On");
    1730:	85 ef       	ldi	r24, 0xF5	; 245
    1732:	92 e0       	ldi	r25, 0x02	; 2
    1734:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
					BL_voidTxChar('\r');
    1738:	8d e0       	ldi	r24, 0x0D	; 13
    173a:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
    173e:	87 ec       	ldi	r24, 0xC7	; 199
    1740:	94 e0       	ldi	r25, 0x04	; 4
    1742:	0e 94 aa 11 	call	0x2354	; 0x2354 <BL_voidRxChar>

                    if (bluetooh_value == '1')
    1746:	80 91 c7 04 	lds	r24, 0x04C7	; 0x8004c7 <bluetooh_value>
    174a:	81 33       	cpi	r24, 0x31	; 49
    174c:	29 f4       	brne	.+10     	; 0x1758 <KPD_Interface_RemoteUser+0x45e>
                    {
                        LED_voidOn(DIO_PORTA, DIO_PIN3, LED_FORWARD_CONNECTION);
    174e:	41 e0       	ldi	r20, 0x01	; 1
    1750:	63 e0       	ldi	r22, 0x03	; 3
    1752:	80 e0       	ldi	r24, 0x00	; 0
    1754:	0e 94 6f 15 	call	0x2ade	; 0x2ade <LED_voidOn>
                    }
                    bluetooh_value = KPD_Not_Pressed;
    1758:	8f ef       	ldi	r24, 0xFF	; 255
    175a:	80 93 c7 04 	sts	0x04C7, r24	; 0x8004c7 <bluetooh_value>
    175e:	08 95       	ret
                }
                break;

            case ('5'):

                DIO_voidGetPinValue(DIO_PORTD, DIO_PIN2, &led_status);
    1760:	48 eb       	ldi	r20, 0xB8	; 184
    1762:	54 e0       	ldi	r21, 0x04	; 4
    1764:	62 e0       	ldi	r22, 0x02	; 2
    1766:	83 e0       	ldi	r24, 0x03	; 3
    1768:	0e 94 18 17 	call	0x2e30	; 0x2e30 <DIO_voidGetPinValue>
                
                if (led_status == 1)
    176c:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <led_status>
    1770:	81 30       	cpi	r24, 0x01	; 1
    1772:	f9 f4       	brne	.+62     	; 0x17b2 <KPD_Interface_RemoteUser+0x4b8>
                {
                    BL_voidTxString("Light 5 is On");
    1774:	8c e5       	ldi	r24, 0x5C	; 92
    1776:	93 e0       	ldi	r25, 0x03	; 3
    1778:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
                    BL_voidTxChar('\r');
    177c:	8d e0       	ldi	r24, 0x0D	; 13
    177e:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It Off");
    1782:	85 ed       	ldi	r24, 0xD5	; 213
    1784:	92 e0       	ldi	r25, 0x02	; 2
    1786:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
					BL_voidTxChar('\r');
    178a:	8d e0       	ldi	r24, 0x0D	; 13
    178c:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
    1790:	87 ec       	ldi	r24, 0xC7	; 199
    1792:	94 e0       	ldi	r25, 0x04	; 4
    1794:	0e 94 aa 11 	call	0x2354	; 0x2354 <BL_voidRxChar>

                    if (bluetooh_value == '1')
    1798:	80 91 c7 04 	lds	r24, 0x04C7	; 0x8004c7 <bluetooh_value>
    179c:	81 33       	cpi	r24, 0x31	; 49
    179e:	29 f4       	brne	.+10     	; 0x17aa <KPD_Interface_RemoteUser+0x4b0>
                    {
                        LED_voidOff(DIO_PORTD, DIO_PIN2, LED_FORWARD_CONNECTION);
    17a0:	41 e0       	ldi	r20, 0x01	; 1
    17a2:	62 e0       	ldi	r22, 0x02	; 2
    17a4:	83 e0       	ldi	r24, 0x03	; 3
    17a6:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <LED_voidOff>
                    }
                    bluetooh_value = KPD_Not_Pressed;
    17aa:	8f ef       	ldi	r24, 0xFF	; 255
    17ac:	80 93 c7 04 	sts	0x04C7, r24	; 0x8004c7 <bluetooh_value>
    17b0:	08 95       	ret
                }
                else if (led_status == 0)
    17b2:	81 11       	cpse	r24, r1
    17b4:	be c1       	rjmp	.+892    	; 0x1b32 <KPD_Interface_RemoteUser+0x838>
                {
                    BL_voidTxString("Light 5 is OFF");
    17b6:	8a e6       	ldi	r24, 0x6A	; 106
    17b8:	93 e0       	ldi	r25, 0x03	; 3
    17ba:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
                    BL_voidTxChar('\r');
    17be:	8d e0       	ldi	r24, 0x0D	; 13
    17c0:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It On");
    17c4:	85 ef       	ldi	r24, 0xF5	; 245
    17c6:	92 e0       	ldi	r25, 0x02	; 2
    17c8:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
					BL_voidTxChar('\r');
    17cc:	8d e0       	ldi	r24, 0x0D	; 13
    17ce:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
    17d2:	87 ec       	ldi	r24, 0xC7	; 199
    17d4:	94 e0       	ldi	r25, 0x04	; 4
    17d6:	0e 94 aa 11 	call	0x2354	; 0x2354 <BL_voidRxChar>

                    if (bluetooh_value == '1')
    17da:	80 91 c7 04 	lds	r24, 0x04C7	; 0x8004c7 <bluetooh_value>
    17de:	81 33       	cpi	r24, 0x31	; 49
    17e0:	29 f4       	brne	.+10     	; 0x17ec <KPD_Interface_RemoteUser+0x4f2>
                    {
                        LED_voidOn(DIO_PORTD, DIO_PIN2, LED_FORWARD_CONNECTION);
    17e2:	41 e0       	ldi	r20, 0x01	; 1
    17e4:	62 e0       	ldi	r22, 0x02	; 2
    17e6:	83 e0       	ldi	r24, 0x03	; 3
    17e8:	0e 94 6f 15 	call	0x2ade	; 0x2ade <LED_voidOn>
                    }
                    bluetooh_value = KPD_Not_Pressed;
    17ec:	8f ef       	ldi	r24, 0xFF	; 255
    17ee:	80 93 c7 04 	sts	0x04C7, r24	; 0x8004c7 <bluetooh_value>
    17f2:	08 95       	ret

            case ('6'):
				
                
				
                if (dimmer_brightness > 0)
    17f4:	80 91 b7 04 	lds	r24, 0x04B7	; 0x8004b7 <dimmer_brightness>
    17f8:	88 23       	and	r24, r24
    17fa:	09 f4       	brne	.+2      	; 0x17fe <KPD_Interface_RemoteUser+0x504>
    17fc:	b1 c0       	rjmp	.+354    	; 0x1960 <KPD_Interface_RemoteUser+0x666>
                {
					 BL_voidTxChar('\r');
    17fe:	8d e0       	ldi	r24, 0x0D	; 13
    1800:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
                    BL_voidTxString("Light 6 is On");
    1804:	89 e7       	ldi	r24, 0x79	; 121
    1806:	93 e0       	ldi	r25, 0x03	; 3
    1808:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
					BL_voidTxChar('\r');
    180c:	8d e0       	ldi	r24, 0x0D	; 13
    180e:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
					sprintf(DimmerString, "Brightness: %d%", dimmer_brightness);
    1812:	80 91 b7 04 	lds	r24, 0x04B7	; 0x8004b7 <dimmer_brightness>
    1816:	1f 92       	push	r1
    1818:	8f 93       	push	r24
    181a:	87 e8       	ldi	r24, 0x87	; 135
    181c:	93 e0       	ldi	r25, 0x03	; 3
    181e:	9f 93       	push	r25
    1820:	8f 93       	push	r24
    1822:	88 ec       	ldi	r24, 0xC8	; 200
    1824:	94 e0       	ldi	r25, 0x04	; 4
    1826:	9f 93       	push	r25
    1828:	8f 93       	push	r24
    182a:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <sprintf>
					BL_voidTxString(DimmerString);
    182e:	88 ec       	ldi	r24, 0xC8	; 200
    1830:	94 e0       	ldi	r25, 0x04	; 4
    1832:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
                    BL_voidTxChar('\r');
    1836:	8d e0       	ldi	r24, 0x0D	; 13
    1838:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
                    BL_voidTxString("1)+10 2)-10 0)H");
    183c:	87 e9       	ldi	r24, 0x97	; 151
    183e:	93 e0       	ldi	r25, 0x03	; 3
    1840:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
					BL_voidTxChar('\r');
    1844:	8d e0       	ldi	r24, 0x0D	; 13
    1846:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
    184a:	87 ec       	ldi	r24, 0xC7	; 199
    184c:	94 e0       	ldi	r25, 0x04	; 4
    184e:	0e 94 aa 11 	call	0x2354	; 0x2354 <BL_voidRxChar>
					while (bluetooh_value != 0)
    1852:	80 91 c7 04 	lds	r24, 0x04C7	; 0x8004c7 <bluetooh_value>
    1856:	0f 90       	pop	r0
    1858:	0f 90       	pop	r0
    185a:	0f 90       	pop	r0
    185c:	0f 90       	pop	r0
    185e:	0f 90       	pop	r0
    1860:	0f 90       	pop	r0
    1862:	88 23       	and	r24, r24
    1864:	09 f4       	brne	.+2      	; 0x1868 <KPD_Interface_RemoteUser+0x56e>
    1866:	65 c1       	rjmp	.+714    	; 0x1b32 <KPD_Interface_RemoteUser+0x838>
					{
						if (bluetooh_value == '1')
    1868:	81 33       	cpi	r24, 0x31	; 49
    186a:	09 f0       	breq	.+2      	; 0x186e <KPD_Interface_RemoteUser+0x574>
    186c:	43 c0       	rjmp	.+134    	; 0x18f4 <KPD_Interface_RemoteUser+0x5fa>
						{
							dimmer_brightness += 10;
    186e:	60 91 b7 04 	lds	r22, 0x04B7	; 0x8004b7 <dimmer_brightness>
    1872:	66 5f       	subi	r22, 0xF6	; 246
    1874:	60 93 b7 04 	sts	0x04B7, r22	; 0x8004b7 <dimmer_brightness>
							PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
    1878:	70 e0       	ldi	r23, 0x00	; 0
    187a:	80 e0       	ldi	r24, 0x00	; 0
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	0e 94 91 1b 	call	0x3722	; 0x3722 <__floatunsisf>
    1882:	ab 01       	movw	r20, r22
    1884:	bc 01       	movw	r22, r24
    1886:	88 ee       	ldi	r24, 0xE8	; 232
    1888:	93 e0       	ldi	r25, 0x03	; 3
    188a:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <PWM_voidGenerateChannel_1A>
							sprintf(DimmerString, "Brightness: %d%", dimmer_brightness);
    188e:	80 91 b7 04 	lds	r24, 0x04B7	; 0x8004b7 <dimmer_brightness>
    1892:	1f 92       	push	r1
    1894:	8f 93       	push	r24
    1896:	87 e8       	ldi	r24, 0x87	; 135
    1898:	93 e0       	ldi	r25, 0x03	; 3
    189a:	9f 93       	push	r25
    189c:	8f 93       	push	r24
    189e:	88 ec       	ldi	r24, 0xC8	; 200
    18a0:	94 e0       	ldi	r25, 0x04	; 4
    18a2:	9f 93       	push	r25
    18a4:	8f 93       	push	r24
    18a6:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <sprintf>
							BL_voidTxString(DimmerString);
    18aa:	88 ec       	ldi	r24, 0xC8	; 200
    18ac:	94 e0       	ldi	r25, 0x04	; 4
    18ae:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
                    		BL_voidTxChar('\r');
    18b2:	8d e0       	ldi	r24, 0x0D	; 13
    18b4:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
                    		BL_voidTxString("1)+10 2)-10 0)H");
    18b8:	87 e9       	ldi	r24, 0x97	; 151
    18ba:	93 e0       	ldi	r25, 0x03	; 3
    18bc:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
							BL_voidTxChar('\r');
    18c0:	8d e0       	ldi	r24, 0x0D	; 13
    18c2:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
							if (dimmer_brightness > 100)
    18c6:	80 91 b7 04 	lds	r24, 0x04B7	; 0x8004b7 <dimmer_brightness>
    18ca:	0f 90       	pop	r0
    18cc:	0f 90       	pop	r0
    18ce:	0f 90       	pop	r0
    18d0:	0f 90       	pop	r0
    18d2:	0f 90       	pop	r0
    18d4:	0f 90       	pop	r0
    18d6:	85 36       	cpi	r24, 0x65	; 101
    18d8:	08 f4       	brcc	.+2      	; 0x18dc <KPD_Interface_RemoteUser+0x5e2>
    18da:	2b c1       	rjmp	.+598    	; 0x1b32 <KPD_Interface_RemoteUser+0x838>
							{
								dimmer_brightness = 100;
    18dc:	84 e6       	ldi	r24, 0x64	; 100
    18de:	80 93 b7 04 	sts	0x04B7, r24	; 0x8004b7 <dimmer_brightness>
								PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
    18e2:	40 e0       	ldi	r20, 0x00	; 0
    18e4:	50 e0       	ldi	r21, 0x00	; 0
    18e6:	68 ec       	ldi	r22, 0xC8	; 200
    18e8:	72 e4       	ldi	r23, 0x42	; 66
    18ea:	88 ee       	ldi	r24, 0xE8	; 232
    18ec:	93 e0       	ldi	r25, 0x03	; 3
    18ee:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <PWM_voidGenerateChannel_1A>
    18f2:	08 95       	ret
							}
							break;													
						}
						else if (bluetooh_value == '2')
    18f4:	82 33       	cpi	r24, 0x32	; 50
    18f6:	09 f0       	breq	.+2      	; 0x18fa <KPD_Interface_RemoteUser+0x600>
    18f8:	1c c1       	rjmp	.+568    	; 0x1b32 <KPD_Interface_RemoteUser+0x838>
						{
							dimmer_brightness -= 10;
    18fa:	60 91 b7 04 	lds	r22, 0x04B7	; 0x8004b7 <dimmer_brightness>
    18fe:	6a 50       	subi	r22, 0x0A	; 10
    1900:	60 93 b7 04 	sts	0x04B7, r22	; 0x8004b7 <dimmer_brightness>
							PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
    1904:	70 e0       	ldi	r23, 0x00	; 0
    1906:	80 e0       	ldi	r24, 0x00	; 0
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	0e 94 91 1b 	call	0x3722	; 0x3722 <__floatunsisf>
    190e:	ab 01       	movw	r20, r22
    1910:	bc 01       	movw	r22, r24
    1912:	88 ee       	ldi	r24, 0xE8	; 232
    1914:	93 e0       	ldi	r25, 0x03	; 3
    1916:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <PWM_voidGenerateChannel_1A>
							sprintf(DimmerString, "Brightness: %d%", dimmer_brightness);
    191a:	80 91 b7 04 	lds	r24, 0x04B7	; 0x8004b7 <dimmer_brightness>
    191e:	1f 92       	push	r1
    1920:	8f 93       	push	r24
    1922:	87 e8       	ldi	r24, 0x87	; 135
    1924:	93 e0       	ldi	r25, 0x03	; 3
    1926:	9f 93       	push	r25
    1928:	8f 93       	push	r24
    192a:	88 ec       	ldi	r24, 0xC8	; 200
    192c:	94 e0       	ldi	r25, 0x04	; 4
    192e:	9f 93       	push	r25
    1930:	8f 93       	push	r24
    1932:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <sprintf>
							BL_voidTxString(DimmerString);
    1936:	88 ec       	ldi	r24, 0xC8	; 200
    1938:	94 e0       	ldi	r25, 0x04	; 4
    193a:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
                    		BL_voidTxChar('\r');
    193e:	8d e0       	ldi	r24, 0x0D	; 13
    1940:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
                    		BL_voidTxString("1)+10 2)-10 0)H");
    1944:	87 e9       	ldi	r24, 0x97	; 151
    1946:	93 e0       	ldi	r25, 0x03	; 3
    1948:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
							BL_voidTxChar('\r');
    194c:	8d e0       	ldi	r24, 0x0D	; 13
    194e:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
							if (dimmer_brightness < 0)
							{
								dimmer_brightness = 0;
								PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
							}
							break;
    1952:	0f 90       	pop	r0
    1954:	0f 90       	pop	r0
    1956:	0f 90       	pop	r0
    1958:	0f 90       	pop	r0
    195a:	0f 90       	pop	r0
    195c:	0f 90       	pop	r0
    195e:	08 95       	ret
						break;					
	
					}
					
                }
                else if (dimmer_brightness == 0)
    1960:	81 11       	cpse	r24, r1
    1962:	e7 c0       	rjmp	.+462    	; 0x1b32 <KPD_Interface_RemoteUser+0x838>
                {
                    BL_voidTxString("Light 6 is OFF");
    1964:	87 ea       	ldi	r24, 0xA7	; 167
    1966:	93 e0       	ldi	r25, 0x03	; 3
    1968:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
    196c:	2f ef       	ldi	r18, 0xFF	; 255
    196e:	83 ed       	ldi	r24, 0xD3	; 211
    1970:	90 e3       	ldi	r25, 0x30	; 48
    1972:	21 50       	subi	r18, 0x01	; 1
    1974:	80 40       	sbci	r24, 0x00	; 0
    1976:	90 40       	sbci	r25, 0x00	; 0
    1978:	e1 f7       	brne	.-8      	; 0x1972 <KPD_Interface_RemoteUser+0x678>
    197a:	00 c0       	rjmp	.+0      	; 0x197c <KPD_Interface_RemoteUser+0x682>
    197c:	00 00       	nop
					_delay_ms(1000);
					BL_voidTxChar('\r');
    197e:	8d e0       	ldi	r24, 0x0D	; 13
    1980:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
					sprintf(DimmerString, "Brightness: %d%", dimmer_brightness);
    1984:	80 91 b7 04 	lds	r24, 0x04B7	; 0x8004b7 <dimmer_brightness>
    1988:	1f 92       	push	r1
    198a:	8f 93       	push	r24
    198c:	87 e8       	ldi	r24, 0x87	; 135
    198e:	93 e0       	ldi	r25, 0x03	; 3
    1990:	9f 93       	push	r25
    1992:	8f 93       	push	r24
    1994:	88 ec       	ldi	r24, 0xC8	; 200
    1996:	94 e0       	ldi	r25, 0x04	; 4
    1998:	9f 93       	push	r25
    199a:	8f 93       	push	r24
    199c:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <sprintf>
					BL_voidTxString(DimmerString);
    19a0:	88 ec       	ldi	r24, 0xC8	; 200
    19a2:	94 e0       	ldi	r25, 0x04	; 4
    19a4:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
                    BL_voidTxChar('\r');
    19a8:	8d e0       	ldi	r24, 0x0D	; 13
    19aa:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
                    BL_voidTxString("1)+10 2)-10 0)H");
    19ae:	87 e9       	ldi	r24, 0x97	; 151
    19b0:	93 e0       	ldi	r25, 0x03	; 3
    19b2:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
					BL_voidTxChar('\r');
    19b6:	8d e0       	ldi	r24, 0x0D	; 13
    19b8:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
    19bc:	87 ec       	ldi	r24, 0xC7	; 199
    19be:	94 e0       	ldi	r25, 0x04	; 4
    19c0:	0e 94 aa 11 	call	0x2354	; 0x2354 <BL_voidRxChar>
					while (bluetooh_value != 0)
    19c4:	0f 90       	pop	r0
    19c6:	0f 90       	pop	r0
    19c8:	0f 90       	pop	r0
    19ca:	0f 90       	pop	r0
    19cc:	0f 90       	pop	r0
    19ce:	0f 90       	pop	r0
    19d0:	7d c0       	rjmp	.+250    	; 0x1acc <KPD_Interface_RemoteUser+0x7d2>
					{
						if (bluetooh_value == '1')
    19d2:	81 33       	cpi	r24, 0x31	; 49
    19d4:	09 f0       	breq	.+2      	; 0x19d8 <KPD_Interface_RemoteUser+0x6de>
    19d6:	43 c0       	rjmp	.+134    	; 0x1a5e <KPD_Interface_RemoteUser+0x764>
						{
							dimmer_brightness += 10;
    19d8:	60 91 b7 04 	lds	r22, 0x04B7	; 0x8004b7 <dimmer_brightness>
    19dc:	66 5f       	subi	r22, 0xF6	; 246
    19de:	60 93 b7 04 	sts	0x04B7, r22	; 0x8004b7 <dimmer_brightness>
							PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
    19e2:	70 e0       	ldi	r23, 0x00	; 0
    19e4:	80 e0       	ldi	r24, 0x00	; 0
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	0e 94 91 1b 	call	0x3722	; 0x3722 <__floatunsisf>
    19ec:	ab 01       	movw	r20, r22
    19ee:	bc 01       	movw	r22, r24
    19f0:	88 ee       	ldi	r24, 0xE8	; 232
    19f2:	93 e0       	ldi	r25, 0x03	; 3
    19f4:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <PWM_voidGenerateChannel_1A>
							sprintf(DimmerString, "Brightness: %d%", dimmer_brightness);
    19f8:	80 91 b7 04 	lds	r24, 0x04B7	; 0x8004b7 <dimmer_brightness>
    19fc:	1f 92       	push	r1
    19fe:	8f 93       	push	r24
    1a00:	87 e8       	ldi	r24, 0x87	; 135
    1a02:	93 e0       	ldi	r25, 0x03	; 3
    1a04:	9f 93       	push	r25
    1a06:	8f 93       	push	r24
    1a08:	88 ec       	ldi	r24, 0xC8	; 200
    1a0a:	94 e0       	ldi	r25, 0x04	; 4
    1a0c:	9f 93       	push	r25
    1a0e:	8f 93       	push	r24
    1a10:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <sprintf>
							BL_voidTxString(DimmerString);
    1a14:	88 ec       	ldi	r24, 0xC8	; 200
    1a16:	94 e0       	ldi	r25, 0x04	; 4
    1a18:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
                    		BL_voidTxChar('\r');
    1a1c:	8d e0       	ldi	r24, 0x0D	; 13
    1a1e:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
                    		BL_voidTxString("1)+10 2)-10 0)H");
    1a22:	87 e9       	ldi	r24, 0x97	; 151
    1a24:	93 e0       	ldi	r25, 0x03	; 3
    1a26:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
							BL_voidTxChar('\r');
    1a2a:	8d e0       	ldi	r24, 0x0D	; 13
    1a2c:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
							if (dimmer_brightness > 100)
    1a30:	80 91 b7 04 	lds	r24, 0x04B7	; 0x8004b7 <dimmer_brightness>
    1a34:	0f 90       	pop	r0
    1a36:	0f 90       	pop	r0
    1a38:	0f 90       	pop	r0
    1a3a:	0f 90       	pop	r0
    1a3c:	0f 90       	pop	r0
    1a3e:	0f 90       	pop	r0
    1a40:	85 36       	cpi	r24, 0x65	; 101
    1a42:	08 f4       	brcc	.+2      	; 0x1a46 <KPD_Interface_RemoteUser+0x74c>
    1a44:	76 c0       	rjmp	.+236    	; 0x1b32 <KPD_Interface_RemoteUser+0x838>
							{
								dimmer_brightness = 100;
    1a46:	84 e6       	ldi	r24, 0x64	; 100
    1a48:	80 93 b7 04 	sts	0x04B7, r24	; 0x8004b7 <dimmer_brightness>
								PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
    1a4c:	40 e0       	ldi	r20, 0x00	; 0
    1a4e:	50 e0       	ldi	r21, 0x00	; 0
    1a50:	68 ec       	ldi	r22, 0xC8	; 200
    1a52:	72 e4       	ldi	r23, 0x42	; 66
    1a54:	88 ee       	ldi	r24, 0xE8	; 232
    1a56:	93 e0       	ldi	r25, 0x03	; 3
    1a58:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <PWM_voidGenerateChannel_1A>
    1a5c:	08 95       	ret
							}
							break;
						
							
						}
						else if (bluetooh_value == '2')
    1a5e:	82 33       	cpi	r24, 0x32	; 50
    1a60:	99 f5       	brne	.+102    	; 0x1ac8 <KPD_Interface_RemoteUser+0x7ce>
						{
							dimmer_brightness -= 10;
    1a62:	60 91 b7 04 	lds	r22, 0x04B7	; 0x8004b7 <dimmer_brightness>
    1a66:	6a 50       	subi	r22, 0x0A	; 10
    1a68:	60 93 b7 04 	sts	0x04B7, r22	; 0x8004b7 <dimmer_brightness>
							PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
    1a6c:	70 e0       	ldi	r23, 0x00	; 0
    1a6e:	80 e0       	ldi	r24, 0x00	; 0
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	0e 94 91 1b 	call	0x3722	; 0x3722 <__floatunsisf>
    1a76:	ab 01       	movw	r20, r22
    1a78:	bc 01       	movw	r22, r24
    1a7a:	88 ee       	ldi	r24, 0xE8	; 232
    1a7c:	93 e0       	ldi	r25, 0x03	; 3
    1a7e:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <PWM_voidGenerateChannel_1A>
							sprintf(DimmerString, "Brightness: %d%", dimmer_brightness);
    1a82:	80 91 b7 04 	lds	r24, 0x04B7	; 0x8004b7 <dimmer_brightness>
    1a86:	1f 92       	push	r1
    1a88:	8f 93       	push	r24
    1a8a:	87 e8       	ldi	r24, 0x87	; 135
    1a8c:	93 e0       	ldi	r25, 0x03	; 3
    1a8e:	9f 93       	push	r25
    1a90:	8f 93       	push	r24
    1a92:	88 ec       	ldi	r24, 0xC8	; 200
    1a94:	94 e0       	ldi	r25, 0x04	; 4
    1a96:	9f 93       	push	r25
    1a98:	8f 93       	push	r24
    1a9a:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <sprintf>
							BL_voidTxString(DimmerString);
    1a9e:	88 ec       	ldi	r24, 0xC8	; 200
    1aa0:	94 e0       	ldi	r25, 0x04	; 4
    1aa2:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
                    		BL_voidTxChar('\r');
    1aa6:	8d e0       	ldi	r24, 0x0D	; 13
    1aa8:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
                    		BL_voidTxString("1)+10 2)-10 0)H");
    1aac:	87 e9       	ldi	r24, 0x97	; 151
    1aae:	93 e0       	ldi	r25, 0x03	; 3
    1ab0:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
							BL_voidTxChar('\r');
    1ab4:	8d e0       	ldi	r24, 0x0D	; 13
    1ab6:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
							if (dimmer_brightness < 0)
							{
								dimmer_brightness = 0;
								PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
							}
							break;
    1aba:	0f 90       	pop	r0
    1abc:	0f 90       	pop	r0
    1abe:	0f 90       	pop	r0
    1ac0:	0f 90       	pop	r0
    1ac2:	0f 90       	pop	r0
    1ac4:	0f 90       	pop	r0
    1ac6:	08 95       	ret
						}
						else if (bluetooh_value == '0')
    1ac8:	80 33       	cpi	r24, 0x30	; 48
    1aca:	99 f1       	breq	.+102    	; 0x1b32 <KPD_Interface_RemoteUser+0x838>
					BL_voidTxString(DimmerString);
                    BL_voidTxChar('\r');
                    BL_voidTxString("1)+10 2)-10 0)H");
					BL_voidTxChar('\r');
					BL_voidRxChar(&bluetooh_value);
					while (bluetooh_value != 0)
    1acc:	80 91 c7 04 	lds	r24, 0x04C7	; 0x8004c7 <bluetooh_value>
    1ad0:	81 11       	cpse	r24, r1
    1ad2:	7f cf       	rjmp	.-258    	; 0x19d2 <KPD_Interface_RemoteUser+0x6d8>
    1ad4:	08 95       	ret
			break;

			case ('3'):
			
				
				ADC_voidGetDigitalValue(ADC_CHANNEL_0, &local_temp); 
    1ad6:	66 eb       	ldi	r22, 0xB6	; 182
    1ad8:	74 e0       	ldi	r23, 0x04	; 4
    1ada:	80 e0       	ldi	r24, 0x00	; 0
    1adc:	0e 94 fd 15 	call	0x2bfa	; 0x2bfa <ADC_voidGetDigitalValue>
				sprintf(tempString, "Room Temp: %d c", local_temp);
    1ae0:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <__data_end>
    1ae4:	1f 92       	push	r1
    1ae6:	8f 93       	push	r24
    1ae8:	81 e6       	ldi	r24, 0x61	; 97
    1aea:	92 e0       	ldi	r25, 0x02	; 2
    1aec:	9f 93       	push	r25
    1aee:	8f 93       	push	r24
    1af0:	8c ed       	ldi	r24, 0xDC	; 220
    1af2:	94 e0       	ldi	r25, 0x04	; 4
    1af4:	9f 93       	push	r25
    1af6:	8f 93       	push	r24
    1af8:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <sprintf>
				BL_voidTxString(tempString);
    1afc:	8c ed       	ldi	r24, 0xDC	; 220
    1afe:	94 e0       	ldi	r25, 0x04	; 4
    1b00:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
				BL_voidTxChar('\r');
    1b04:	8d e0       	ldi	r24, 0x0D	; 13
    1b06:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
				BL_voidTxString("0-go to home");
    1b0a:	82 e8       	ldi	r24, 0x82	; 130
    1b0c:	92 e0       	ldi	r25, 0x02	; 2
    1b0e:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
				BL_voidTxChar('\r');
    1b12:	8d e0       	ldi	r24, 0x0D	; 13
    1b14:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
				BL_voidRxChar(&bluetooh_value);	
    1b18:	87 ec       	ldi	r24, 0xC7	; 199
    1b1a:	94 e0       	ldi	r25, 0x04	; 4
    1b1c:	0e 94 aa 11 	call	0x2354	; 0x2354 <BL_voidRxChar>
    1b20:	0f 90       	pop	r0
    1b22:	0f 90       	pop	r0
    1b24:	0f 90       	pop	r0
    1b26:	0f 90       	pop	r0
    1b28:	0f 90       	pop	r0
    1b2a:	0f 90       	pop	r0
				{
					
				}

			case('6'):
			usertype =HOME_NO_LOGIN;
    1b2c:	86 e0       	ldi	r24, 0x06	; 6
    1b2e:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <usertype>
    1b32:	08 95       	ret

00001b34 <WelcomeScreenRemote>:
        }
    
}
void WelcomeScreenRemote()
{
	BL_voidTxString(" Welcome to your Smart Home");
    1b34:	80 e2       	ldi	r24, 0x20	; 32
    1b36:	94 e0       	ldi	r25, 0x04	; 4
    1b38:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
	BL_voidTxChar('\r');
    1b3c:	8d e0       	ldi	r24, 0x0D	; 13
    1b3e:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
    1b42:	08 95       	ret

00001b44 <WelcomeScreenLocal>:
}

void WelcomeScreenLocal()
// this function is for greeting the user in local user interface
{
    LCD_voidDisplayStringDelay((u8 *)" Welcome to your");
    1b44:	8c e3       	ldi	r24, 0x3C	; 60
    1b46:	94 e0       	ldi	r25, 0x04	; 4
    1b48:	0e 94 67 14 	call	0x28ce	; 0x28ce <LCD_voidDisplayStringDelay>
    LCD_voidSendCommand(Write_SecondLine);
    1b4c:	80 ec       	ldi	r24, 0xC0	; 192
    1b4e:	0e 94 83 13 	call	0x2706	; 0x2706 <LCD_voidSendCommand>
    LCD_voidDisplayStringDelay((u8 *)"   Smart Home");
    1b52:	8d e4       	ldi	r24, 0x4D	; 77
    1b54:	94 e0       	ldi	r25, 0x04	; 4
    1b56:	0e 94 67 14 	call	0x28ce	; 0x28ce <LCD_voidDisplayStringDelay>
    1b5a:	2f ef       	ldi	r18, 0xFF	; 255
    1b5c:	83 ed       	ldi	r24, 0xD3	; 211
    1b5e:	90 e3       	ldi	r25, 0x30	; 48
    1b60:	21 50       	subi	r18, 0x01	; 1
    1b62:	80 40       	sbci	r24, 0x00	; 0
    1b64:	90 40       	sbci	r25, 0x00	; 0
    1b66:	e1 f7       	brne	.-8      	; 0x1b60 <WelcomeScreenLocal+0x1c>
    1b68:	00 c0       	rjmp	.+0      	; 0x1b6a <WelcomeScreenLocal+0x26>
    1b6a:	00 00       	nop
    1b6c:	08 95       	ret

00001b6e <Display_Remotetemp>:
}

void Display_Remotetemp(void)
//function for getting temp value from temp sensor and displaying it for remote user
{
	ADC_voidGetDigitalValue(ADC_CHANNEL_0, &local_temp); 
    1b6e:	66 eb       	ldi	r22, 0xB6	; 182
    1b70:	74 e0       	ldi	r23, 0x04	; 4
    1b72:	80 e0       	ldi	r24, 0x00	; 0
    1b74:	0e 94 fd 15 	call	0x2bfa	; 0x2bfa <ADC_voidGetDigitalValue>
	sprintf(tempString, "Room Temp: %d c", local_temp);
    1b78:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <__data_end>
    1b7c:	1f 92       	push	r1
    1b7e:	8f 93       	push	r24
    1b80:	81 e6       	ldi	r24, 0x61	; 97
    1b82:	92 e0       	ldi	r25, 0x02	; 2
    1b84:	9f 93       	push	r25
    1b86:	8f 93       	push	r24
    1b88:	8c ed       	ldi	r24, 0xDC	; 220
    1b8a:	94 e0       	ldi	r25, 0x04	; 4
    1b8c:	9f 93       	push	r25
    1b8e:	8f 93       	push	r24
    1b90:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <sprintf>
	BL_voidTxString(tempString);
    1b94:	8c ed       	ldi	r24, 0xDC	; 220
    1b96:	94 e0       	ldi	r25, 0x04	; 4
    1b98:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
	BL_voidTxChar('\r');
    1b9c:	8d e0       	ldi	r24, 0x0D	; 13
    1b9e:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
}
    1ba2:	0f 90       	pop	r0
    1ba4:	0f 90       	pop	r0
    1ba6:	0f 90       	pop	r0
    1ba8:	0f 90       	pop	r0
    1baa:	0f 90       	pop	r0
    1bac:	0f 90       	pop	r0
    1bae:	08 95       	ret

00001bb0 <Idle_RemoteAction>:

void Idle_RemoteAction()
//this function is for the remote user interface to go to the idle function after 5 sec of inactivity
// tmr0 interrupt function for the remote user 
{ 
    BL_voidTxChar('\r');
    1bb0:	8d e0       	ldi	r24, 0x0D	; 13
    1bb2:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
	Display_Remotetemp();
    1bb6:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <Display_Remotetemp>
	BL_voidTxString("0-Go to Home");
    1bba:	8b e5       	ldi	r24, 0x5B	; 91
    1bbc:	94 e0       	ldi	r25, 0x04	; 4
    1bbe:	0e 94 b0 11 	call	0x2360	; 0x2360 <BL_voidTxString>
	BL_voidTxChar('\r');
    1bc2:	8d e0       	ldi	r24, 0x0D	; 13
    1bc4:	0e 94 a7 11 	call	0x234e	; 0x234e <BL_voidTxChar>
	BL_voidRxChar(&bluetooh_value);
    1bc8:	87 ec       	ldi	r24, 0xC7	; 199
    1bca:	94 e0       	ldi	r25, 0x04	; 4
    1bcc:	0e 94 aa 11 	call	0x2354	; 0x2354 <BL_voidRxChar>
    if (bluetooh_value == '0')
    1bd0:	80 91 c7 04 	lds	r24, 0x04C7	; 0x8004c7 <bluetooh_value>
    1bd4:	80 33       	cpi	r24, 0x30	; 48
    1bd6:	11 f4       	brne	.+4      	; 0x1bdc <Idle_RemoteAction+0x2c>
    {
        TMR0clear_flag();
    1bd8:	0e 94 7e 18 	call	0x30fc	; 0x30fc <TMR0clear_flag>
    1bdc:	08 95       	ret

00001bde <Display_temp>:
}

void Display_temp(void)
//function for getting temp value from temp sensor and displaying it for local user
{
	ADC_voidGetDigitalValue(ADC_CHANNEL_0, &local_temp);
    1bde:	66 eb       	ldi	r22, 0xB6	; 182
    1be0:	74 e0       	ldi	r23, 0x04	; 4
    1be2:	80 e0       	ldi	r24, 0x00	; 0
    1be4:	0e 94 fd 15 	call	0x2bfa	; 0x2bfa <ADC_voidGetDigitalValue>
	LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,11);
    1be8:	6b e0       	ldi	r22, 0x0B	; 11
    1bea:	81 e0       	ldi	r24, 0x01	; 1
    1bec:	0e 94 40 15 	call	0x2a80	; 0x2a80 <LCD_voidGoTOSpecificPosition>
	LCD_voidDisplayNumber(local_temp);
    1bf0:	60 91 b6 04 	lds	r22, 0x04B6	; 0x8004b6 <__data_end>
    1bf4:	70 e0       	ldi	r23, 0x00	; 0
    1bf6:	80 e0       	ldi	r24, 0x00	; 0
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	0e 94 86 14 	call	0x290c	; 0x290c <LCD_voidDisplayNumber>
    1bfe:	08 95       	ret

00001c00 <Idle_Action>:

void Idle_Action()
//this function is for the local user interface to go to the idle function after 5 sec of inactivity
// tmr0 interrupt function for the local user
{ 
    LCD_voidClear();
    1c00:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <LCD_voidClear>
	LCD_voidSendCommand(Write_FirstLine);
    1c04:	80 e8       	ldi	r24, 0x80	; 128
    1c06:	0e 94 83 13 	call	0x2706	; 0x2706 <LCD_voidSendCommand>
	LCD_voidDisplayString((u8 *)"Room Temp:   c");
    1c0a:	88 e6       	ldi	r24, 0x68	; 104
    1c0c:	94 e0       	ldi	r25, 0x04	; 4
    1c0e:	0e 94 51 14 	call	0x28a2	; 0x28a2 <LCD_voidDisplayString>
	Display_temp();
    1c12:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <Display_temp>
	LCD_voidSendCommand(Write_SecondLine);
    1c16:	80 ec       	ldi	r24, 0xC0	; 192
    1c18:	0e 94 83 13 	call	0x2706	; 0x2706 <LCD_voidSendCommand>
	LCD_voidDisplayString("0-Go to Home");
    1c1c:	8b e5       	ldi	r24, 0x5B	; 91
    1c1e:	94 e0       	ldi	r25, 0x04	; 4
    1c20:	0e 94 51 14 	call	0x28a2	; 0x28a2 <LCD_voidDisplayString>
	
    while (local_KPDIdleValue == KPD_Not_Pressed)
    1c24:	06 c0       	rjmp	.+12     	; 0x1c32 <Idle_Action+0x32>
    {
        KPD_voidGetValue(&local_KPDIdleValue);
    1c26:	81 e6       	ldi	r24, 0x61	; 97
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	0e 94 9f 12 	call	0x253e	; 0x253e <KPD_voidGetValue>
		Display_temp();
    1c2e:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <Display_temp>
	LCD_voidDisplayString((u8 *)"Room Temp:   c");
	Display_temp();
	LCD_voidSendCommand(Write_SecondLine);
	LCD_voidDisplayString("0-Go to Home");
	
    while (local_KPDIdleValue == KPD_Not_Pressed)
    1c32:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <local_KPDIdleValue>
    1c36:	8f 3f       	cpi	r24, 0xFF	; 255
    1c38:	b1 f3       	breq	.-20     	; 0x1c26 <Idle_Action+0x26>
        KPD_voidGetValue(&local_KPDIdleValue);
		Display_temp();

        
    }
    if (local_KPDIdleValue == '0')
    1c3a:	80 33       	cpi	r24, 0x30	; 48
    1c3c:	11 f4       	brne	.+4      	; 0x1c42 <Idle_Action+0x42>
    {
        LCD_voidClear();
    1c3e:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <LCD_voidClear>
    }
    TMR0clear_flag();
    1c42:	0e 94 7e 18 	call	0x30fc	; 0x30fc <TMR0clear_flag>
    LCD_voidClear();
    1c46:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <LCD_voidClear>
    1c4a:	08 95       	ret

00001c4c <Reset_AllKPDValues>:
}

void Reset_AllKPDValues()
//function for reseting all KPD values for new values to be entered
{
    Local_copyKPDValue = KPD_Not_Pressed;
    1c4c:	8f ef       	ldi	r24, 0xFF	; 255
    1c4e:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <Local_copyKPDValue>
    local_lightNum = KPD_Not_Pressed;
    1c52:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <local_lightNum>
    local_lightStatus = KPD_Not_Pressed;
    1c56:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
	local_KPDIdleValue = KPD_Not_Pressed;
    1c5a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <local_KPDIdleValue>
    1c5e:	08 95       	ret

00001c60 <KPD_Interface_Localuser>:

void KPD_Interface_Localuser(void)
{
	//this is the local user interface to control the smart home all user allowed functions using lcd to display options and KPD for interaction
		//reseting all KPD variables for new values to be entered
        Reset_AllKPDValues();
    1c60:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <Reset_AllKPDValues>
		2-start tmr0 before busy wait for KPD to avoid starting the tmr0 counter when the lcd didnt finish printing the options
		3-after the wihle loop is finished make sure to stop the tmr0 to avoid going to the idle function
		*/
	
		//setting the TRM0 ctc interrupt function
        TMR0_SetCallBackCTC(&Idle_Action);
    1c64:	80 e0       	ldi	r24, 0x00	; 0
    1c66:	9e e0       	ldi	r25, 0x0E	; 14
    1c68:	0e 94 77 18 	call	0x30ee	; 0x30ee <TMR0_SetCallBackCTC>
		//starting the timer0
        TMR0_voidStart();
    1c6c:	0e 94 5f 18 	call	0x30be	; 0x30be <TMR0_voidStart>
        LCD_voidClear();
    1c70:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <LCD_voidClear>
        LCD_voidDisplayString((u8 *)"1-AC 2-light");
    1c74:	8d e0       	ldi	r24, 0x0D	; 13
    1c76:	92 e0       	ldi	r25, 0x02	; 2
    1c78:	0e 94 51 14 	call	0x28a2	; 0x28a2 <LCD_voidDisplayString>
        LCD_voidSendCommand(Write_SecondLine);
    1c7c:	80 ec       	ldi	r24, 0xC0	; 192
    1c7e:	0e 94 83 13 	call	0x2706	; 0x2706 <LCD_voidSendCommand>
        LCD_voidDisplayString((u8 *)"3-temp 6-LogOut");
    1c82:	87 e7       	ldi	r24, 0x77	; 119
    1c84:	94 e0       	ldi	r25, 0x04	; 4
    1c86:	0e 94 51 14 	call	0x28a2	; 0x28a2 <LCD_voidDisplayString>
        Reset_AllKPDValues();
    1c8a:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <Reset_AllKPDValues>

        // busy wait for KPD to get the value. timr0 is still counting for the 5 sec idle to go to interrupt function
        while (Local_copyKPDValue == KPD_Not_Pressed)
    1c8e:	0c c0       	rjmp	.+24     	; 0x1ca8 <KPD_Interface_Localuser+0x48>
        {
            if (local_KPDIdleValue == '0')
    1c90:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <local_KPDIdleValue>
    1c94:	80 33       	cpi	r24, 0x30	; 48
    1c96:	21 f4       	brne	.+8      	; 0x1ca0 <KPD_Interface_Localuser+0x40>
            {
                local_KPDIdleValue = KPD_Not_Pressed;
    1c98:	8f ef       	ldi	r24, 0xFF	; 255
    1c9a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <local_KPDIdleValue>
                break;
    1c9e:	08 c0       	rjmp	.+16     	; 0x1cb0 <KPD_Interface_Localuser+0x50>
            }
            else
            {
                KPD_voidGetValue(&Local_copyKPDValue);
    1ca0:	84 e6       	ldi	r24, 0x64	; 100
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	0e 94 9f 12 	call	0x253e	; 0x253e <KPD_voidGetValue>
        LCD_voidSendCommand(Write_SecondLine);
        LCD_voidDisplayString((u8 *)"3-temp 6-LogOut");
        Reset_AllKPDValues();

        // busy wait for KPD to get the value. timr0 is still counting for the 5 sec idle to go to interrupt function
        while (Local_copyKPDValue == KPD_Not_Pressed)
    1ca8:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <Local_copyKPDValue>
    1cac:	8f 3f       	cpi	r24, 0xFF	; 255
    1cae:	81 f3       	breq	.-32     	; 0x1c90 <KPD_Interface_Localuser+0x30>
            {
                KPD_voidGetValue(&Local_copyKPDValue);
            }
        }
		//stopping timer after reciving the value to avoid tmr0 from going to idle function
        TMR0_voidStop();
    1cb0:	0e 94 6d 18 	call	0x30da	; 0x30da <TMR0_voidStop>
        switch (Local_copyKPDValue)
    1cb4:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <Local_copyKPDValue>
    1cb8:	82 33       	cpi	r24, 0x32	; 50
    1cba:	09 f4       	brne	.+2      	; 0x1cbe <KPD_Interface_Localuser+0x5e>
    1cbc:	4a c0       	rjmp	.+148    	; 0x1d52 <KPD_Interface_Localuser+0xf2>
    1cbe:	18 f4       	brcc	.+6      	; 0x1cc6 <KPD_Interface_Localuser+0x66>
    1cc0:	81 33       	cpi	r24, 0x31	; 49
    1cc2:	41 f0       	breq	.+16     	; 0x1cd4 <KPD_Interface_Localuser+0x74>
    1cc4:	08 95       	ret
    1cc6:	83 33       	cpi	r24, 0x33	; 51
    1cc8:	09 f4       	brne	.+2      	; 0x1ccc <KPD_Interface_Localuser+0x6c>
    1cca:	07 c3       	rjmp	.+1550   	; 0x22da <KPD_Interface_Localuser+0x67a>
    1ccc:	86 33       	cpi	r24, 0x36	; 54
    1cce:	09 f4       	brne	.+2      	; 0x1cd2 <KPD_Interface_Localuser+0x72>
    1cd0:	37 c3       	rjmp	.+1646   	; 0x2340 <KPD_Interface_Localuser+0x6e0>
    1cd2:	08 95       	ret
        {
        case ('1'):

            LCD_voidClear();
    1cd4:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <LCD_voidClear>
            LCD_voidDisplayStringDelay((u8 *)"AC Is On/off 0-H");
    1cd8:	87 e8       	ldi	r24, 0x87	; 135
    1cda:	94 e0       	ldi	r25, 0x04	; 4
    1cdc:	0e 94 67 14 	call	0x28ce	; 0x28ce <LCD_voidDisplayStringDelay>
            LCD_voidSendCommand(Write_SecondLine);
    1ce0:	80 ec       	ldi	r24, 0xC0	; 192
    1ce2:	0e 94 83 13 	call	0x2706	; 0x2706 <LCD_voidSendCommand>
			ADC_voidGetDigitalValue(ADC_CHANNEL_0, &local_temp);
    1ce6:	66 eb       	ldi	r22, 0xB6	; 182
    1ce8:	74 e0       	ldi	r23, 0x04	; 4
    1cea:	80 e0       	ldi	r24, 0x00	; 0
    1cec:	0e 94 fd 15 	call	0x2bfa	; 0x2bfa <ADC_voidGetDigitalValue>
            LCD_voidDisplayStringDelay((u8 *)"Room Temp:  c");
    1cf0:	88 e9       	ldi	r24, 0x98	; 152
    1cf2:	94 e0       	ldi	r25, 0x04	; 4
    1cf4:	0e 94 67 14 	call	0x28ce	; 0x28ce <LCD_voidDisplayStringDelay>
			LCD_voidGoTOSpecificPosition(LCD_LINE_TWO, 12);
    1cf8:	6c e0       	ldi	r22, 0x0C	; 12
    1cfa:	82 e0       	ldi	r24, 0x02	; 2
    1cfc:	0e 94 40 15 	call	0x2a80	; 0x2a80 <LCD_voidGoTOSpecificPosition>
			LCD_voidDisplayNumber(local_temp);
    1d00:	60 91 b6 04 	lds	r22, 0x04B6	; 0x8004b6 <__data_end>
    1d04:	70 e0       	ldi	r23, 0x00	; 0
    1d06:	80 e0       	ldi	r24, 0x00	; 0
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	0e 94 86 14 	call	0x290c	; 0x290c <LCD_voidDisplayNumber>
			while (local_KPDSelectValue == KPD_Not_Pressed)
    1d0e:	1c c0       	rjmp	.+56     	; 0x1d48 <KPD_Interface_Localuser+0xe8>
			{
				KPD_voidGetValue(&local_KPDSelectValue);
    1d10:	80 e6       	ldi	r24, 0x60	; 96
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	0e 94 9f 12 	call	0x253e	; 0x253e <KPD_voidGetValue>
				ADC_voidGetDigitalValue(ADC_CHANNEL_0, &local_temp);
    1d18:	66 eb       	ldi	r22, 0xB6	; 182
    1d1a:	74 e0       	ldi	r23, 0x04	; 4
    1d1c:	80 e0       	ldi	r24, 0x00	; 0
    1d1e:	0e 94 fd 15 	call	0x2bfa	; 0x2bfa <ADC_voidGetDigitalValue>
				LCD_voidGoTOSpecificPosition(LCD_LINE_TWO, 12);
    1d22:	6c e0       	ldi	r22, 0x0C	; 12
    1d24:	82 e0       	ldi	r24, 0x02	; 2
    1d26:	0e 94 40 15 	call	0x2a80	; 0x2a80 <LCD_voidGoTOSpecificPosition>
				LCD_voidDisplayNumber(local_temp);
    1d2a:	60 91 b6 04 	lds	r22, 0x04B6	; 0x8004b6 <__data_end>
    1d2e:	70 e0       	ldi	r23, 0x00	; 0
    1d30:	80 e0       	ldi	r24, 0x00	; 0
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	0e 94 86 14 	call	0x290c	; 0x290c <LCD_voidDisplayNumber>
				if (local_KPDSelectValue == '0')
    1d38:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    1d3c:	80 33       	cpi	r24, 0x30	; 48
    1d3e:	21 f4       	brne	.+8      	; 0x1d48 <KPD_Interface_Localuser+0xe8>
				{
					local_KPDSelectValue = KPD_Not_Pressed;
    1d40:	8f ef       	ldi	r24, 0xFF	; 255
    1d42:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
					break;
    1d46:	08 95       	ret
            LCD_voidSendCommand(Write_SecondLine);
			ADC_voidGetDigitalValue(ADC_CHANNEL_0, &local_temp);
            LCD_voidDisplayStringDelay((u8 *)"Room Temp:  c");
			LCD_voidGoTOSpecificPosition(LCD_LINE_TWO, 12);
			LCD_voidDisplayNumber(local_temp);
			while (local_KPDSelectValue == KPD_Not_Pressed)
    1d48:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    1d4c:	8f 3f       	cpi	r24, 0xFF	; 255
    1d4e:	01 f3       	breq	.-64     	; 0x1d10 <KPD_Interface_Localuser+0xb0>
    1d50:	08 95       	ret
            break;
			

        case ('2'):

            LCD_voidClear();
    1d52:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <LCD_voidClear>
            LCD_voidDisplayStringDelay((u8 *)"Choose light to");
    1d56:	8a ea       	ldi	r24, 0xAA	; 170
    1d58:	92 e0       	ldi	r25, 0x02	; 2
    1d5a:	0e 94 67 14 	call	0x28ce	; 0x28ce <LCD_voidDisplayStringDelay>
            LCD_voidSendCommand(Write_SecondLine);
    1d5e:	80 ec       	ldi	r24, 0xC0	; 192
    1d60:	0e 94 83 13 	call	0x2706	; 0x2706 <LCD_voidSendCommand>
            LCD_voidDisplayStringDelay((u8 *)"control(1-6)");
    1d64:	8a eb       	ldi	r24, 0xBA	; 186
    1d66:	92 e0       	ldi	r25, 0x02	; 2
    1d68:	0e 94 67 14 	call	0x28ce	; 0x28ce <LCD_voidDisplayStringDelay>

            TMR0_SetCallBackCTC(&Idle_Action);
    1d6c:	80 e0       	ldi	r24, 0x00	; 0
    1d6e:	9e e0       	ldi	r25, 0x0E	; 14
    1d70:	0e 94 77 18 	call	0x30ee	; 0x30ee <TMR0_SetCallBackCTC>
            TMR0_voidStart();
    1d74:	0e 94 5f 18 	call	0x30be	; 0x30be <TMR0_voidStart>
            // busy wait for KPD
            while (local_lightNum == KPD_Not_Pressed)
    1d78:	0c c0       	rjmp	.+24     	; 0x1d92 <KPD_Interface_Localuser+0x132>
            {
                KPD_voidGetValue(&local_lightNum);
    1d7a:	83 e6       	ldi	r24, 0x63	; 99
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	0e 94 9f 12 	call	0x253e	; 0x253e <KPD_voidGetValue>
                if(local_KPDIdleValue=='0')
    1d82:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <local_KPDIdleValue>
    1d86:	80 33       	cpi	r24, 0x30	; 48
    1d88:	21 f4       	brne	.+8      	; 0x1d92 <KPD_Interface_Localuser+0x132>
                {
                    local_KPDIdleValue=KPD_Not_Pressed;
    1d8a:	8f ef       	ldi	r24, 0xFF	; 255
    1d8c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <local_KPDIdleValue>
                    break;
    1d90:	04 c0       	rjmp	.+8      	; 0x1d9a <KPD_Interface_Localuser+0x13a>
            LCD_voidDisplayStringDelay((u8 *)"control(1-6)");

            TMR0_SetCallBackCTC(&Idle_Action);
            TMR0_voidStart();
            // busy wait for KPD
            while (local_lightNum == KPD_Not_Pressed)
    1d92:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <local_lightNum>
    1d96:	8f 3f       	cpi	r24, 0xFF	; 255
    1d98:	81 f3       	breq	.-32     	; 0x1d7a <KPD_Interface_Localuser+0x11a>
                {
                    local_KPDIdleValue=KPD_Not_Pressed;
                    break;
                }
            }
            TMR0_voidStop();
    1d9a:	0e 94 6d 18 	call	0x30da	; 0x30da <TMR0_voidStop>
            switch (local_lightNum)
    1d9e:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <local_lightNum>
    1da2:	83 33       	cpi	r24, 0x33	; 51
    1da4:	09 f4       	brne	.+2      	; 0x1da8 <KPD_Interface_Localuser+0x148>
    1da6:	a6 c0       	rjmp	.+332    	; 0x1ef4 <KPD_Interface_Localuser+0x294>
    1da8:	30 f4       	brcc	.+12     	; 0x1db6 <KPD_Interface_Localuser+0x156>
    1daa:	81 33       	cpi	r24, 0x31	; 49
    1dac:	69 f0       	breq	.+26     	; 0x1dc8 <KPD_Interface_Localuser+0x168>
    1dae:	82 33       	cpi	r24, 0x32	; 50
    1db0:	09 f4       	brne	.+2      	; 0x1db4 <KPD_Interface_Localuser+0x154>
    1db2:	54 c0       	rjmp	.+168    	; 0x1e5c <KPD_Interface_Localuser+0x1fc>
    1db4:	08 95       	ret
    1db6:	85 33       	cpi	r24, 0x35	; 53
    1db8:	09 f4       	brne	.+2      	; 0x1dbc <KPD_Interface_Localuser+0x15c>
    1dba:	34 c1       	rjmp	.+616    	; 0x2024 <KPD_Interface_Localuser+0x3c4>
    1dbc:	08 f4       	brcc	.+2      	; 0x1dc0 <KPD_Interface_Localuser+0x160>
    1dbe:	e6 c0       	rjmp	.+460    	; 0x1f8c <KPD_Interface_Localuser+0x32c>
    1dc0:	86 33       	cpi	r24, 0x36	; 54
    1dc2:	09 f4       	brne	.+2      	; 0x1dc6 <KPD_Interface_Localuser+0x166>
    1dc4:	7b c1       	rjmp	.+758    	; 0x20bc <KPD_Interface_Localuser+0x45c>
    1dc6:	08 95       	ret
            {
            case ('1'):

                DIO_voidGetPinValue(DIO_PORTD, DIO_PIN3, &led_status);
    1dc8:	48 eb       	ldi	r20, 0xB8	; 184
    1dca:	54 e0       	ldi	r21, 0x04	; 4
    1dcc:	63 e0       	ldi	r22, 0x03	; 3
    1dce:	83 e0       	ldi	r24, 0x03	; 3
    1dd0:	0e 94 18 17 	call	0x2e30	; 0x2e30 <DIO_voidGetPinValue>
                LCD_voidClear();
    1dd4:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <LCD_voidClear>
                if (led_status == 1)
    1dd8:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <led_status>
    1ddc:	81 30       	cpi	r24, 0x01	; 1
    1dde:	f1 f4       	brne	.+60     	; 0x1e1c <KPD_Interface_Localuser+0x1bc>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 1 is On");
    1de0:	87 ec       	ldi	r24, 0xC7	; 199
    1de2:	92 e0       	ldi	r25, 0x02	; 2
    1de4:	0e 94 67 14 	call	0x28ce	; 0x28ce <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
    1de8:	80 ec       	ldi	r24, 0xC0	; 192
    1dea:	0e 94 83 13 	call	0x2706	; 0x2706 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
    1dee:	85 ed       	ldi	r24, 0xD5	; 213
    1df0:	92 e0       	ldi	r25, 0x02	; 2
    1df2:	0e 94 67 14 	call	0x28ce	; 0x28ce <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
    1df6:	04 c0       	rjmp	.+8      	; 0x1e00 <KPD_Interface_Localuser+0x1a0>
                    {
                        KPD_voidGetValue(&local_lightStatus);
    1df8:	82 e6       	ldi	r24, 0x62	; 98
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	0e 94 9f 12 	call	0x253e	; 0x253e <KPD_voidGetValue>
                if (led_status == 1)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 1 is On");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
                    while (local_lightStatus == KPD_Not_Pressed)
    1e00:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
    1e04:	8f 3f       	cpi	r24, 0xFF	; 255
    1e06:	c1 f3       	breq	.-16     	; 0x1df8 <KPD_Interface_Localuser+0x198>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }
                    if (local_lightStatus == '1')
    1e08:	81 33       	cpi	r24, 0x31	; 49
    1e0a:	29 f4       	brne	.+10     	; 0x1e16 <KPD_Interface_Localuser+0x1b6>
                    {
                        LED_voidOff(DIO_PORTD, DIO_PIN3, LED_FORWARD_CONNECTION);
    1e0c:	41 e0       	ldi	r20, 0x01	; 1
    1e0e:	63 e0       	ldi	r22, 0x03	; 3
    1e10:	83 e0       	ldi	r24, 0x03	; 3
    1e12:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <LED_voidOff>
                    }
                    Reset_AllKPDValues();
    1e16:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <Reset_AllKPDValues>
					break;
    1e1a:	08 95       	ret
                }
                else if (led_status == 0)
    1e1c:	81 11       	cpse	r24, r1
    1e1e:	93 c2       	rjmp	.+1318   	; 0x2346 <KPD_Interface_Localuser+0x6e6>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 1 is OFF");
    1e20:	86 ee       	ldi	r24, 0xE6	; 230
    1e22:	92 e0       	ldi	r25, 0x02	; 2
    1e24:	0e 94 67 14 	call	0x28ce	; 0x28ce <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
    1e28:	80 ec       	ldi	r24, 0xC0	; 192
    1e2a:	0e 94 83 13 	call	0x2706	; 0x2706 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
    1e2e:	85 ef       	ldi	r24, 0xF5	; 245
    1e30:	92 e0       	ldi	r25, 0x02	; 2
    1e32:	0e 94 67 14 	call	0x28ce	; 0x28ce <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
    1e36:	04 c0       	rjmp	.+8      	; 0x1e40 <KPD_Interface_Localuser+0x1e0>
                    {
                        KPD_voidGetValue(&local_lightStatus);
    1e38:	82 e6       	ldi	r24, 0x62	; 98
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	0e 94 9f 12 	call	0x253e	; 0x253e <KPD_voidGetValue>
                else if (led_status == 0)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 1 is OFF");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
                    while (local_lightStatus == KPD_Not_Pressed)
    1e40:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
    1e44:	8f 3f       	cpi	r24, 0xFF	; 255
    1e46:	c1 f3       	breq	.-16     	; 0x1e38 <KPD_Interface_Localuser+0x1d8>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }
                    if (local_lightStatus == '1')
    1e48:	81 33       	cpi	r24, 0x31	; 49
    1e4a:	29 f4       	brne	.+10     	; 0x1e56 <KPD_Interface_Localuser+0x1f6>
                    {
                        LED_voidOn(DIO_PORTD, DIO_PIN3, LED_FORWARD_CONNECTION);
    1e4c:	41 e0       	ldi	r20, 0x01	; 1
    1e4e:	63 e0       	ldi	r22, 0x03	; 3
    1e50:	83 e0       	ldi	r24, 0x03	; 3
    1e52:	0e 94 6f 15 	call	0x2ade	; 0x2ade <LED_voidOn>
                    }
                    Reset_AllKPDValues();
    1e56:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <Reset_AllKPDValues>
    1e5a:	08 95       	ret
                }
                break;

            case ('2'):

                DIO_voidGetPinValue(DIO_PORTD, DIO_PIN4, &led_status);
    1e5c:	48 eb       	ldi	r20, 0xB8	; 184
    1e5e:	54 e0       	ldi	r21, 0x04	; 4
    1e60:	64 e0       	ldi	r22, 0x04	; 4
    1e62:	83 e0       	ldi	r24, 0x03	; 3
    1e64:	0e 94 18 17 	call	0x2e30	; 0x2e30 <DIO_voidGetPinValue>
                LCD_voidClear();
    1e68:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <LCD_voidClear>
                if (led_status == 1)
    1e6c:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <led_status>
    1e70:	81 30       	cpi	r24, 0x01	; 1
    1e72:	f9 f4       	brne	.+62     	; 0x1eb2 <KPD_Interface_Localuser+0x252>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 2 is On");
    1e74:	85 e0       	ldi	r24, 0x05	; 5
    1e76:	93 e0       	ldi	r25, 0x03	; 3
    1e78:	0e 94 67 14 	call	0x28ce	; 0x28ce <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
    1e7c:	80 ec       	ldi	r24, 0xC0	; 192
    1e7e:	0e 94 83 13 	call	0x2706	; 0x2706 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
    1e82:	85 ed       	ldi	r24, 0xD5	; 213
    1e84:	92 e0       	ldi	r25, 0x02	; 2
    1e86:	0e 94 67 14 	call	0x28ce	; 0x28ce <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
    1e8a:	04 c0       	rjmp	.+8      	; 0x1e94 <KPD_Interface_Localuser+0x234>
                    {
                        KPD_voidGetValue(&local_lightStatus);
    1e8c:	82 e6       	ldi	r24, 0x62	; 98
    1e8e:	90 e0       	ldi	r25, 0x00	; 0
    1e90:	0e 94 9f 12 	call	0x253e	; 0x253e <KPD_voidGetValue>
                if (led_status == 1)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 2 is On");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
                    while (local_lightStatus == KPD_Not_Pressed)
    1e94:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
    1e98:	8f 3f       	cpi	r24, 0xFF	; 255
    1e9a:	c1 f3       	breq	.-16     	; 0x1e8c <KPD_Interface_Localuser+0x22c>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }
                    if (local_lightStatus == '1')
    1e9c:	81 33       	cpi	r24, 0x31	; 49
    1e9e:	29 f4       	brne	.+10     	; 0x1eaa <KPD_Interface_Localuser+0x24a>
                    {
                        LED_voidOff(DIO_PORTD, DIO_PIN4, LED_FORWARD_CONNECTION);
    1ea0:	41 e0       	ldi	r20, 0x01	; 1
    1ea2:	64 e0       	ldi	r22, 0x04	; 4
    1ea4:	83 e0       	ldi	r24, 0x03	; 3
    1ea6:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <LED_voidOff>
                    }
                    local_lightStatus = KPD_Not_Pressed;
    1eaa:	8f ef       	ldi	r24, 0xFF	; 255
    1eac:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
    1eb0:	08 95       	ret
                }
                else if (led_status == 0)
    1eb2:	81 11       	cpse	r24, r1
    1eb4:	48 c2       	rjmp	.+1168   	; 0x2346 <KPD_Interface_Localuser+0x6e6>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 2 is OFF");
    1eb6:	83 e1       	ldi	r24, 0x13	; 19
    1eb8:	93 e0       	ldi	r25, 0x03	; 3
    1eba:	0e 94 67 14 	call	0x28ce	; 0x28ce <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
    1ebe:	80 ec       	ldi	r24, 0xC0	; 192
    1ec0:	0e 94 83 13 	call	0x2706	; 0x2706 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
    1ec4:	85 ef       	ldi	r24, 0xF5	; 245
    1ec6:	92 e0       	ldi	r25, 0x02	; 2
    1ec8:	0e 94 67 14 	call	0x28ce	; 0x28ce <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
    1ecc:	04 c0       	rjmp	.+8      	; 0x1ed6 <KPD_Interface_Localuser+0x276>
                    {
                        KPD_voidGetValue(&local_lightStatus);
    1ece:	82 e6       	ldi	r24, 0x62	; 98
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	0e 94 9f 12 	call	0x253e	; 0x253e <KPD_voidGetValue>
                else if (led_status == 0)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 2 is OFF");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
                    while (local_lightStatus == KPD_Not_Pressed)
    1ed6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
    1eda:	8f 3f       	cpi	r24, 0xFF	; 255
    1edc:	c1 f3       	breq	.-16     	; 0x1ece <KPD_Interface_Localuser+0x26e>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }
                    if (local_lightStatus == '1')
    1ede:	81 33       	cpi	r24, 0x31	; 49
    1ee0:	29 f4       	brne	.+10     	; 0x1eec <KPD_Interface_Localuser+0x28c>
                    {
                        LED_voidOn(DIO_PORTD, DIO_PIN4, LED_FORWARD_CONNECTION);
    1ee2:	41 e0       	ldi	r20, 0x01	; 1
    1ee4:	64 e0       	ldi	r22, 0x04	; 4
    1ee6:	83 e0       	ldi	r24, 0x03	; 3
    1ee8:	0e 94 6f 15 	call	0x2ade	; 0x2ade <LED_voidOn>
                    }
                    local_lightStatus = KPD_Not_Pressed;
    1eec:	8f ef       	ldi	r24, 0xFF	; 255
    1eee:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
    1ef2:	08 95       	ret
                }
                break;

            case ('3'):

                DIO_voidGetPinValue(DIO_PORTA, DIO_PIN2, &led_status);
    1ef4:	48 eb       	ldi	r20, 0xB8	; 184
    1ef6:	54 e0       	ldi	r21, 0x04	; 4
    1ef8:	62 e0       	ldi	r22, 0x02	; 2
    1efa:	80 e0       	ldi	r24, 0x00	; 0
    1efc:	0e 94 18 17 	call	0x2e30	; 0x2e30 <DIO_voidGetPinValue>
                LCD_voidClear();
    1f00:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <LCD_voidClear>
                if (led_status == 1)
    1f04:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <led_status>
    1f08:	81 30       	cpi	r24, 0x01	; 1
    1f0a:	f9 f4       	brne	.+62     	; 0x1f4a <KPD_Interface_Localuser+0x2ea>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 3 is On");
    1f0c:	82 e2       	ldi	r24, 0x22	; 34
    1f0e:	93 e0       	ldi	r25, 0x03	; 3
    1f10:	0e 94 67 14 	call	0x28ce	; 0x28ce <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
    1f14:	80 ec       	ldi	r24, 0xC0	; 192
    1f16:	0e 94 83 13 	call	0x2706	; 0x2706 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
    1f1a:	85 ed       	ldi	r24, 0xD5	; 213
    1f1c:	92 e0       	ldi	r25, 0x02	; 2
    1f1e:	0e 94 67 14 	call	0x28ce	; 0x28ce <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
    1f22:	04 c0       	rjmp	.+8      	; 0x1f2c <KPD_Interface_Localuser+0x2cc>
                    {
                        KPD_voidGetValue(&local_lightStatus);
    1f24:	82 e6       	ldi	r24, 0x62	; 98
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	0e 94 9f 12 	call	0x253e	; 0x253e <KPD_voidGetValue>
                if (led_status == 1)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 3 is On");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
                    while (local_lightStatus == KPD_Not_Pressed)
    1f2c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
    1f30:	8f 3f       	cpi	r24, 0xFF	; 255
    1f32:	c1 f3       	breq	.-16     	; 0x1f24 <KPD_Interface_Localuser+0x2c4>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
    1f34:	81 33       	cpi	r24, 0x31	; 49
    1f36:	29 f4       	brne	.+10     	; 0x1f42 <KPD_Interface_Localuser+0x2e2>
                    {
                        LED_voidOff(DIO_PORTA, DIO_PIN2, LED_FORWARD_CONNECTION);
    1f38:	41 e0       	ldi	r20, 0x01	; 1
    1f3a:	62 e0       	ldi	r22, 0x02	; 2
    1f3c:	80 e0       	ldi	r24, 0x00	; 0
    1f3e:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <LED_voidOff>
                    }
                    local_lightStatus = KPD_Not_Pressed;
    1f42:	8f ef       	ldi	r24, 0xFF	; 255
    1f44:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
    1f48:	08 95       	ret
                }
                else if (led_status == 0)
    1f4a:	81 11       	cpse	r24, r1
    1f4c:	fc c1       	rjmp	.+1016   	; 0x2346 <KPD_Interface_Localuser+0x6e6>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 3 is OFF");
    1f4e:	80 e3       	ldi	r24, 0x30	; 48
    1f50:	93 e0       	ldi	r25, 0x03	; 3
    1f52:	0e 94 67 14 	call	0x28ce	; 0x28ce <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
    1f56:	80 ec       	ldi	r24, 0xC0	; 192
    1f58:	0e 94 83 13 	call	0x2706	; 0x2706 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
    1f5c:	85 ef       	ldi	r24, 0xF5	; 245
    1f5e:	92 e0       	ldi	r25, 0x02	; 2
    1f60:	0e 94 67 14 	call	0x28ce	; 0x28ce <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
    1f64:	04 c0       	rjmp	.+8      	; 0x1f6e <KPD_Interface_Localuser+0x30e>
                    {
                        KPD_voidGetValue(&local_lightStatus);
    1f66:	82 e6       	ldi	r24, 0x62	; 98
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	0e 94 9f 12 	call	0x253e	; 0x253e <KPD_voidGetValue>
                else if (led_status == 0)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 3 is OFF");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
                    while (local_lightStatus == KPD_Not_Pressed)
    1f6e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
    1f72:	8f 3f       	cpi	r24, 0xFF	; 255
    1f74:	c1 f3       	breq	.-16     	; 0x1f66 <KPD_Interface_Localuser+0x306>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
    1f76:	81 33       	cpi	r24, 0x31	; 49
    1f78:	29 f4       	brne	.+10     	; 0x1f84 <KPD_Interface_Localuser+0x324>
                    {
                        LED_voidOn(DIO_PORTA, DIO_PIN2, LED_FORWARD_CONNECTION);
    1f7a:	41 e0       	ldi	r20, 0x01	; 1
    1f7c:	62 e0       	ldi	r22, 0x02	; 2
    1f7e:	80 e0       	ldi	r24, 0x00	; 0
    1f80:	0e 94 6f 15 	call	0x2ade	; 0x2ade <LED_voidOn>
                    }
                    local_lightStatus = KPD_Not_Pressed;
    1f84:	8f ef       	ldi	r24, 0xFF	; 255
    1f86:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
    1f8a:	08 95       	ret
                }
                break;

            case ('4'):

                DIO_voidGetPinValue(DIO_PORTA, DIO_PIN3, &led_status);
    1f8c:	48 eb       	ldi	r20, 0xB8	; 184
    1f8e:	54 e0       	ldi	r21, 0x04	; 4
    1f90:	63 e0       	ldi	r22, 0x03	; 3
    1f92:	80 e0       	ldi	r24, 0x00	; 0
    1f94:	0e 94 18 17 	call	0x2e30	; 0x2e30 <DIO_voidGetPinValue>
                LCD_voidClear();
    1f98:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <LCD_voidClear>
                if (led_status == 1)
    1f9c:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <led_status>
    1fa0:	81 30       	cpi	r24, 0x01	; 1
    1fa2:	f9 f4       	brne	.+62     	; 0x1fe2 <KPD_Interface_Localuser+0x382>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 4 is On");
    1fa4:	8f e3       	ldi	r24, 0x3F	; 63
    1fa6:	93 e0       	ldi	r25, 0x03	; 3
    1fa8:	0e 94 67 14 	call	0x28ce	; 0x28ce <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
    1fac:	80 ec       	ldi	r24, 0xC0	; 192
    1fae:	0e 94 83 13 	call	0x2706	; 0x2706 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
    1fb2:	85 ed       	ldi	r24, 0xD5	; 213
    1fb4:	92 e0       	ldi	r25, 0x02	; 2
    1fb6:	0e 94 67 14 	call	0x28ce	; 0x28ce <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
    1fba:	04 c0       	rjmp	.+8      	; 0x1fc4 <KPD_Interface_Localuser+0x364>
                    {
                        KPD_voidGetValue(&local_lightStatus);
    1fbc:	82 e6       	ldi	r24, 0x62	; 98
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	0e 94 9f 12 	call	0x253e	; 0x253e <KPD_voidGetValue>
                if (led_status == 1)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 4 is On");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
                    while (local_lightStatus == KPD_Not_Pressed)
    1fc4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
    1fc8:	8f 3f       	cpi	r24, 0xFF	; 255
    1fca:	c1 f3       	breq	.-16     	; 0x1fbc <KPD_Interface_Localuser+0x35c>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
    1fcc:	81 33       	cpi	r24, 0x31	; 49
    1fce:	29 f4       	brne	.+10     	; 0x1fda <KPD_Interface_Localuser+0x37a>
                    {
                        LED_voidOff(DIO_PORTA, DIO_PIN3, LED_FORWARD_CONNECTION);
    1fd0:	41 e0       	ldi	r20, 0x01	; 1
    1fd2:	63 e0       	ldi	r22, 0x03	; 3
    1fd4:	80 e0       	ldi	r24, 0x00	; 0
    1fd6:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <LED_voidOff>
                    }
                    local_lightStatus = KPD_Not_Pressed;
    1fda:	8f ef       	ldi	r24, 0xFF	; 255
    1fdc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
    1fe0:	08 95       	ret
                }
                else if (led_status == 0)
    1fe2:	81 11       	cpse	r24, r1
    1fe4:	b0 c1       	rjmp	.+864    	; 0x2346 <KPD_Interface_Localuser+0x6e6>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 4 is OFF");
    1fe6:	8d e4       	ldi	r24, 0x4D	; 77
    1fe8:	93 e0       	ldi	r25, 0x03	; 3
    1fea:	0e 94 67 14 	call	0x28ce	; 0x28ce <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
    1fee:	80 ec       	ldi	r24, 0xC0	; 192
    1ff0:	0e 94 83 13 	call	0x2706	; 0x2706 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
    1ff4:	85 ef       	ldi	r24, 0xF5	; 245
    1ff6:	92 e0       	ldi	r25, 0x02	; 2
    1ff8:	0e 94 67 14 	call	0x28ce	; 0x28ce <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
    1ffc:	04 c0       	rjmp	.+8      	; 0x2006 <KPD_Interface_Localuser+0x3a6>
                    {
                        KPD_voidGetValue(&local_lightStatus);
    1ffe:	82 e6       	ldi	r24, 0x62	; 98
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	0e 94 9f 12 	call	0x253e	; 0x253e <KPD_voidGetValue>
                else if (led_status == 0)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 4 is OFF");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
                    while (local_lightStatus == KPD_Not_Pressed)
    2006:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
    200a:	8f 3f       	cpi	r24, 0xFF	; 255
    200c:	c1 f3       	breq	.-16     	; 0x1ffe <KPD_Interface_Localuser+0x39e>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
    200e:	81 33       	cpi	r24, 0x31	; 49
    2010:	29 f4       	brne	.+10     	; 0x201c <KPD_Interface_Localuser+0x3bc>
                    {
                        LED_voidOn(DIO_PORTA, DIO_PIN3, LED_FORWARD_CONNECTION);
    2012:	41 e0       	ldi	r20, 0x01	; 1
    2014:	63 e0       	ldi	r22, 0x03	; 3
    2016:	80 e0       	ldi	r24, 0x00	; 0
    2018:	0e 94 6f 15 	call	0x2ade	; 0x2ade <LED_voidOn>
                    }
                    local_lightStatus = KPD_Not_Pressed;
    201c:	8f ef       	ldi	r24, 0xFF	; 255
    201e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
    2022:	08 95       	ret
                }
                break;

            case ('5'):

                DIO_voidGetPinValue(DIO_PORTD, DIO_PIN2, &led_status);
    2024:	48 eb       	ldi	r20, 0xB8	; 184
    2026:	54 e0       	ldi	r21, 0x04	; 4
    2028:	62 e0       	ldi	r22, 0x02	; 2
    202a:	83 e0       	ldi	r24, 0x03	; 3
    202c:	0e 94 18 17 	call	0x2e30	; 0x2e30 <DIO_voidGetPinValue>
                LCD_voidClear();
    2030:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <LCD_voidClear>
                if (led_status == 1)
    2034:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <led_status>
    2038:	81 30       	cpi	r24, 0x01	; 1
    203a:	f9 f4       	brne	.+62     	; 0x207a <KPD_Interface_Localuser+0x41a>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 5 is On");
    203c:	8c e5       	ldi	r24, 0x5C	; 92
    203e:	93 e0       	ldi	r25, 0x03	; 3
    2040:	0e 94 67 14 	call	0x28ce	; 0x28ce <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
    2044:	80 ec       	ldi	r24, 0xC0	; 192
    2046:	0e 94 83 13 	call	0x2706	; 0x2706 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
    204a:	85 ed       	ldi	r24, 0xD5	; 213
    204c:	92 e0       	ldi	r25, 0x02	; 2
    204e:	0e 94 67 14 	call	0x28ce	; 0x28ce <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
    2052:	04 c0       	rjmp	.+8      	; 0x205c <KPD_Interface_Localuser+0x3fc>
                    {
                        KPD_voidGetValue(&local_lightStatus);
    2054:	82 e6       	ldi	r24, 0x62	; 98
    2056:	90 e0       	ldi	r25, 0x00	; 0
    2058:	0e 94 9f 12 	call	0x253e	; 0x253e <KPD_voidGetValue>
                if (led_status == 1)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 5 is On");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
                    while (local_lightStatus == KPD_Not_Pressed)
    205c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
    2060:	8f 3f       	cpi	r24, 0xFF	; 255
    2062:	c1 f3       	breq	.-16     	; 0x2054 <KPD_Interface_Localuser+0x3f4>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
    2064:	81 33       	cpi	r24, 0x31	; 49
    2066:	29 f4       	brne	.+10     	; 0x2072 <KPD_Interface_Localuser+0x412>
                    {
                        LED_voidOff(DIO_PORTD, DIO_PIN2, LED_FORWARD_CONNECTION);
    2068:	41 e0       	ldi	r20, 0x01	; 1
    206a:	62 e0       	ldi	r22, 0x02	; 2
    206c:	83 e0       	ldi	r24, 0x03	; 3
    206e:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <LED_voidOff>
                    }
                    local_lightStatus = KPD_Not_Pressed;
    2072:	8f ef       	ldi	r24, 0xFF	; 255
    2074:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
    2078:	08 95       	ret
                }
                else if (led_status == 0)
    207a:	81 11       	cpse	r24, r1
    207c:	64 c1       	rjmp	.+712    	; 0x2346 <KPD_Interface_Localuser+0x6e6>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 5 is OFF");
    207e:	8a e6       	ldi	r24, 0x6A	; 106
    2080:	93 e0       	ldi	r25, 0x03	; 3
    2082:	0e 94 67 14 	call	0x28ce	; 0x28ce <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
    2086:	80 ec       	ldi	r24, 0xC0	; 192
    2088:	0e 94 83 13 	call	0x2706	; 0x2706 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
    208c:	85 ef       	ldi	r24, 0xF5	; 245
    208e:	92 e0       	ldi	r25, 0x02	; 2
    2090:	0e 94 67 14 	call	0x28ce	; 0x28ce <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
    2094:	04 c0       	rjmp	.+8      	; 0x209e <KPD_Interface_Localuser+0x43e>
                    {
                        KPD_voidGetValue(&local_lightStatus);
    2096:	82 e6       	ldi	r24, 0x62	; 98
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	0e 94 9f 12 	call	0x253e	; 0x253e <KPD_voidGetValue>
                else if (led_status == 0)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 5 is OFF");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
                    while (local_lightStatus == KPD_Not_Pressed)
    209e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
    20a2:	8f 3f       	cpi	r24, 0xFF	; 255
    20a4:	c1 f3       	breq	.-16     	; 0x2096 <KPD_Interface_Localuser+0x436>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
    20a6:	81 33       	cpi	r24, 0x31	; 49
    20a8:	29 f4       	brne	.+10     	; 0x20b4 <KPD_Interface_Localuser+0x454>
                    {
                        LED_voidOn(DIO_PORTD, DIO_PIN2, LED_FORWARD_CONNECTION);
    20aa:	41 e0       	ldi	r20, 0x01	; 1
    20ac:	62 e0       	ldi	r22, 0x02	; 2
    20ae:	83 e0       	ldi	r24, 0x03	; 3
    20b0:	0e 94 6f 15 	call	0x2ade	; 0x2ade <LED_voidOn>
                    }
                    local_lightStatus = KPD_Not_Pressed;
    20b4:	8f ef       	ldi	r24, 0xFF	; 255
    20b6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
    20ba:	08 95       	ret
                
			// if the user choose light 6 (DIMMER LED)

            case ('6'):

                LCD_voidClear();
    20bc:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <LCD_voidClear>
				
                if (dimmer_brightness > 0)
    20c0:	80 91 b7 04 	lds	r24, 0x04B7	; 0x8004b7 <dimmer_brightness>
    20c4:	88 23       	and	r24, r24
    20c6:	09 f4       	brne	.+2      	; 0x20ca <KPD_Interface_Localuser+0x46a>
    20c8:	82 c0       	rjmp	.+260    	; 0x21ce <KPD_Interface_Localuser+0x56e>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 6 is On");
    20ca:	89 e7       	ldi	r24, 0x79	; 121
    20cc:	93 e0       	ldi	r25, 0x03	; 3
    20ce:	0e 94 67 14 	call	0x28ce	; 0x28ce <LCD_voidDisplayStringDelay>
    20d2:	2f ef       	ldi	r18, 0xFF	; 255
    20d4:	83 ed       	ldi	r24, 0xD3	; 211
    20d6:	90 e3       	ldi	r25, 0x30	; 48
    20d8:	21 50       	subi	r18, 0x01	; 1
    20da:	80 40       	sbci	r24, 0x00	; 0
    20dc:	90 40       	sbci	r25, 0x00	; 0
    20de:	e1 f7       	brne	.-8      	; 0x20d8 <KPD_Interface_Localuser+0x478>
    20e0:	00 c0       	rjmp	.+0      	; 0x20e2 <KPD_Interface_Localuser+0x482>
    20e2:	00 00       	nop
					_delay_ms(1000);
					LCD_voidClear();
    20e4:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <LCD_voidClear>
					LCD_voidDisplayString("Brightness:  %");
    20e8:	86 ea       	ldi	r24, 0xA6	; 166
    20ea:	94 e0       	ldi	r25, 0x04	; 4
    20ec:	0e 94 51 14 	call	0x28a2	; 0x28a2 <LCD_voidDisplayString>
					LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,13);
    20f0:	6d e0       	ldi	r22, 0x0D	; 13
    20f2:	81 e0       	ldi	r24, 0x01	; 1
    20f4:	0e 94 40 15 	call	0x2a80	; 0x2a80 <LCD_voidGoTOSpecificPosition>
					LCD_voidDisplayNumber(dimmer_brightness);
    20f8:	60 91 b7 04 	lds	r22, 0x04B7	; 0x8004b7 <dimmer_brightness>
    20fc:	70 e0       	ldi	r23, 0x00	; 0
    20fe:	80 e0       	ldi	r24, 0x00	; 0
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	0e 94 86 14 	call	0x290c	; 0x290c <LCD_voidDisplayNumber>
                    LCD_voidSendCommand(Write_SecondLine);
    2106:	80 ec       	ldi	r24, 0xC0	; 192
    2108:	0e 94 83 13 	call	0x2706	; 0x2706 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1)+10 2)-10 0)H");
    210c:	87 e9       	ldi	r24, 0x97	; 151
    210e:	93 e0       	ldi	r25, 0x03	; 3
    2110:	0e 94 67 14 	call	0x28ce	; 0x28ce <LCD_voidDisplayStringDelay>
					while (local_lightStatus == KPD_Not_Pressed)
    2114:	56 c0       	rjmp	.+172    	; 0x21c2 <KPD_Interface_Localuser+0x562>
					{
						KPD_voidGetValue(&local_lightStatus);
    2116:	82 e6       	ldi	r24, 0x62	; 98
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	0e 94 9f 12 	call	0x253e	; 0x253e <KPD_voidGetValue>
						if (local_lightStatus == '1')
    211e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
    2122:	81 33       	cpi	r24, 0x31	; 49
    2124:	59 f5       	brne	.+86     	; 0x217c <KPD_Interface_Localuser+0x51c>
						{
							dimmer_brightness += 10;
    2126:	60 91 b7 04 	lds	r22, 0x04B7	; 0x8004b7 <dimmer_brightness>
    212a:	66 5f       	subi	r22, 0xF6	; 246
    212c:	60 93 b7 04 	sts	0x04B7, r22	; 0x8004b7 <dimmer_brightness>
							PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
    2130:	70 e0       	ldi	r23, 0x00	; 0
    2132:	80 e0       	ldi	r24, 0x00	; 0
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	0e 94 91 1b 	call	0x3722	; 0x3722 <__floatunsisf>
    213a:	ab 01       	movw	r20, r22
    213c:	bc 01       	movw	r22, r24
    213e:	88 ee       	ldi	r24, 0xE8	; 232
    2140:	93 e0       	ldi	r25, 0x03	; 3
    2142:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <PWM_voidGenerateChannel_1A>
							LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,13);
    2146:	6d e0       	ldi	r22, 0x0D	; 13
    2148:	81 e0       	ldi	r24, 0x01	; 1
    214a:	0e 94 40 15 	call	0x2a80	; 0x2a80 <LCD_voidGoTOSpecificPosition>
							LCD_voidDisplayNumber(dimmer_brightness);
    214e:	60 91 b7 04 	lds	r22, 0x04B7	; 0x8004b7 <dimmer_brightness>
    2152:	70 e0       	ldi	r23, 0x00	; 0
    2154:	80 e0       	ldi	r24, 0x00	; 0
    2156:	90 e0       	ldi	r25, 0x00	; 0
    2158:	0e 94 86 14 	call	0x290c	; 0x290c <LCD_voidDisplayNumber>
							if (dimmer_brightness > 100)
    215c:	80 91 b7 04 	lds	r24, 0x04B7	; 0x8004b7 <dimmer_brightness>
    2160:	85 36       	cpi	r24, 0x65	; 101
    2162:	78 f1       	brcs	.+94     	; 0x21c2 <KPD_Interface_Localuser+0x562>
							{
								dimmer_brightness = 100;
    2164:	84 e6       	ldi	r24, 0x64	; 100
    2166:	80 93 b7 04 	sts	0x04B7, r24	; 0x8004b7 <dimmer_brightness>
								PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
    216a:	40 e0       	ldi	r20, 0x00	; 0
    216c:	50 e0       	ldi	r21, 0x00	; 0
    216e:	68 ec       	ldi	r22, 0xC8	; 200
    2170:	72 e4       	ldi	r23, 0x42	; 66
    2172:	88 ee       	ldi	r24, 0xE8	; 232
    2174:	93 e0       	ldi	r25, 0x03	; 3
    2176:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <PWM_voidGenerateChannel_1A>
    217a:	23 c0       	rjmp	.+70     	; 0x21c2 <KPD_Interface_Localuser+0x562>
							}
						
							
						}
						else if (local_lightStatus == '2')
    217c:	82 33       	cpi	r24, 0x32	; 50
    217e:	e1 f4       	brne	.+56     	; 0x21b8 <KPD_Interface_Localuser+0x558>
						{
							dimmer_brightness -= 10;
    2180:	60 91 b7 04 	lds	r22, 0x04B7	; 0x8004b7 <dimmer_brightness>
    2184:	6a 50       	subi	r22, 0x0A	; 10
    2186:	60 93 b7 04 	sts	0x04B7, r22	; 0x8004b7 <dimmer_brightness>
							PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
    218a:	70 e0       	ldi	r23, 0x00	; 0
    218c:	80 e0       	ldi	r24, 0x00	; 0
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	0e 94 91 1b 	call	0x3722	; 0x3722 <__floatunsisf>
    2194:	ab 01       	movw	r20, r22
    2196:	bc 01       	movw	r22, r24
    2198:	88 ee       	ldi	r24, 0xE8	; 232
    219a:	93 e0       	ldi	r25, 0x03	; 3
    219c:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <PWM_voidGenerateChannel_1A>
							LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,13);
    21a0:	6d e0       	ldi	r22, 0x0D	; 13
    21a2:	81 e0       	ldi	r24, 0x01	; 1
    21a4:	0e 94 40 15 	call	0x2a80	; 0x2a80 <LCD_voidGoTOSpecificPosition>
							LCD_voidDisplayNumber(dimmer_brightness);
    21a8:	60 91 b7 04 	lds	r22, 0x04B7	; 0x8004b7 <dimmer_brightness>
    21ac:	70 e0       	ldi	r23, 0x00	; 0
    21ae:	80 e0       	ldi	r24, 0x00	; 0
    21b0:	90 e0       	ldi	r25, 0x00	; 0
    21b2:	0e 94 86 14 	call	0x290c	; 0x290c <LCD_voidDisplayNumber>
    21b6:	05 c0       	rjmp	.+10     	; 0x21c2 <KPD_Interface_Localuser+0x562>
							{
								dimmer_brightness = 0;
								PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
							}
						}
						else if (local_lightStatus == '0')
    21b8:	80 33       	cpi	r24, 0x30	; 48
    21ba:	19 f4       	brne	.+6      	; 0x21c2 <KPD_Interface_Localuser+0x562>
						{
							LCD_voidClear();
    21bc:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <LCD_voidClear>
							break;
    21c0:	08 95       	ret
					LCD_voidDisplayString("Brightness:  %");
					LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,13);
					LCD_voidDisplayNumber(dimmer_brightness);
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1)+10 2)-10 0)H");
					while (local_lightStatus == KPD_Not_Pressed)
    21c2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
    21c6:	8f 3f       	cpi	r24, 0xFF	; 255
    21c8:	09 f4       	brne	.+2      	; 0x21cc <KPD_Interface_Localuser+0x56c>
    21ca:	a5 cf       	rjmp	.-182    	; 0x2116 <KPD_Interface_Localuser+0x4b6>
    21cc:	08 95       	ret
						}						
						
					}
					
                }
                else if (led_status == 0)
    21ce:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <led_status>
    21d2:	81 11       	cpse	r24, r1
    21d4:	b8 c0       	rjmp	.+368    	; 0x2346 <KPD_Interface_Localuser+0x6e6>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 6 is OFF");
    21d6:	87 ea       	ldi	r24, 0xA7	; 167
    21d8:	93 e0       	ldi	r25, 0x03	; 3
    21da:	0e 94 67 14 	call	0x28ce	; 0x28ce <LCD_voidDisplayStringDelay>
    21de:	2f ef       	ldi	r18, 0xFF	; 255
    21e0:	83 ed       	ldi	r24, 0xD3	; 211
    21e2:	90 e3       	ldi	r25, 0x30	; 48
    21e4:	21 50       	subi	r18, 0x01	; 1
    21e6:	80 40       	sbci	r24, 0x00	; 0
    21e8:	90 40       	sbci	r25, 0x00	; 0
    21ea:	e1 f7       	brne	.-8      	; 0x21e4 <KPD_Interface_Localuser+0x584>
    21ec:	00 c0       	rjmp	.+0      	; 0x21ee <KPD_Interface_Localuser+0x58e>
    21ee:	00 00       	nop
					_delay_ms(1000);
                    LCD_voidClear();
    21f0:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <LCD_voidClear>
					LCD_voidDisplayString("Brightness:  %");
    21f4:	86 ea       	ldi	r24, 0xA6	; 166
    21f6:	94 e0       	ldi	r25, 0x04	; 4
    21f8:	0e 94 51 14 	call	0x28a2	; 0x28a2 <LCD_voidDisplayString>
					LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,13);
    21fc:	6d e0       	ldi	r22, 0x0D	; 13
    21fe:	81 e0       	ldi	r24, 0x01	; 1
    2200:	0e 94 40 15 	call	0x2a80	; 0x2a80 <LCD_voidGoTOSpecificPosition>
					LCD_voidDisplayNumber(dimmer_brightness);
    2204:	60 91 b7 04 	lds	r22, 0x04B7	; 0x8004b7 <dimmer_brightness>
    2208:	70 e0       	ldi	r23, 0x00	; 0
    220a:	80 e0       	ldi	r24, 0x00	; 0
    220c:	90 e0       	ldi	r25, 0x00	; 0
    220e:	0e 94 86 14 	call	0x290c	; 0x290c <LCD_voidDisplayNumber>
                    LCD_voidSendCommand(Write_SecondLine);
    2212:	80 ec       	ldi	r24, 0xC0	; 192
    2214:	0e 94 83 13 	call	0x2706	; 0x2706 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1)+10 2)-10 0)H");
    2218:	87 e9       	ldi	r24, 0x97	; 151
    221a:	93 e0       	ldi	r25, 0x03	; 3
    221c:	0e 94 67 14 	call	0x28ce	; 0x28ce <LCD_voidDisplayStringDelay>
					while (local_lightStatus == KPD_Not_Pressed)
    2220:	56 c0       	rjmp	.+172    	; 0x22ce <KPD_Interface_Localuser+0x66e>
					{
						KPD_voidGetValue(&local_lightStatus);
    2222:	82 e6       	ldi	r24, 0x62	; 98
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	0e 94 9f 12 	call	0x253e	; 0x253e <KPD_voidGetValue>
						if (local_lightStatus == '1')
    222a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
    222e:	81 33       	cpi	r24, 0x31	; 49
    2230:	59 f5       	brne	.+86     	; 0x2288 <KPD_Interface_Localuser+0x628>
						{
							dimmer_brightness += 10;
    2232:	60 91 b7 04 	lds	r22, 0x04B7	; 0x8004b7 <dimmer_brightness>
    2236:	66 5f       	subi	r22, 0xF6	; 246
    2238:	60 93 b7 04 	sts	0x04B7, r22	; 0x8004b7 <dimmer_brightness>
							PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
    223c:	70 e0       	ldi	r23, 0x00	; 0
    223e:	80 e0       	ldi	r24, 0x00	; 0
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	0e 94 91 1b 	call	0x3722	; 0x3722 <__floatunsisf>
    2246:	ab 01       	movw	r20, r22
    2248:	bc 01       	movw	r22, r24
    224a:	88 ee       	ldi	r24, 0xE8	; 232
    224c:	93 e0       	ldi	r25, 0x03	; 3
    224e:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <PWM_voidGenerateChannel_1A>
							LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,13);
    2252:	6d e0       	ldi	r22, 0x0D	; 13
    2254:	81 e0       	ldi	r24, 0x01	; 1
    2256:	0e 94 40 15 	call	0x2a80	; 0x2a80 <LCD_voidGoTOSpecificPosition>
							LCD_voidDisplayNumber(dimmer_brightness);
    225a:	60 91 b7 04 	lds	r22, 0x04B7	; 0x8004b7 <dimmer_brightness>
    225e:	70 e0       	ldi	r23, 0x00	; 0
    2260:	80 e0       	ldi	r24, 0x00	; 0
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	0e 94 86 14 	call	0x290c	; 0x290c <LCD_voidDisplayNumber>
							if (dimmer_brightness > 100)
    2268:	80 91 b7 04 	lds	r24, 0x04B7	; 0x8004b7 <dimmer_brightness>
    226c:	85 36       	cpi	r24, 0x65	; 101
    226e:	78 f1       	brcs	.+94     	; 0x22ce <KPD_Interface_Localuser+0x66e>
							{
								dimmer_brightness = 100;
    2270:	84 e6       	ldi	r24, 0x64	; 100
    2272:	80 93 b7 04 	sts	0x04B7, r24	; 0x8004b7 <dimmer_brightness>
								PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
    2276:	40 e0       	ldi	r20, 0x00	; 0
    2278:	50 e0       	ldi	r21, 0x00	; 0
    227a:	68 ec       	ldi	r22, 0xC8	; 200
    227c:	72 e4       	ldi	r23, 0x42	; 66
    227e:	88 ee       	ldi	r24, 0xE8	; 232
    2280:	93 e0       	ldi	r25, 0x03	; 3
    2282:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <PWM_voidGenerateChannel_1A>
    2286:	23 c0       	rjmp	.+70     	; 0x22ce <KPD_Interface_Localuser+0x66e>
							}
						
							
						}
						else if (local_lightStatus == '2')
    2288:	82 33       	cpi	r24, 0x32	; 50
    228a:	e1 f4       	brne	.+56     	; 0x22c4 <KPD_Interface_Localuser+0x664>
						{
							dimmer_brightness -= 10;
    228c:	60 91 b7 04 	lds	r22, 0x04B7	; 0x8004b7 <dimmer_brightness>
    2290:	6a 50       	subi	r22, 0x0A	; 10
    2292:	60 93 b7 04 	sts	0x04B7, r22	; 0x8004b7 <dimmer_brightness>
							PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
    2296:	70 e0       	ldi	r23, 0x00	; 0
    2298:	80 e0       	ldi	r24, 0x00	; 0
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	0e 94 91 1b 	call	0x3722	; 0x3722 <__floatunsisf>
    22a0:	ab 01       	movw	r20, r22
    22a2:	bc 01       	movw	r22, r24
    22a4:	88 ee       	ldi	r24, 0xE8	; 232
    22a6:	93 e0       	ldi	r25, 0x03	; 3
    22a8:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <PWM_voidGenerateChannel_1A>
							LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,13);
    22ac:	6d e0       	ldi	r22, 0x0D	; 13
    22ae:	81 e0       	ldi	r24, 0x01	; 1
    22b0:	0e 94 40 15 	call	0x2a80	; 0x2a80 <LCD_voidGoTOSpecificPosition>
							LCD_voidDisplayNumber(dimmer_brightness);
    22b4:	60 91 b7 04 	lds	r22, 0x04B7	; 0x8004b7 <dimmer_brightness>
    22b8:	70 e0       	ldi	r23, 0x00	; 0
    22ba:	80 e0       	ldi	r24, 0x00	; 0
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	0e 94 86 14 	call	0x290c	; 0x290c <LCD_voidDisplayNumber>
    22c2:	05 c0       	rjmp	.+10     	; 0x22ce <KPD_Interface_Localuser+0x66e>
							{
								dimmer_brightness = 0;
								PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
							}
						}
						else if (local_lightStatus == '0')
    22c4:	80 33       	cpi	r24, 0x30	; 48
    22c6:	19 f4       	brne	.+6      	; 0x22ce <KPD_Interface_Localuser+0x66e>
						{
							LCD_voidClear();
    22c8:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <LCD_voidClear>
							break;
    22cc:	08 95       	ret
					LCD_voidDisplayString("Brightness:  %");
					LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,13);
					LCD_voidDisplayNumber(dimmer_brightness);
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1)+10 2)-10 0)H");
					while (local_lightStatus == KPD_Not_Pressed)
    22ce:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
    22d2:	8f 3f       	cpi	r24, 0xFF	; 255
    22d4:	09 f4       	brne	.+2      	; 0x22d8 <KPD_Interface_Localuser+0x678>
    22d6:	a5 cf       	rjmp	.-182    	; 0x2222 <KPD_Interface_Localuser+0x5c2>
    22d8:	08 95       	ret
            }
			break;

			case ('3'):
			
				LCD_voidClear();
    22da:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <LCD_voidClear>
				ADC_voidGetDigitalValue(ADC_CHANNEL_0, &local_temp);
    22de:	66 eb       	ldi	r22, 0xB6	; 182
    22e0:	74 e0       	ldi	r23, 0x04	; 4
    22e2:	80 e0       	ldi	r24, 0x00	; 0
    22e4:	0e 94 fd 15 	call	0x2bfa	; 0x2bfa <ADC_voidGetDigitalValue>
				LCD_voidSendCommand(Write_FirstLine);
    22e8:	80 e8       	ldi	r24, 0x80	; 128
    22ea:	0e 94 83 13 	call	0x2706	; 0x2706 <LCD_voidSendCommand>
				LCD_voidDisplayString((u8 *)"Room Temp:  c");
    22ee:	88 e9       	ldi	r24, 0x98	; 152
    22f0:	94 e0       	ldi	r25, 0x04	; 4
    22f2:	0e 94 51 14 	call	0x28a2	; 0x28a2 <LCD_voidDisplayString>
				LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,11);
    22f6:	6b e0       	ldi	r22, 0x0B	; 11
    22f8:	81 e0       	ldi	r24, 0x01	; 1
    22fa:	0e 94 40 15 	call	0x2a80	; 0x2a80 <LCD_voidGoTOSpecificPosition>
				LCD_voidDisplayNumber(local_temp);
    22fe:	60 91 b6 04 	lds	r22, 0x04B6	; 0x8004b6 <__data_end>
    2302:	70 e0       	ldi	r23, 0x00	; 0
    2304:	80 e0       	ldi	r24, 0x00	; 0
    2306:	90 e0       	ldi	r25, 0x00	; 0
    2308:	0e 94 86 14 	call	0x290c	; 0x290c <LCD_voidDisplayNumber>
				LCD_voidDisplayChar('c');
    230c:	83 e6       	ldi	r24, 0x63	; 99
    230e:	0e 94 1b 14 	call	0x2836	; 0x2836 <LCD_voidDisplayChar>
				LCD_voidSendCommand(Write_SecondLine);
    2312:	80 ec       	ldi	r24, 0xC0	; 192
    2314:	0e 94 83 13 	call	0x2706	; 0x2706 <LCD_voidSendCommand>
				LCD_voidDisplayStringDelay((u8 *)"0-go to home");
    2318:	82 e8       	ldi	r24, 0x82	; 130
    231a:	92 e0       	ldi	r25, 0x02	; 2
    231c:	0e 94 67 14 	call	0x28ce	; 0x28ce <LCD_voidDisplayStringDelay>
				while(local_KPDIdleValue==KPD_Not_Pressed)
    2320:	06 c0       	rjmp	.+12     	; 0x232e <KPD_Interface_Localuser+0x6ce>
				{
					KPD_voidGetValue(&local_KPDIdleValue);
    2322:	81 e6       	ldi	r24, 0x61	; 97
    2324:	90 e0       	ldi	r25, 0x00	; 0
    2326:	0e 94 9f 12 	call	0x253e	; 0x253e <KPD_voidGetValue>
					Display_temp();
    232a:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <Display_temp>
				LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,11);
				LCD_voidDisplayNumber(local_temp);
				LCD_voidDisplayChar('c');
				LCD_voidSendCommand(Write_SecondLine);
				LCD_voidDisplayStringDelay((u8 *)"0-go to home");
				while(local_KPDIdleValue==KPD_Not_Pressed)
    232e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <local_KPDIdleValue>
    2332:	8f 3f       	cpi	r24, 0xFF	; 255
    2334:	b1 f3       	breq	.-20     	; 0x2322 <KPD_Interface_Localuser+0x6c2>
				{
					KPD_voidGetValue(&local_KPDIdleValue);
					Display_temp();
				}	
				if (local_KPDIdleValue=='0')
    2336:	80 33       	cpi	r24, 0x30	; 48
    2338:	31 f4       	brne	.+12     	; 0x2346 <KPD_Interface_Localuser+0x6e6>
				{
					LCD_voidClear();
    233a:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <LCD_voidClear>
    233e:	08 95       	ret
				}
			break;

			case('6'):
			usertype =HOME_NO_LOGIN;
    2340:	86 e0       	ldi	r24, 0x06	; 6
    2342:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <usertype>
    2346:	08 95       	ret

00002348 <BL_voidInit>:



void BL_voidInit(void)
{
	UART_voidInit();
    2348:	0e 94 34 1a 	call	0x3468	; 0x3468 <UART_voidInit>
    234c:	08 95       	ret

0000234e <BL_voidTxChar>:
}


void BL_voidTxChar(u8 copy_u8BlTxData)
{
	UART_voidTxChar(copy_u8BlTxData);
    234e:	0e 94 45 1a 	call	0x348a	; 0x348a <UART_voidTxChar>
    2352:	08 95       	ret

00002354 <BL_voidRxChar>:



void BL_voidRxChar(u8* copy_pu8BlRxData)
{
	UART_voidRxChar(copy_pu8BlRxData);
    2354:	0e 94 49 1a 	call	0x3492	; 0x3492 <UART_voidRxChar>
    2358:	08 95       	ret

0000235a <BL_voidRxCharWithTimeout>:
	
}

BL_voidRxCharWithTimeout(u8* copy_pu8BlRxData)
{
	 UART_voidRxCharWithTimeout(copy_pu8BlRxData);
    235a:	0e 94 67 1a 	call	0x34ce	; 0x34ce <UART_voidRxCharWithTimeout>
    235e:	08 95       	ret

00002360 <BL_voidTxString>:
}


void BL_voidTxString(u8* copy_pu8BlTxString)
{
	UART_voidTxString(copy_pu8BlTxString);
    2360:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <UART_voidTxString>
    2364:	08 95       	ret

00002366 <BUZZER_voidInit>:
#include"BIT_MATH.h"
#include"STD_TYPES.h"

void BUZZER_voidInit	(u8 copy_u8BuzzerPortId,u8 copy_u8BuzzerPinId)
{
	DIO_voidSetPinDirection(copy_u8BuzzerPortId,copy_u8BuzzerPinId,DIO_PIN_HIGH);
    2366:	41 e0       	ldi	r20, 0x01	; 1
    2368:	0e 94 18 16 	call	0x2c30	; 0x2c30 <DIO_voidSetPinDirection>
    236c:	08 95       	ret

0000236e <EEPROM_voidInit>:
#include"EEPROM_interface.h"
#include"EEPROM_private.h"

void EEPROM_voidInit(void)
{
	TWI_voidInitMaster();
    236e:	0e 94 a9 19 	call	0x3352	; 0x3352 <TWI_voidInitMaster>
    2372:	08 95       	ret

00002374 <EEPROM_voidWriteByte>:
}
void EEPROM_voidWriteByte(u16 copy_u16WordAdress,u8 copy_u8Data)
{
    2374:	1f 93       	push	r17
    2376:	cf 93       	push	r28
    2378:	df 93       	push	r29
    237a:	d8 2f       	mov	r29, r24
    237c:	c6 2f       	mov	r28, r22
	u8 Local_u8DeviceAddress = ( copy_u16WordAdress>>8)|EEPROM_FIXED_ADDRESS;
    237e:	19 2f       	mov	r17, r25
    2380:	10 65       	ori	r17, 0x50	; 80
	TWI_voidSendStartCondition();
    2382:	0e 94 b5 19 	call	0x336a	; 0x336a <TWI_voidSendStartCondition>
	TWI_voidSendSlaveAddWithWrite(Local_u8DeviceAddress);
    2386:	81 2f       	mov	r24, r17
    2388:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <TWI_voidSendSlaveAddWithWrite>
	TWI_voidTransmitMasterDataByte((u8)copy_u16WordAdress);
    238c:	8d 2f       	mov	r24, r29
    238e:	0e 94 02 1a 	call	0x3404	; 0x3404 <TWI_voidTransmitMasterDataByte>
	TWI_voidTransmitMasterDataByte(copy_u8Data);
    2392:	8c 2f       	mov	r24, r28
    2394:	0e 94 02 1a 	call	0x3404	; 0x3404 <TWI_voidTransmitMasterDataByte>
	TWI_voidSendStopCondition();
    2398:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <TWI_voidSendStopCondition>
    239c:	8f e1       	ldi	r24, 0x1F	; 31
    239e:	9e e4       	ldi	r25, 0x4E	; 78
    23a0:	01 97       	sbiw	r24, 0x01	; 1
    23a2:	f1 f7       	brne	.-4      	; 0x23a0 <EEPROM_voidWriteByte+0x2c>
    23a4:	00 c0       	rjmp	.+0      	; 0x23a6 <EEPROM_voidWriteByte+0x32>
    23a6:	00 00       	nop
	_delay_ms(5);
	
	
	
}
    23a8:	df 91       	pop	r29
    23aa:	cf 91       	pop	r28
    23ac:	1f 91       	pop	r17
    23ae:	08 95       	ret

000023b0 <EEPROM_voidWritePage>:

	void EEPROM_voidWritePage(u16 copy_u16WordAdress,u8* copy_pu8TxData)
	{
    23b0:	0f 93       	push	r16
    23b2:	1f 93       	push	r17
    23b4:	cf 93       	push	r28
    23b6:	df 93       	push	r29
		if(copy_pu8TxData!=NULL)
    23b8:	61 15       	cp	r22, r1
    23ba:	71 05       	cpc	r23, r1
    23bc:	f9 f0       	breq	.+62     	; 0x23fc <EEPROM_voidWritePage+0x4c>
    23be:	8b 01       	movw	r16, r22
    23c0:	d8 2f       	mov	r29, r24
		{
			u8 Local_u8WordCounter,Local_u8DeviceAddress = ( copy_u16WordAdress>>8)|EEPROM_FIXED_ADDRESS;
    23c2:	c9 2f       	mov	r28, r25
    23c4:	c0 65       	ori	r28, 0x50	; 80
			TWI_voidSendStartCondition();
    23c6:	0e 94 b5 19 	call	0x336a	; 0x336a <TWI_voidSendStartCondition>
			TWI_voidSendSlaveAddWithWrite(Local_u8DeviceAddress);
    23ca:	8c 2f       	mov	r24, r28
    23cc:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <TWI_voidSendSlaveAddWithWrite>
			TWI_voidTransmitMasterDataByte((u8)copy_u16WordAdress);
    23d0:	8d 2f       	mov	r24, r29
    23d2:	0e 94 02 1a 	call	0x3404	; 0x3404 <TWI_voidTransmitMasterDataByte>
			
			for(Local_u8WordCounter=0;Local_u8WordCounter<EEPROM_MAX_PAGE_SIZE;Local_u8WordCounter++)
    23d6:	c0 e0       	ldi	r28, 0x00	; 0
    23d8:	07 c0       	rjmp	.+14     	; 0x23e8 <EEPROM_voidWritePage+0x38>
			{
				TWI_voidTransmitMasterDataByte(copy_pu8TxData[Local_u8WordCounter]);
    23da:	f8 01       	movw	r30, r16
    23dc:	ec 0f       	add	r30, r28
    23de:	f1 1d       	adc	r31, r1
    23e0:	80 81       	ld	r24, Z
    23e2:	0e 94 02 1a 	call	0x3404	; 0x3404 <TWI_voidTransmitMasterDataByte>
			u8 Local_u8WordCounter,Local_u8DeviceAddress = ( copy_u16WordAdress>>8)|EEPROM_FIXED_ADDRESS;
			TWI_voidSendStartCondition();
			TWI_voidSendSlaveAddWithWrite(Local_u8DeviceAddress);
			TWI_voidTransmitMasterDataByte((u8)copy_u16WordAdress);
			
			for(Local_u8WordCounter=0;Local_u8WordCounter<EEPROM_MAX_PAGE_SIZE;Local_u8WordCounter++)
    23e6:	cf 5f       	subi	r28, 0xFF	; 255
    23e8:	c8 30       	cpi	r28, 0x08	; 8
    23ea:	b8 f3       	brcs	.-18     	; 0x23da <EEPROM_voidWritePage+0x2a>
			{
				TWI_voidTransmitMasterDataByte(copy_pu8TxData[Local_u8WordCounter]);
					
			}
			TWI_voidSendStopCondition();
    23ec:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <TWI_voidSendStopCondition>
    23f0:	8f e1       	ldi	r24, 0x1F	; 31
    23f2:	9e e4       	ldi	r25, 0x4E	; 78
    23f4:	01 97       	sbiw	r24, 0x01	; 1
    23f6:	f1 f7       	brne	.-4      	; 0x23f4 <EEPROM_voidWritePage+0x44>
    23f8:	00 c0       	rjmp	.+0      	; 0x23fa <EEPROM_voidWritePage+0x4a>
    23fa:	00 00       	nop
		{
			//error state
		}
		
		
	}
    23fc:	df 91       	pop	r29
    23fe:	cf 91       	pop	r28
    2400:	1f 91       	pop	r17
    2402:	0f 91       	pop	r16
    2404:	08 95       	ret

00002406 <EEPROM_voidReadByte>:

void EEPROM_voidReadByte(u16 copy_u16WordAdress,u8* copy_pu8Data)
{
    2406:	0f 93       	push	r16
    2408:	1f 93       	push	r17
    240a:	cf 93       	push	r28
    240c:	df 93       	push	r29
	if(copy_pu8Data!=NULL)
    240e:	61 15       	cp	r22, r1
    2410:	71 05       	cpc	r23, r1
    2412:	e1 f0       	breq	.+56     	; 0x244c <EEPROM_voidReadByte+0x46>
    2414:	8b 01       	movw	r16, r22
    2416:	d8 2f       	mov	r29, r24
	{
		u8 Local_u8DeviceAddress = ( copy_u16WordAdress>>8)|EEPROM_FIXED_ADDRESS;
    2418:	c9 2f       	mov	r28, r25
    241a:	c0 65       	ori	r28, 0x50	; 80
		TWI_voidSendStartCondition();
    241c:	0e 94 b5 19 	call	0x336a	; 0x336a <TWI_voidSendStartCondition>
		TWI_voidSendSlaveAddWithWrite(Local_u8DeviceAddress);
    2420:	8c 2f       	mov	r24, r28
    2422:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <TWI_voidSendSlaveAddWithWrite>
		TWI_voidTransmitMasterDataByte((u8)copy_u16WordAdress);
    2426:	8d 2f       	mov	r24, r29
    2428:	0e 94 02 1a 	call	0x3404	; 0x3404 <TWI_voidTransmitMasterDataByte>
		TWI_voidSendRepeatedStartCondition();
    242c:	0e 94 c3 19 	call	0x3386	; 0x3386 <TWI_voidSendRepeatedStartCondition>
		TWI_voidSendSlaveAddWithRead(Local_u8DeviceAddress);
    2430:	8c 2f       	mov	r24, r28
    2432:	0e 94 ed 19 	call	0x33da	; 0x33da <TWI_voidSendSlaveAddWithRead>
		TWI_voidRecieveMasterDataByteWithNAch(copy_pu8Data);
    2436:	c8 01       	movw	r24, r16
    2438:	0e 94 24 1a 	call	0x3448	; 0x3448 <TWI_voidRecieveMasterDataByteWithNAch>
		TWI_voidSendStopCondition();
    243c:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <TWI_voidSendStopCondition>
    2440:	8f e1       	ldi	r24, 0x1F	; 31
    2442:	9e e4       	ldi	r25, 0x4E	; 78
    2444:	01 97       	sbiw	r24, 0x01	; 1
    2446:	f1 f7       	brne	.-4      	; 0x2444 <EEPROM_voidReadByte+0x3e>
    2448:	00 c0       	rjmp	.+0      	; 0x244a <EEPROM_voidReadByte+0x44>
    244a:	00 00       	nop
	{
		//error
	}
	
	
}
    244c:	df 91       	pop	r29
    244e:	cf 91       	pop	r28
    2450:	1f 91       	pop	r17
    2452:	0f 91       	pop	r16
    2454:	08 95       	ret

00002456 <EEPROM_voidSequentialRead>:

void EEPROM_voidSequentialRead(u16 copy_u16WordAdress,u16 copy_u18NumOfDataBytes,u8* copy_pu8RxData)
{
    2456:	ef 92       	push	r14
    2458:	ff 92       	push	r15
    245a:	0f 93       	push	r16
    245c:	1f 93       	push	r17
    245e:	cf 93       	push	r28
    2460:	df 93       	push	r29
	if((copy_pu8RxData !=NULL)&&copy_u18NumOfDataBytes<512)
    2462:	41 15       	cp	r20, r1
    2464:	51 05       	cpc	r21, r1
    2466:	81 f1       	breq	.+96     	; 0x24c8 <EEPROM_voidSequentialRead+0x72>
    2468:	61 15       	cp	r22, r1
    246a:	22 e0       	ldi	r18, 0x02	; 2
    246c:	72 07       	cpc	r23, r18
    246e:	60 f5       	brcc	.+88     	; 0x24c8 <EEPROM_voidSequentialRead+0x72>
    2470:	8a 01       	movw	r16, r20
    2472:	7b 01       	movw	r14, r22
    2474:	d8 2f       	mov	r29, r24
	{
		u8 Local_u8DeviceAddress = ( copy_u16WordAdress>>8)|EEPROM_FIXED_ADDRESS;
    2476:	c9 2f       	mov	r28, r25
    2478:	c0 65       	ori	r28, 0x50	; 80
		u16 Local_u16BytesCounter;
		TWI_voidSendStartCondition();
    247a:	0e 94 b5 19 	call	0x336a	; 0x336a <TWI_voidSendStartCondition>
		TWI_voidSendSlaveAddWithWrite(Local_u8DeviceAddress);
    247e:	8c 2f       	mov	r24, r28
    2480:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <TWI_voidSendSlaveAddWithWrite>
		TWI_voidTransmitMasterDataByte((u8)copy_u16WordAdress);
    2484:	8d 2f       	mov	r24, r29
    2486:	0e 94 02 1a 	call	0x3404	; 0x3404 <TWI_voidTransmitMasterDataByte>
		TWI_voidSendRepeatedStartCondition();
    248a:	0e 94 c3 19 	call	0x3386	; 0x3386 <TWI_voidSendRepeatedStartCondition>
		TWI_voidSendSlaveAddWithRead(Local_u8DeviceAddress);
    248e:	8c 2f       	mov	r24, r28
    2490:	0e 94 ed 19 	call	0x33da	; 0x33da <TWI_voidSendSlaveAddWithRead>
		
		for(Local_u16BytesCounter=0;Local_u16BytesCounter<copy_u18NumOfDataBytes-1;Local_u16BytesCounter++)
    2494:	c0 e0       	ldi	r28, 0x00	; 0
    2496:	d0 e0       	ldi	r29, 0x00	; 0
    2498:	06 c0       	rjmp	.+12     	; 0x24a6 <EEPROM_voidSequentialRead+0x50>
		{
			TWI_voidRecieveMasterDataByteWithAch(&copy_pu8RxData[Local_u16BytesCounter]);
    249a:	c8 01       	movw	r24, r16
    249c:	8c 0f       	add	r24, r28
    249e:	9d 1f       	adc	r25, r29
    24a0:	0e 94 0e 1a 	call	0x341c	; 0x341c <TWI_voidRecieveMasterDataByteWithAch>
		TWI_voidSendSlaveAddWithWrite(Local_u8DeviceAddress);
		TWI_voidTransmitMasterDataByte((u8)copy_u16WordAdress);
		TWI_voidSendRepeatedStartCondition();
		TWI_voidSendSlaveAddWithRead(Local_u8DeviceAddress);
		
		for(Local_u16BytesCounter=0;Local_u16BytesCounter<copy_u18NumOfDataBytes-1;Local_u16BytesCounter++)
    24a4:	21 96       	adiw	r28, 0x01	; 1
    24a6:	c7 01       	movw	r24, r14
    24a8:	01 97       	sbiw	r24, 0x01	; 1
    24aa:	c8 17       	cp	r28, r24
    24ac:	d9 07       	cpc	r29, r25
    24ae:	a8 f3       	brcs	.-22     	; 0x249a <EEPROM_voidSequentialRead+0x44>
		{
			TWI_voidRecieveMasterDataByteWithAch(&copy_pu8RxData[Local_u16BytesCounter]);
			
		}
		
		TWI_voidRecieveMasterDataByteWithNAch(&copy_pu8RxData[copy_u18NumOfDataBytes-1]);
    24b0:	80 0f       	add	r24, r16
    24b2:	91 1f       	adc	r25, r17
    24b4:	0e 94 24 1a 	call	0x3448	; 0x3448 <TWI_voidRecieveMasterDataByteWithNAch>
		TWI_voidSendStopCondition();
    24b8:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <TWI_voidSendStopCondition>
    24bc:	8f e1       	ldi	r24, 0x1F	; 31
    24be:	9e e4       	ldi	r25, 0x4E	; 78
    24c0:	01 97       	sbiw	r24, 0x01	; 1
    24c2:	f1 f7       	brne	.-4      	; 0x24c0 <EEPROM_voidSequentialRead+0x6a>
    24c4:	00 c0       	rjmp	.+0      	; 0x24c6 <EEPROM_voidSequentialRead+0x70>
    24c6:	00 00       	nop
	{
		//error state
	}


    24c8:	df 91       	pop	r29
    24ca:	cf 91       	pop	r28
    24cc:	1f 91       	pop	r17
    24ce:	0f 91       	pop	r16
    24d0:	ff 90       	pop	r15
    24d2:	ef 90       	pop	r14
    24d4:	08 95       	ret

000024d6 <KPD_voidInit>:


void	KPD_voidInit(void)
{
	//Setting Columns to output
	DIO_voidSetPinDirection(KPD_C0_Port,KPD_C0_Pin,DIO_PIN_OUTPUT);
    24d6:	41 e0       	ldi	r20, 0x01	; 1
    24d8:	64 e0       	ldi	r22, 0x04	; 4
    24da:	81 e0       	ldi	r24, 0x01	; 1
    24dc:	0e 94 18 16 	call	0x2c30	; 0x2c30 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_C1_Port,KPD_C1_Pin,DIO_PIN_OUTPUT);
    24e0:	41 e0       	ldi	r20, 0x01	; 1
    24e2:	65 e0       	ldi	r22, 0x05	; 5
    24e4:	81 e0       	ldi	r24, 0x01	; 1
    24e6:	0e 94 18 16 	call	0x2c30	; 0x2c30 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_C2_Port,KPD_C2_Pin,DIO_PIN_OUTPUT);
    24ea:	41 e0       	ldi	r20, 0x01	; 1
    24ec:	66 e0       	ldi	r22, 0x06	; 6
    24ee:	81 e0       	ldi	r24, 0x01	; 1
    24f0:	0e 94 18 16 	call	0x2c30	; 0x2c30 <DIO_voidSetPinDirection>
	// DIO_voidSetPinDirection(KPD_C3_Port,KPD_C3_Pin,DIO_PIN_OUTPUT);
	
	
	//Setting Rows To Input
	DIO_voidSetPinDirection(KPD_R0_Port,KPD_R0_Pin,DIO_PIN_INPUT);
    24f4:	40 e0       	ldi	r20, 0x00	; 0
    24f6:	63 e0       	ldi	r22, 0x03	; 3
    24f8:	82 e0       	ldi	r24, 0x02	; 2
    24fa:	0e 94 18 16 	call	0x2c30	; 0x2c30 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_R1_Port,KPD_R1_Pin,DIO_PIN_INPUT);
    24fe:	40 e0       	ldi	r20, 0x00	; 0
    2500:	64 e0       	ldi	r22, 0x04	; 4
    2502:	82 e0       	ldi	r24, 0x02	; 2
    2504:	0e 94 18 16 	call	0x2c30	; 0x2c30 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_R2_Port,KPD_R2_Pin,DIO_PIN_INPUT);
    2508:	40 e0       	ldi	r20, 0x00	; 0
    250a:	65 e0       	ldi	r22, 0x05	; 5
    250c:	82 e0       	ldi	r24, 0x02	; 2
    250e:	0e 94 18 16 	call	0x2c30	; 0x2c30 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_R3_Port,KPD_R3_Pin,DIO_PIN_INPUT);
    2512:	40 e0       	ldi	r20, 0x00	; 0
    2514:	66 e0       	ldi	r22, 0x06	; 6
    2516:	82 e0       	ldi	r24, 0x02	; 2
    2518:	0e 94 18 16 	call	0x2c30	; 0x2c30 <DIO_voidSetPinDirection>
	
	//Setting Rows For Pull UP
	DIO_voidActivePinInPullUpResistance(KPD_R0_Port,KPD_R0_Pin);
    251c:	63 e0       	ldi	r22, 0x03	; 3
    251e:	82 e0       	ldi	r24, 0x02	; 2
    2520:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <DIO_voidActivePinInPullUpResistance>
	DIO_voidActivePinInPullUpResistance(KPD_R1_Port,KPD_R1_Pin);
    2524:	64 e0       	ldi	r22, 0x04	; 4
    2526:	82 e0       	ldi	r24, 0x02	; 2
    2528:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <DIO_voidActivePinInPullUpResistance>
	DIO_voidActivePinInPullUpResistance(KPD_R2_Port,KPD_R2_Pin);
    252c:	65 e0       	ldi	r22, 0x05	; 5
    252e:	82 e0       	ldi	r24, 0x02	; 2
    2530:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <DIO_voidActivePinInPullUpResistance>
	DIO_voidActivePinInPullUpResistance(KPD_R3_Port,KPD_R3_Pin);
    2534:	66 e0       	ldi	r22, 0x06	; 6
    2536:	82 e0       	ldi	r24, 0x02	; 2
    2538:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <DIO_voidActivePinInPullUpResistance>
    253c:	08 95       	ret

0000253e <KPD_voidGetValue>:
}


void	KPD_voidGetValue(u8* copy_pu8value)
{
    253e:	6f 92       	push	r6
    2540:	7f 92       	push	r7
    2542:	8f 92       	push	r8
    2544:	9f 92       	push	r9
    2546:	af 92       	push	r10
    2548:	bf 92       	push	r11
    254a:	cf 92       	push	r12
    254c:	df 92       	push	r13
    254e:	ef 92       	push	r14
    2550:	ff 92       	push	r15
    2552:	0f 93       	push	r16
    2554:	1f 93       	push	r17
    2556:	cf 93       	push	r28
    2558:	df 93       	push	r29
    255a:	cd b7       	in	r28, 0x3d	; 61
    255c:	de b7       	in	r29, 0x3e	; 62
    255e:	6b 97       	sbiw	r28, 0x1b	; 27
    2560:	0f b6       	in	r0, 0x3f	; 63
    2562:	f8 94       	cli
    2564:	de bf       	out	0x3e, r29	; 62
    2566:	0f be       	out	0x3f, r0	; 63
    2568:	cd bf       	out	0x3d, r28	; 61
	if (copy_pu8value != NULL)
    256a:	00 97       	sbiw	r24, 0x00	; 0
    256c:	09 f4       	brne	.+2      	; 0x2570 <KPD_voidGetValue+0x32>
    256e:	7e c0       	rjmp	.+252    	; 0x266c <KPD_voidGetValue+0x12e>
    2570:	5c 01       	movw	r10, r24
	{
		u8	Local_u8ColsPort[3]={KPD_C0_Port,KPD_C1_Port,KPD_C2_Port};
    2572:	81 e0       	ldi	r24, 0x01	; 1
    2574:	88 8f       	std	Y+24, r24	; 0x18
    2576:	89 8f       	std	Y+25, r24	; 0x19
    2578:	8a 8f       	std	Y+26, r24	; 0x1a
		u8	Local_u8ColsPins[3]={KPD_C0_Pin,KPD_C1_Pin,KPD_C2_Pin};
    257a:	34 e0       	ldi	r19, 0x04	; 4
    257c:	3d 8b       	std	Y+21, r19	; 0x15
    257e:	25 e0       	ldi	r18, 0x05	; 5
    2580:	2e 8b       	std	Y+22, r18	; 0x16
    2582:	96 e0       	ldi	r25, 0x06	; 6
    2584:	9f 8b       	std	Y+23, r25	; 0x17
									 
		u8	Local_u8RowsPort[4]={KPD_R0_Port,KPD_R1_Port,KPD_R2_Port,KPD_R3_Port};
    2586:	82 e0       	ldi	r24, 0x02	; 2
    2588:	89 8b       	std	Y+17, r24	; 0x11
    258a:	8a 8b       	std	Y+18, r24	; 0x12
    258c:	8b 8b       	std	Y+19, r24	; 0x13
    258e:	8c 8b       	std	Y+20, r24	; 0x14
		u8	Local_u8RowsPins[4]={KPD_R0_Pin,KPD_R1_Pin,KPD_R2_Pin,KPD_R3_Pin};
    2590:	83 e0       	ldi	r24, 0x03	; 3
    2592:	8d 87       	std	Y+13, r24	; 0x0d
    2594:	3e 87       	std	Y+14, r19	; 0x0e
    2596:	2f 87       	std	Y+15, r18	; 0x0f
    2598:	98 8b       	std	Y+16, r25	; 0x10
		u8	Local_Keys[4][3]   =KPD_Keys;
    259a:	8c e0       	ldi	r24, 0x0C	; 12
    259c:	e6 e6       	ldi	r30, 0x66	; 102
    259e:	f0 e0       	ldi	r31, 0x00	; 0
    25a0:	de 01       	movw	r26, r28
    25a2:	11 96       	adiw	r26, 0x01	; 1
    25a4:	01 90       	ld	r0, Z+
    25a6:	0d 92       	st	X+, r0
    25a8:	8a 95       	dec	r24
    25aa:	e1 f7       	brne	.-8      	; 0x25a4 <KPD_voidGetValue+0x66>
		
		u8	Local_u8ColsCounter,Local_u8RowsCounter;
		u8	Local_u8RowValue;
		
		*copy_pu8value = KPD_Not_Pressed;
    25ac:	8f ef       	ldi	r24, 0xFF	; 255
    25ae:	f5 01       	movw	r30, r10
    25b0:	80 83       	st	Z, r24
		//LOOP Columns
		for (Local_u8ColsCounter=0 ; Local_u8ColsCounter<3 ; Local_u8ColsCounter++)
    25b2:	81 2c       	mov	r8, r1
    25b4:	57 c0       	rjmp	.+174    	; 0x2664 <KPD_voidGetValue+0x126>
		{
			//Activate Each Column
			DIO_voidSetPinValue(Local_u8ColsPort[Local_u8ColsCounter] , Local_u8ColsPins[Local_u8ColsCounter],DIO_PIN_LOW);
    25b6:	c8 2c       	mov	r12, r8
    25b8:	d1 2c       	mov	r13, r1
    25ba:	e5 e1       	ldi	r30, 0x15	; 21
    25bc:	f0 e0       	ldi	r31, 0x00	; 0
    25be:	ec 0f       	add	r30, r28
    25c0:	fd 1f       	adc	r31, r29
    25c2:	ec 0d       	add	r30, r12
    25c4:	fd 1d       	adc	r31, r13
    25c6:	60 80       	ld	r6, Z
    25c8:	e8 e1       	ldi	r30, 0x18	; 24
    25ca:	f0 e0       	ldi	r31, 0x00	; 0
    25cc:	ec 0f       	add	r30, r28
    25ce:	fd 1f       	adc	r31, r29
    25d0:	ec 0d       	add	r30, r12
    25d2:	fd 1d       	adc	r31, r13
    25d4:	70 80       	ld	r7, Z
    25d6:	40 e0       	ldi	r20, 0x00	; 0
    25d8:	66 2d       	mov	r22, r6
    25da:	87 2d       	mov	r24, r7
    25dc:	0e 94 98 16 	call	0x2d30	; 0x2d30 <DIO_voidSetPinValue>
			
			//LOOP Rows
			for(Local_u8RowsCounter=0 ; Local_u8RowsCounter<4 ; Local_u8RowsCounter++)
    25e0:	10 e0       	ldi	r17, 0x00	; 0
    25e2:	38 c0       	rjmp	.+112    	; 0x2654 <KPD_voidGetValue+0x116>
			{
				//Get Row Pin Value
				DIO_voidGetPinValue(Local_u8RowsPort[Local_u8RowsCounter] ,Local_u8RowsPins[Local_u8RowsCounter], &Local_u8RowValue );
    25e4:	e1 2e       	mov	r14, r17
    25e6:	f1 2c       	mov	r15, r1
    25e8:	ed e0       	ldi	r30, 0x0D	; 13
    25ea:	f0 e0       	ldi	r31, 0x00	; 0
    25ec:	ec 0f       	add	r30, r28
    25ee:	fd 1f       	adc	r31, r29
    25f0:	ee 0d       	add	r30, r14
    25f2:	ff 1d       	adc	r31, r15
    25f4:	00 81       	ld	r16, Z
    25f6:	e1 e1       	ldi	r30, 0x11	; 17
    25f8:	f0 e0       	ldi	r31, 0x00	; 0
    25fa:	ec 0f       	add	r30, r28
    25fc:	fd 1f       	adc	r31, r29
    25fe:	ee 0d       	add	r30, r14
    2600:	ff 1d       	adc	r31, r15
    2602:	90 80       	ld	r9, Z
    2604:	ae 01       	movw	r20, r28
    2606:	45 5e       	subi	r20, 0xE5	; 229
    2608:	5f 4f       	sbci	r21, 0xFF	; 255
    260a:	60 2f       	mov	r22, r16
    260c:	89 2d       	mov	r24, r9
    260e:	0e 94 18 17 	call	0x2e30	; 0x2e30 <DIO_voidGetPinValue>
				
				// Is Pressed ?
				if (0==Local_u8RowValue)
    2612:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2614:	81 11       	cpse	r24, r1
    2616:	1d c0       	rjmp	.+58     	; 0x2652 <KPD_voidGetValue+0x114>
    2618:	07 c0       	rjmp	.+14     	; 0x2628 <KPD_voidGetValue+0xea>
				{
					//Busy wait for button release
					while(0==Local_u8RowValue)
					{
						DIO_voidGetPinValue(Local_u8RowsPort[Local_u8RowsCounter] ,Local_u8RowsPins[Local_u8RowsCounter], &Local_u8RowValue );
    261a:	ae 01       	movw	r20, r28
    261c:	45 5e       	subi	r20, 0xE5	; 229
    261e:	5f 4f       	sbci	r21, 0xFF	; 255
    2620:	60 2f       	mov	r22, r16
    2622:	89 2d       	mov	r24, r9
    2624:	0e 94 18 17 	call	0x2e30	; 0x2e30 <DIO_voidGetPinValue>
				
				// Is Pressed ?
				if (0==Local_u8RowValue)
				{
					//Busy wait for button release
					while(0==Local_u8RowValue)
    2628:	8b 8d       	ldd	r24, Y+27	; 0x1b
    262a:	88 23       	and	r24, r24
    262c:	b1 f3       	breq	.-20     	; 0x261a <KPD_voidGetValue+0xdc>
					{
						DIO_voidGetPinValue(Local_u8RowsPort[Local_u8RowsCounter] ,Local_u8RowsPins[Local_u8RowsCounter], &Local_u8RowValue );
					}
					//return value
					*copy_pu8value = Local_Keys[Local_u8RowsCounter][Local_u8ColsCounter];
    262e:	c7 01       	movw	r24, r14
    2630:	88 0f       	add	r24, r24
    2632:	99 1f       	adc	r25, r25
    2634:	e8 0e       	add	r14, r24
    2636:	f9 1e       	adc	r15, r25
    2638:	81 e0       	ldi	r24, 0x01	; 1
    263a:	90 e0       	ldi	r25, 0x00	; 0
    263c:	8c 0f       	add	r24, r28
    263e:	9d 1f       	adc	r25, r29
    2640:	e8 0e       	add	r14, r24
    2642:	f9 1e       	adc	r15, r25
    2644:	f7 01       	movw	r30, r14
    2646:	ec 0d       	add	r30, r12
    2648:	fd 1d       	adc	r31, r13
    264a:	80 81       	ld	r24, Z
    264c:	f5 01       	movw	r30, r10
    264e:	80 83       	st	Z, r24
    2650:	0d c0       	rjmp	.+26     	; 0x266c <KPD_voidGetValue+0x12e>
		{
			//Activate Each Column
			DIO_voidSetPinValue(Local_u8ColsPort[Local_u8ColsCounter] , Local_u8ColsPins[Local_u8ColsCounter],DIO_PIN_LOW);
			
			//LOOP Rows
			for(Local_u8RowsCounter=0 ; Local_u8RowsCounter<4 ; Local_u8RowsCounter++)
    2652:	1f 5f       	subi	r17, 0xFF	; 255
    2654:	14 30       	cpi	r17, 0x04	; 4
    2656:	30 f2       	brcs	.-116    	; 0x25e4 <KPD_voidGetValue+0xa6>
					//return value
					*copy_pu8value = Local_Keys[Local_u8RowsCounter][Local_u8ColsCounter];
					return;
				}
			}
			DIO_voidSetPinValue(Local_u8ColsPort[Local_u8ColsCounter],Local_u8ColsPins[Local_u8ColsCounter],DIO_PIN_HIGH);
    2658:	41 e0       	ldi	r20, 0x01	; 1
    265a:	66 2d       	mov	r22, r6
    265c:	87 2d       	mov	r24, r7
    265e:	0e 94 98 16 	call	0x2d30	; 0x2d30 <DIO_voidSetPinValue>
		u8	Local_u8ColsCounter,Local_u8RowsCounter;
		u8	Local_u8RowValue;
		
		*copy_pu8value = KPD_Not_Pressed;
		//LOOP Columns
		for (Local_u8ColsCounter=0 ; Local_u8ColsCounter<3 ; Local_u8ColsCounter++)
    2662:	83 94       	inc	r8
    2664:	f2 e0       	ldi	r31, 0x02	; 2
    2666:	f8 15       	cp	r31, r8
    2668:	08 f0       	brcs	.+2      	; 0x266c <KPD_voidGetValue+0x12e>
    266a:	a5 cf       	rjmp	.-182    	; 0x25b6 <KPD_voidGetValue+0x78>
	}
	else
	{
		
	}
}
    266c:	6b 96       	adiw	r28, 0x1b	; 27
    266e:	0f b6       	in	r0, 0x3f	; 63
    2670:	f8 94       	cli
    2672:	de bf       	out	0x3e, r29	; 62
    2674:	0f be       	out	0x3f, r0	; 63
    2676:	cd bf       	out	0x3d, r28	; 61
    2678:	df 91       	pop	r29
    267a:	cf 91       	pop	r28
    267c:	1f 91       	pop	r17
    267e:	0f 91       	pop	r16
    2680:	ff 90       	pop	r15
    2682:	ef 90       	pop	r14
    2684:	df 90       	pop	r13
    2686:	cf 90       	pop	r12
    2688:	bf 90       	pop	r11
    268a:	af 90       	pop	r10
    268c:	9f 90       	pop	r9
    268e:	8f 90       	pop	r8
    2690:	7f 90       	pop	r7
    2692:	6f 90       	pop	r6
    2694:	08 95       	ret

00002696 <PRV_voidWriteHalfPort>:
		
		/* Enable Pulse *//* H => L */
		DIO_voidSetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
		_delay_ms(1);
		DIO_voidSetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
}
    2696:	cf 93       	push	r28
    2698:	c8 2f       	mov	r28, r24
    269a:	80 ff       	sbrs	r24, 0
    269c:	06 c0       	rjmp	.+12     	; 0x26aa <PRV_voidWriteHalfPort+0x14>
    269e:	41 e0       	ldi	r20, 0x01	; 1
    26a0:	64 e0       	ldi	r22, 0x04	; 4
    26a2:	80 e0       	ldi	r24, 0x00	; 0
    26a4:	0e 94 98 16 	call	0x2d30	; 0x2d30 <DIO_voidSetPinValue>
    26a8:	05 c0       	rjmp	.+10     	; 0x26b4 <PRV_voidWriteHalfPort+0x1e>
    26aa:	40 e0       	ldi	r20, 0x00	; 0
    26ac:	64 e0       	ldi	r22, 0x04	; 4
    26ae:	80 e0       	ldi	r24, 0x00	; 0
    26b0:	0e 94 98 16 	call	0x2d30	; 0x2d30 <DIO_voidSetPinValue>
    26b4:	c1 ff       	sbrs	r28, 1
    26b6:	06 c0       	rjmp	.+12     	; 0x26c4 <PRV_voidWriteHalfPort+0x2e>
    26b8:	41 e0       	ldi	r20, 0x01	; 1
    26ba:	65 e0       	ldi	r22, 0x05	; 5
    26bc:	80 e0       	ldi	r24, 0x00	; 0
    26be:	0e 94 98 16 	call	0x2d30	; 0x2d30 <DIO_voidSetPinValue>
    26c2:	05 c0       	rjmp	.+10     	; 0x26ce <PRV_voidWriteHalfPort+0x38>
    26c4:	40 e0       	ldi	r20, 0x00	; 0
    26c6:	65 e0       	ldi	r22, 0x05	; 5
    26c8:	80 e0       	ldi	r24, 0x00	; 0
    26ca:	0e 94 98 16 	call	0x2d30	; 0x2d30 <DIO_voidSetPinValue>
    26ce:	c2 ff       	sbrs	r28, 2
    26d0:	06 c0       	rjmp	.+12     	; 0x26de <PRV_voidWriteHalfPort+0x48>
    26d2:	41 e0       	ldi	r20, 0x01	; 1
    26d4:	66 e0       	ldi	r22, 0x06	; 6
    26d6:	80 e0       	ldi	r24, 0x00	; 0
    26d8:	0e 94 98 16 	call	0x2d30	; 0x2d30 <DIO_voidSetPinValue>
    26dc:	05 c0       	rjmp	.+10     	; 0x26e8 <PRV_voidWriteHalfPort+0x52>
    26de:	40 e0       	ldi	r20, 0x00	; 0
    26e0:	66 e0       	ldi	r22, 0x06	; 6
    26e2:	80 e0       	ldi	r24, 0x00	; 0
    26e4:	0e 94 98 16 	call	0x2d30	; 0x2d30 <DIO_voidSetPinValue>
    26e8:	c3 ff       	sbrs	r28, 3
    26ea:	06 c0       	rjmp	.+12     	; 0x26f8 <PRV_voidWriteHalfPort+0x62>
    26ec:	41 e0       	ldi	r20, 0x01	; 1
    26ee:	67 e0       	ldi	r22, 0x07	; 7
    26f0:	80 e0       	ldi	r24, 0x00	; 0
    26f2:	0e 94 98 16 	call	0x2d30	; 0x2d30 <DIO_voidSetPinValue>
    26f6:	05 c0       	rjmp	.+10     	; 0x2702 <PRV_voidWriteHalfPort+0x6c>
    26f8:	40 e0       	ldi	r20, 0x00	; 0
    26fa:	67 e0       	ldi	r22, 0x07	; 7
    26fc:	80 e0       	ldi	r24, 0x00	; 0
    26fe:	0e 94 98 16 	call	0x2d30	; 0x2d30 <DIO_voidSetPinValue>
    2702:	cf 91       	pop	r28
    2704:	08 95       	ret

00002706 <LCD_voidSendCommand>:
    2706:	cf 93       	push	r28
    2708:	c8 2f       	mov	r28, r24
    270a:	40 e0       	ldi	r20, 0x00	; 0
    270c:	61 e0       	ldi	r22, 0x01	; 1
    270e:	81 e0       	ldi	r24, 0x01	; 1
    2710:	0e 94 98 16 	call	0x2d30	; 0x2d30 <DIO_voidSetPinValue>
    2714:	40 e0       	ldi	r20, 0x00	; 0
    2716:	62 e0       	ldi	r22, 0x02	; 2
    2718:	81 e0       	ldi	r24, 0x01	; 1
    271a:	0e 94 98 16 	call	0x2d30	; 0x2d30 <DIO_voidSetPinValue>
    271e:	8c 2f       	mov	r24, r28
    2720:	82 95       	swap	r24
    2722:	8f 70       	andi	r24, 0x0F	; 15
    2724:	0e 94 4b 13 	call	0x2696	; 0x2696 <PRV_voidWriteHalfPort>
    2728:	41 e0       	ldi	r20, 0x01	; 1
    272a:	63 e0       	ldi	r22, 0x03	; 3
    272c:	81 e0       	ldi	r24, 0x01	; 1
    272e:	0e 94 98 16 	call	0x2d30	; 0x2d30 <DIO_voidSetPinValue>
    2732:	8f e9       	ldi	r24, 0x9F	; 159
    2734:	9f e0       	ldi	r25, 0x0F	; 15
    2736:	01 97       	sbiw	r24, 0x01	; 1
    2738:	f1 f7       	brne	.-4      	; 0x2736 <LCD_voidSendCommand+0x30>
    273a:	00 c0       	rjmp	.+0      	; 0x273c <LCD_voidSendCommand+0x36>
    273c:	00 00       	nop
    273e:	40 e0       	ldi	r20, 0x00	; 0
    2740:	63 e0       	ldi	r22, 0x03	; 3
    2742:	81 e0       	ldi	r24, 0x01	; 1
    2744:	0e 94 98 16 	call	0x2d30	; 0x2d30 <DIO_voidSetPinValue>
    2748:	8c 2f       	mov	r24, r28
    274a:	0e 94 4b 13 	call	0x2696	; 0x2696 <PRV_voidWriteHalfPort>
    274e:	41 e0       	ldi	r20, 0x01	; 1
    2750:	63 e0       	ldi	r22, 0x03	; 3
    2752:	81 e0       	ldi	r24, 0x01	; 1
    2754:	0e 94 98 16 	call	0x2d30	; 0x2d30 <DIO_voidSetPinValue>
    2758:	8f e9       	ldi	r24, 0x9F	; 159
    275a:	9f e0       	ldi	r25, 0x0F	; 15
    275c:	01 97       	sbiw	r24, 0x01	; 1
    275e:	f1 f7       	brne	.-4      	; 0x275c <LCD_voidSendCommand+0x56>
    2760:	00 c0       	rjmp	.+0      	; 0x2762 <LCD_voidSendCommand+0x5c>
    2762:	00 00       	nop
    2764:	40 e0       	ldi	r20, 0x00	; 0
    2766:	63 e0       	ldi	r22, 0x03	; 3
    2768:	81 e0       	ldi	r24, 0x01	; 1
    276a:	0e 94 98 16 	call	0x2d30	; 0x2d30 <DIO_voidSetPinValue>
    276e:	cf 91       	pop	r28
    2770:	08 95       	ret

00002772 <LCD_voidInit>:
    2772:	41 e0       	ldi	r20, 0x01	; 1
    2774:	61 e0       	ldi	r22, 0x01	; 1
    2776:	81 e0       	ldi	r24, 0x01	; 1
    2778:	0e 94 18 16 	call	0x2c30	; 0x2c30 <DIO_voidSetPinDirection>
    277c:	41 e0       	ldi	r20, 0x01	; 1
    277e:	62 e0       	ldi	r22, 0x02	; 2
    2780:	81 e0       	ldi	r24, 0x01	; 1
    2782:	0e 94 18 16 	call	0x2c30	; 0x2c30 <DIO_voidSetPinDirection>
    2786:	41 e0       	ldi	r20, 0x01	; 1
    2788:	63 e0       	ldi	r22, 0x03	; 3
    278a:	81 e0       	ldi	r24, 0x01	; 1
    278c:	0e 94 18 16 	call	0x2c30	; 0x2c30 <DIO_voidSetPinDirection>
    2790:	41 e0       	ldi	r20, 0x01	; 1
    2792:	64 e0       	ldi	r22, 0x04	; 4
    2794:	80 e0       	ldi	r24, 0x00	; 0
    2796:	0e 94 18 16 	call	0x2c30	; 0x2c30 <DIO_voidSetPinDirection>
    279a:	41 e0       	ldi	r20, 0x01	; 1
    279c:	65 e0       	ldi	r22, 0x05	; 5
    279e:	80 e0       	ldi	r24, 0x00	; 0
    27a0:	0e 94 18 16 	call	0x2c30	; 0x2c30 <DIO_voidSetPinDirection>
    27a4:	41 e0       	ldi	r20, 0x01	; 1
    27a6:	66 e0       	ldi	r22, 0x06	; 6
    27a8:	80 e0       	ldi	r24, 0x00	; 0
    27aa:	0e 94 18 16 	call	0x2c30	; 0x2c30 <DIO_voidSetPinDirection>
    27ae:	41 e0       	ldi	r20, 0x01	; 1
    27b0:	67 e0       	ldi	r22, 0x07	; 7
    27b2:	80 e0       	ldi	r24, 0x00	; 0
    27b4:	0e 94 18 16 	call	0x2c30	; 0x2c30 <DIO_voidSetPinDirection>
    27b8:	2f e7       	ldi	r18, 0x7F	; 127
    27ba:	85 eb       	ldi	r24, 0xB5	; 181
    27bc:	91 e0       	ldi	r25, 0x01	; 1
    27be:	21 50       	subi	r18, 0x01	; 1
    27c0:	80 40       	sbci	r24, 0x00	; 0
    27c2:	90 40       	sbci	r25, 0x00	; 0
    27c4:	e1 f7       	brne	.-8      	; 0x27be <LCD_voidInit+0x4c>
    27c6:	00 c0       	rjmp	.+0      	; 0x27c8 <LCD_voidInit+0x56>
    27c8:	00 00       	nop
    27ca:	40 e0       	ldi	r20, 0x00	; 0
    27cc:	61 e0       	ldi	r22, 0x01	; 1
    27ce:	81 e0       	ldi	r24, 0x01	; 1
    27d0:	0e 94 98 16 	call	0x2d30	; 0x2d30 <DIO_voidSetPinValue>
    27d4:	40 e0       	ldi	r20, 0x00	; 0
    27d6:	62 e0       	ldi	r22, 0x02	; 2
    27d8:	81 e0       	ldi	r24, 0x01	; 1
    27da:	0e 94 98 16 	call	0x2d30	; 0x2d30 <DIO_voidSetPinValue>
    27de:	82 e0       	ldi	r24, 0x02	; 2
    27e0:	0e 94 4b 13 	call	0x2696	; 0x2696 <PRV_voidWriteHalfPort>
    27e4:	41 e0       	ldi	r20, 0x01	; 1
    27e6:	63 e0       	ldi	r22, 0x03	; 3
    27e8:	81 e0       	ldi	r24, 0x01	; 1
    27ea:	0e 94 98 16 	call	0x2d30	; 0x2d30 <DIO_voidSetPinValue>
    27ee:	8f e9       	ldi	r24, 0x9F	; 159
    27f0:	9f e0       	ldi	r25, 0x0F	; 15
    27f2:	01 97       	sbiw	r24, 0x01	; 1
    27f4:	f1 f7       	brne	.-4      	; 0x27f2 <LCD_voidInit+0x80>
    27f6:	00 c0       	rjmp	.+0      	; 0x27f8 <LCD_voidInit+0x86>
    27f8:	00 00       	nop
    27fa:	40 e0       	ldi	r20, 0x00	; 0
    27fc:	63 e0       	ldi	r22, 0x03	; 3
    27fe:	81 e0       	ldi	r24, 0x01	; 1
    2800:	0e 94 98 16 	call	0x2d30	; 0x2d30 <DIO_voidSetPinValue>
    2804:	88 e2       	ldi	r24, 0x28	; 40
    2806:	0e 94 83 13 	call	0x2706	; 0x2706 <LCD_voidSendCommand>
    280a:	90 ef       	ldi	r25, 0xF0	; 240
    280c:	9a 95       	dec	r25
    280e:	f1 f7       	brne	.-4      	; 0x280c <LCD_voidInit+0x9a>
    2810:	8c e0       	ldi	r24, 0x0C	; 12
    2812:	0e 94 83 13 	call	0x2706	; 0x2706 <LCD_voidSendCommand>
    2816:	20 ef       	ldi	r18, 0xF0	; 240
    2818:	2a 95       	dec	r18
    281a:	f1 f7       	brne	.-4      	; 0x2818 <LCD_voidInit+0xa6>
    281c:	81 e0       	ldi	r24, 0x01	; 1
    281e:	0e 94 83 13 	call	0x2706	; 0x2706 <LCD_voidSendCommand>
    2822:	8f e3       	ldi	r24, 0x3F	; 63
    2824:	9f e1       	ldi	r25, 0x1F	; 31
    2826:	01 97       	sbiw	r24, 0x01	; 1
    2828:	f1 f7       	brne	.-4      	; 0x2826 <LCD_voidInit+0xb4>
    282a:	00 c0       	rjmp	.+0      	; 0x282c <LCD_voidInit+0xba>
    282c:	00 00       	nop
    282e:	86 e0       	ldi	r24, 0x06	; 6
    2830:	0e 94 83 13 	call	0x2706	; 0x2706 <LCD_voidSendCommand>
    2834:	08 95       	ret

00002836 <LCD_voidDisplayChar>:
    2836:	cf 93       	push	r28
    2838:	c8 2f       	mov	r28, r24
    283a:	41 e0       	ldi	r20, 0x01	; 1
    283c:	61 e0       	ldi	r22, 0x01	; 1
    283e:	81 e0       	ldi	r24, 0x01	; 1
    2840:	0e 94 98 16 	call	0x2d30	; 0x2d30 <DIO_voidSetPinValue>
    2844:	40 e0       	ldi	r20, 0x00	; 0
    2846:	62 e0       	ldi	r22, 0x02	; 2
    2848:	81 e0       	ldi	r24, 0x01	; 1
    284a:	0e 94 98 16 	call	0x2d30	; 0x2d30 <DIO_voidSetPinValue>
    284e:	8c 2f       	mov	r24, r28
    2850:	82 95       	swap	r24
    2852:	8f 70       	andi	r24, 0x0F	; 15
    2854:	0e 94 4b 13 	call	0x2696	; 0x2696 <PRV_voidWriteHalfPort>
    2858:	41 e0       	ldi	r20, 0x01	; 1
    285a:	63 e0       	ldi	r22, 0x03	; 3
    285c:	81 e0       	ldi	r24, 0x01	; 1
    285e:	0e 94 98 16 	call	0x2d30	; 0x2d30 <DIO_voidSetPinValue>
    2862:	8f e9       	ldi	r24, 0x9F	; 159
    2864:	9f e0       	ldi	r25, 0x0F	; 15
    2866:	01 97       	sbiw	r24, 0x01	; 1
    2868:	f1 f7       	brne	.-4      	; 0x2866 <LCD_voidDisplayChar+0x30>
    286a:	00 c0       	rjmp	.+0      	; 0x286c <LCD_voidDisplayChar+0x36>
    286c:	00 00       	nop
    286e:	40 e0       	ldi	r20, 0x00	; 0
    2870:	63 e0       	ldi	r22, 0x03	; 3
    2872:	81 e0       	ldi	r24, 0x01	; 1
    2874:	0e 94 98 16 	call	0x2d30	; 0x2d30 <DIO_voidSetPinValue>
    2878:	8c 2f       	mov	r24, r28
    287a:	0e 94 4b 13 	call	0x2696	; 0x2696 <PRV_voidWriteHalfPort>
    287e:	41 e0       	ldi	r20, 0x01	; 1
    2880:	63 e0       	ldi	r22, 0x03	; 3
    2882:	81 e0       	ldi	r24, 0x01	; 1
    2884:	0e 94 98 16 	call	0x2d30	; 0x2d30 <DIO_voidSetPinValue>
    2888:	8f e9       	ldi	r24, 0x9F	; 159
    288a:	9f e0       	ldi	r25, 0x0F	; 15
    288c:	01 97       	sbiw	r24, 0x01	; 1
    288e:	f1 f7       	brne	.-4      	; 0x288c <LCD_voidDisplayChar+0x56>
    2890:	00 c0       	rjmp	.+0      	; 0x2892 <LCD_voidDisplayChar+0x5c>
    2892:	00 00       	nop
    2894:	40 e0       	ldi	r20, 0x00	; 0
    2896:	63 e0       	ldi	r22, 0x03	; 3
    2898:	81 e0       	ldi	r24, 0x01	; 1
    289a:	0e 94 98 16 	call	0x2d30	; 0x2d30 <DIO_voidSetPinValue>
    289e:	cf 91       	pop	r28
    28a0:	08 95       	ret

000028a2 <LCD_voidDisplayString>:
    28a2:	0f 93       	push	r16
    28a4:	1f 93       	push	r17
    28a6:	cf 93       	push	r28
    28a8:	00 97       	sbiw	r24, 0x00	; 0
    28aa:	29 f4       	brne	.+10     	; 0x28b6 <LCD_voidDisplayString+0x14>
    28ac:	0c c0       	rjmp	.+24     	; 0x28c6 <LCD_voidDisplayString+0x24>
    28ae:	0e 94 1b 14 	call	0x2836	; 0x2836 <LCD_voidDisplayChar>
    28b2:	cf 5f       	subi	r28, 0xFF	; 255
    28b4:	02 c0       	rjmp	.+4      	; 0x28ba <LCD_voidDisplayString+0x18>
    28b6:	8c 01       	movw	r16, r24
    28b8:	c0 e0       	ldi	r28, 0x00	; 0
    28ba:	f8 01       	movw	r30, r16
    28bc:	ec 0f       	add	r30, r28
    28be:	f1 1d       	adc	r31, r1
    28c0:	80 81       	ld	r24, Z
    28c2:	81 11       	cpse	r24, r1
    28c4:	f4 cf       	rjmp	.-24     	; 0x28ae <LCD_voidDisplayString+0xc>
    28c6:	cf 91       	pop	r28
    28c8:	1f 91       	pop	r17
    28ca:	0f 91       	pop	r16
    28cc:	08 95       	ret

000028ce <LCD_voidDisplayStringDelay>:
    28ce:	0f 93       	push	r16
    28d0:	1f 93       	push	r17
    28d2:	cf 93       	push	r28
    28d4:	00 97       	sbiw	r24, 0x00	; 0
    28d6:	71 f4       	brne	.+28     	; 0x28f4 <LCD_voidDisplayStringDelay+0x26>
    28d8:	15 c0       	rjmp	.+42     	; 0x2904 <LCD_voidDisplayStringDelay+0x36>
    28da:	0e 94 1b 14 	call	0x2836	; 0x2836 <LCD_voidDisplayChar>
    28de:	cf 5f       	subi	r28, 0xFF	; 255
    28e0:	2f ef       	ldi	r18, 0xFF	; 255
    28e2:	80 e7       	ldi	r24, 0x70	; 112
    28e4:	92 e0       	ldi	r25, 0x02	; 2
    28e6:	21 50       	subi	r18, 0x01	; 1
    28e8:	80 40       	sbci	r24, 0x00	; 0
    28ea:	90 40       	sbci	r25, 0x00	; 0
    28ec:	e1 f7       	brne	.-8      	; 0x28e6 <LCD_voidDisplayStringDelay+0x18>
    28ee:	00 c0       	rjmp	.+0      	; 0x28f0 <LCD_voidDisplayStringDelay+0x22>
    28f0:	00 00       	nop
    28f2:	02 c0       	rjmp	.+4      	; 0x28f8 <LCD_voidDisplayStringDelay+0x2a>
    28f4:	8c 01       	movw	r16, r24
    28f6:	c0 e0       	ldi	r28, 0x00	; 0
    28f8:	f8 01       	movw	r30, r16
    28fa:	ec 0f       	add	r30, r28
    28fc:	f1 1d       	adc	r31, r1
    28fe:	80 81       	ld	r24, Z
    2900:	81 11       	cpse	r24, r1
    2902:	eb cf       	rjmp	.-42     	; 0x28da <LCD_voidDisplayStringDelay+0xc>
    2904:	cf 91       	pop	r28
    2906:	1f 91       	pop	r17
    2908:	0f 91       	pop	r16
    290a:	08 95       	ret

0000290c <LCD_voidDisplayNumber>:
    290c:	0f 93       	push	r16
    290e:	1f 93       	push	r17
    2910:	cf 93       	push	r28
    2912:	df 93       	push	r29
    2914:	00 d0       	rcall	.+0      	; 0x2916 <LCD_voidDisplayNumber+0xa>
    2916:	00 d0       	rcall	.+0      	; 0x2918 <LCD_voidDisplayNumber+0xc>
    2918:	1f 92       	push	r1
    291a:	cd b7       	in	r28, 0x3d	; 61
    291c:	de b7       	in	r29, 0x3e	; 62
    291e:	26 2f       	mov	r18, r22
    2920:	10 e0       	ldi	r17, 0x00	; 0
    2922:	08 c0       	rjmp	.+16     	; 0x2934 <LCD_voidDisplayNumber+0x28>
    2924:	1f 5f       	subi	r17, 0xFF	; 255
    2926:	ed ec       	ldi	r30, 0xCD	; 205
    2928:	6e 9f       	mul	r22, r30
    292a:	61 2d       	mov	r22, r1
    292c:	11 24       	eor	r1, r1
    292e:	66 95       	lsr	r22
    2930:	66 95       	lsr	r22
    2932:	66 95       	lsr	r22
    2934:	61 11       	cpse	r22, r1
    2936:	f6 cf       	rjmp	.-20     	; 0x2924 <LCD_voidDisplayNumber+0x18>
    2938:	00 e0       	ldi	r16, 0x00	; 0
    293a:	1a c0       	rjmp	.+52     	; 0x2970 <LCD_voidDisplayNumber+0x64>
    293c:	62 2f       	mov	r22, r18
    293e:	2a e0       	ldi	r18, 0x0A	; 10
    2940:	30 e0       	ldi	r19, 0x00	; 0
    2942:	40 e0       	ldi	r20, 0x00	; 0
    2944:	50 e0       	ldi	r21, 0x00	; 0
    2946:	0e 94 b0 1c 	call	0x3960	; 0x3960 <__udivmodsi4>
    294a:	73 2f       	mov	r23, r19
    294c:	84 2f       	mov	r24, r20
    294e:	95 2f       	mov	r25, r21
    2950:	a0 2f       	mov	r26, r16
    2952:	b0 e0       	ldi	r27, 0x00	; 0
    2954:	11 96       	adiw	r26, 0x01	; 1
    2956:	e1 2f       	mov	r30, r17
    2958:	f0 e0       	ldi	r31, 0x00	; 0
    295a:	ea 1b       	sub	r30, r26
    295c:	fb 0b       	sbc	r31, r27
    295e:	41 e0       	ldi	r20, 0x01	; 1
    2960:	50 e0       	ldi	r21, 0x00	; 0
    2962:	4c 0f       	add	r20, r28
    2964:	5d 1f       	adc	r21, r29
    2966:	e4 0f       	add	r30, r20
    2968:	f5 1f       	adc	r31, r21
    296a:	60 5d       	subi	r22, 0xD0	; 208
    296c:	60 83       	st	Z, r22
    296e:	0f 5f       	subi	r16, 0xFF	; 255
    2970:	01 17       	cp	r16, r17
    2972:	20 f3       	brcs	.-56     	; 0x293c <LCD_voidDisplayNumber+0x30>
    2974:	e1 e0       	ldi	r30, 0x01	; 1
    2976:	f0 e0       	ldi	r31, 0x00	; 0
    2978:	ec 0f       	add	r30, r28
    297a:	fd 1f       	adc	r31, r29
    297c:	e1 0f       	add	r30, r17
    297e:	f1 1d       	adc	r31, r1
    2980:	10 82       	st	Z, r1
    2982:	10 e0       	ldi	r17, 0x00	; 0
    2984:	03 c0       	rjmp	.+6      	; 0x298c <LCD_voidDisplayNumber+0x80>
    2986:	0e 94 1b 14 	call	0x2836	; 0x2836 <LCD_voidDisplayChar>
    298a:	1f 5f       	subi	r17, 0xFF	; 255
    298c:	e1 e0       	ldi	r30, 0x01	; 1
    298e:	f0 e0       	ldi	r31, 0x00	; 0
    2990:	ec 0f       	add	r30, r28
    2992:	fd 1f       	adc	r31, r29
    2994:	e1 0f       	add	r30, r17
    2996:	f1 1d       	adc	r31, r1
    2998:	80 81       	ld	r24, Z
    299a:	81 11       	cpse	r24, r1
    299c:	f4 cf       	rjmp	.-24     	; 0x2986 <LCD_voidDisplayNumber+0x7a>
    299e:	0f 90       	pop	r0
    29a0:	0f 90       	pop	r0
    29a2:	0f 90       	pop	r0
    29a4:	0f 90       	pop	r0
    29a6:	0f 90       	pop	r0
    29a8:	df 91       	pop	r29
    29aa:	cf 91       	pop	r28
    29ac:	1f 91       	pop	r17
    29ae:	0f 91       	pop	r16
    29b0:	08 95       	ret

000029b2 <LCD_voidClear>:
    29b2:	40 e0       	ldi	r20, 0x00	; 0
    29b4:	61 e0       	ldi	r22, 0x01	; 1
    29b6:	81 e0       	ldi	r24, 0x01	; 1
    29b8:	0e 94 98 16 	call	0x2d30	; 0x2d30 <DIO_voidSetPinValue>
    29bc:	40 e0       	ldi	r20, 0x00	; 0
    29be:	62 e0       	ldi	r22, 0x02	; 2
    29c0:	81 e0       	ldi	r24, 0x01	; 1
    29c2:	0e 94 98 16 	call	0x2d30	; 0x2d30 <DIO_voidSetPinValue>
    29c6:	80 e0       	ldi	r24, 0x00	; 0
    29c8:	0e 94 4b 13 	call	0x2696	; 0x2696 <PRV_voidWriteHalfPort>
    29cc:	41 e0       	ldi	r20, 0x01	; 1
    29ce:	63 e0       	ldi	r22, 0x03	; 3
    29d0:	81 e0       	ldi	r24, 0x01	; 1
    29d2:	0e 94 98 16 	call	0x2d30	; 0x2d30 <DIO_voidSetPinValue>
    29d6:	8f e9       	ldi	r24, 0x9F	; 159
    29d8:	9f e0       	ldi	r25, 0x0F	; 15
    29da:	01 97       	sbiw	r24, 0x01	; 1
    29dc:	f1 f7       	brne	.-4      	; 0x29da <LCD_voidClear+0x28>
    29de:	00 c0       	rjmp	.+0      	; 0x29e0 <LCD_voidClear+0x2e>
    29e0:	00 00       	nop
    29e2:	40 e0       	ldi	r20, 0x00	; 0
    29e4:	63 e0       	ldi	r22, 0x03	; 3
    29e6:	81 e0       	ldi	r24, 0x01	; 1
    29e8:	0e 94 98 16 	call	0x2d30	; 0x2d30 <DIO_voidSetPinValue>
    29ec:	81 e0       	ldi	r24, 0x01	; 1
    29ee:	0e 94 4b 13 	call	0x2696	; 0x2696 <PRV_voidWriteHalfPort>
    29f2:	41 e0       	ldi	r20, 0x01	; 1
    29f4:	63 e0       	ldi	r22, 0x03	; 3
    29f6:	81 e0       	ldi	r24, 0x01	; 1
    29f8:	0e 94 98 16 	call	0x2d30	; 0x2d30 <DIO_voidSetPinValue>
    29fc:	8f e9       	ldi	r24, 0x9F	; 159
    29fe:	9f e0       	ldi	r25, 0x0F	; 15
    2a00:	01 97       	sbiw	r24, 0x01	; 1
    2a02:	f1 f7       	brne	.-4      	; 0x2a00 <LCD_voidClear+0x4e>
    2a04:	00 c0       	rjmp	.+0      	; 0x2a06 <LCD_voidClear+0x54>
    2a06:	00 00       	nop
    2a08:	40 e0       	ldi	r20, 0x00	; 0
    2a0a:	63 e0       	ldi	r22, 0x03	; 3
    2a0c:	81 e0       	ldi	r24, 0x01	; 1
    2a0e:	0e 94 98 16 	call	0x2d30	; 0x2d30 <DIO_voidSetPinValue>
    2a12:	08 95       	ret

00002a14 <LCD_voidShiftCursor>:
    2a14:	cf 93       	push	r28
    2a16:	c8 2f       	mov	r28, r24
    2a18:	40 e0       	ldi	r20, 0x00	; 0
    2a1a:	61 e0       	ldi	r22, 0x01	; 1
    2a1c:	81 e0       	ldi	r24, 0x01	; 1
    2a1e:	0e 94 98 16 	call	0x2d30	; 0x2d30 <DIO_voidSetPinValue>
    2a22:	40 e0       	ldi	r20, 0x00	; 0
    2a24:	62 e0       	ldi	r22, 0x02	; 2
    2a26:	81 e0       	ldi	r24, 0x01	; 1
    2a28:	0e 94 98 16 	call	0x2d30	; 0x2d30 <DIO_voidSetPinValue>
    2a2c:	8c 2f       	mov	r24, r28
    2a2e:	82 95       	swap	r24
    2a30:	8f 70       	andi	r24, 0x0F	; 15
    2a32:	0e 94 4b 13 	call	0x2696	; 0x2696 <PRV_voidWriteHalfPort>
    2a36:	41 e0       	ldi	r20, 0x01	; 1
    2a38:	63 e0       	ldi	r22, 0x03	; 3
    2a3a:	81 e0       	ldi	r24, 0x01	; 1
    2a3c:	0e 94 98 16 	call	0x2d30	; 0x2d30 <DIO_voidSetPinValue>
    2a40:	8f e9       	ldi	r24, 0x9F	; 159
    2a42:	9f e0       	ldi	r25, 0x0F	; 15
    2a44:	01 97       	sbiw	r24, 0x01	; 1
    2a46:	f1 f7       	brne	.-4      	; 0x2a44 <LCD_voidShiftCursor+0x30>
    2a48:	00 c0       	rjmp	.+0      	; 0x2a4a <LCD_voidShiftCursor+0x36>
    2a4a:	00 00       	nop
    2a4c:	40 e0       	ldi	r20, 0x00	; 0
    2a4e:	63 e0       	ldi	r22, 0x03	; 3
    2a50:	81 e0       	ldi	r24, 0x01	; 1
    2a52:	0e 94 98 16 	call	0x2d30	; 0x2d30 <DIO_voidSetPinValue>
    2a56:	8c 2f       	mov	r24, r28
    2a58:	0e 94 4b 13 	call	0x2696	; 0x2696 <PRV_voidWriteHalfPort>
    2a5c:	41 e0       	ldi	r20, 0x01	; 1
    2a5e:	63 e0       	ldi	r22, 0x03	; 3
    2a60:	81 e0       	ldi	r24, 0x01	; 1
    2a62:	0e 94 98 16 	call	0x2d30	; 0x2d30 <DIO_voidSetPinValue>
    2a66:	8f e9       	ldi	r24, 0x9F	; 159
    2a68:	9f e0       	ldi	r25, 0x0F	; 15
    2a6a:	01 97       	sbiw	r24, 0x01	; 1
    2a6c:	f1 f7       	brne	.-4      	; 0x2a6a <LCD_voidShiftCursor+0x56>
    2a6e:	00 c0       	rjmp	.+0      	; 0x2a70 <LCD_voidShiftCursor+0x5c>
    2a70:	00 00       	nop
    2a72:	40 e0       	ldi	r20, 0x00	; 0
    2a74:	63 e0       	ldi	r22, 0x03	; 3
    2a76:	81 e0       	ldi	r24, 0x01	; 1
    2a78:	0e 94 98 16 	call	0x2d30	; 0x2d30 <DIO_voidSetPinValue>
    2a7c:	cf 91       	pop	r28
    2a7e:	08 95       	ret

00002a80 <LCD_voidGoTOSpecificPosition>:


void LCD_voidGoTOSpecificPosition(u8 copy_u8LineNumber,u8 copy_u8Position)
{
    2a80:	cf 93       	push	r28
    2a82:	df 93       	push	r29
	if(copy_u8Position<40)
    2a84:	68 32       	cpi	r22, 0x28	; 40
    2a86:	a0 f4       	brcc	.+40     	; 0x2ab0 <LCD_voidGoTOSpecificPosition+0x30>
    2a88:	c6 2f       	mov	r28, r22
    2a8a:	d8 2f       	mov	r29, r24
	{
		//cmnd to return cursor to home position
		LCD_voidSendCommand(0b00000010);
    2a8c:	82 e0       	ldi	r24, 0x02	; 2
    2a8e:	0e 94 83 13 	call	0x2706	; 0x2706 <LCD_voidSendCommand>
		
		switch(copy_u8LineNumber)
    2a92:	d1 30       	cpi	r29, 0x01	; 1
    2a94:	19 f0       	breq	.+6      	; 0x2a9c <LCD_voidGoTOSpecificPosition+0x1c>
    2a96:	d2 30       	cpi	r29, 0x02	; 2
    2a98:	31 f0       	breq	.+12     	; 0x2aa6 <LCD_voidGoTOSpecificPosition+0x26>
    2a9a:	0a c0       	rjmp	.+20     	; 0x2ab0 <LCD_voidGoTOSpecificPosition+0x30>
		{
			case LCD_LINE_ONE:
			
			LCD_voidSendCommand(0b10000000|copy_u8Position);
    2a9c:	8c 2f       	mov	r24, r28
    2a9e:	80 68       	ori	r24, 0x80	; 128
    2aa0:	0e 94 83 13 	call	0x2706	; 0x2706 <LCD_voidSendCommand>
		
			
			break;
    2aa4:	05 c0       	rjmp	.+10     	; 0x2ab0 <LCD_voidGoTOSpecificPosition+0x30>
			
			case LCD_LINE_TWO:

			LCD_voidSendCommand(0b10000000|(copy_u8Position+0x40));
    2aa6:	80 e4       	ldi	r24, 0x40	; 64
    2aa8:	8c 0f       	add	r24, r28
    2aaa:	80 68       	ori	r24, 0x80	; 128
    2aac:	0e 94 83 13 	call	0x2706	; 0x2706 <LCD_voidSendCommand>
		//error state
	}
	
	
	
}
    2ab0:	df 91       	pop	r29
    2ab2:	cf 91       	pop	r28
    2ab4:	08 95       	ret

00002ab6 <LCD_voidPwdEffect>:
    2ab6:	2f ef       	ldi	r18, 0xFF	; 255
    2ab8:	83 ec       	ldi	r24, 0xC3	; 195
    2aba:	99 e0       	ldi	r25, 0x09	; 9
    2abc:	21 50       	subi	r18, 0x01	; 1
    2abe:	80 40       	sbci	r24, 0x00	; 0
    2ac0:	90 40       	sbci	r25, 0x00	; 0
    2ac2:	e1 f7       	brne	.-8      	; 0x2abc <LCD_voidPwdEffect+0x6>
    2ac4:	00 c0       	rjmp	.+0      	; 0x2ac6 <LCD_voidPwdEffect+0x10>
    2ac6:	00 00       	nop
void LCD_voidPwdEffect()
{
	//this function replaces the pwd char with * to hide pwd after
	//some delay 
	_delay_ms(200);
	LCD_voidShiftCursor(Cursor_ShiftLeft);
    2ac8:	80 e1       	ldi	r24, 0x10	; 16
    2aca:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <LCD_voidShiftCursor>
	LCD_voidDisplayChar('*');
    2ace:	8a e2       	ldi	r24, 0x2A	; 42
    2ad0:	0e 94 1b 14 	call	0x2836	; 0x2836 <LCD_voidDisplayChar>
    2ad4:	08 95       	ret

00002ad6 <LED_voidInit>:
#include"BIT_MATH.h"
#include"STD_TYPES.h"

void LED_voidInit	(u8 copy_u8LedPortId,u8 copy_u8LedPinId)
{
	DIO_voidSetPinDirection( copy_u8LedPortId,  copy_u8LedPinId, DIO_PIN_OUTPUT);
    2ad6:	41 e0       	ldi	r20, 0x01	; 1
    2ad8:	0e 94 18 16 	call	0x2c30	; 0x2c30 <DIO_voidSetPinDirection>
    2adc:	08 95       	ret

00002ade <LED_voidOn>:
}


void LED_voidOn		(u8 copy_u8LedPortId,u8 copy_u8LedPinId,u8 copy_u8LedConnectionType)
{
	switch(copy_u8LedConnectionType)
    2ade:	41 30       	cpi	r20, 0x01	; 1
    2ae0:	19 f0       	breq	.+6      	; 0x2ae8 <LED_voidOn+0xa>
    2ae2:	42 30       	cpi	r20, 0x02	; 2
    2ae4:	29 f0       	breq	.+10     	; 0x2af0 <LED_voidOn+0x12>
    2ae6:	08 95       	ret
	{
	case LED_FORWARD_CONNECTION:
		DIO_voidSetPinValue    ( copy_u8LedPortId,  copy_u8LedPinId, DIO_PIN_HIGH);
    2ae8:	41 e0       	ldi	r20, 0x01	; 1
    2aea:	0e 94 98 16 	call	0x2d30	; 0x2d30 <DIO_voidSetPinValue>
		break;
    2aee:	08 95       	ret
	
	case LED_REVERSE_CONNECTION:
		DIO_voidSetPinValue    ( copy_u8LedPortId,  copy_u8LedPinId, DIO_PIN_LOW);
    2af0:	40 e0       	ldi	r20, 0x00	; 0
    2af2:	0e 94 98 16 	call	0x2d30	; 0x2d30 <DIO_voidSetPinValue>
    2af6:	08 95       	ret

00002af8 <LED_voidOff>:
		break;
	}
}
void LED_voidOff	(u8 copy_u8LedPortId,u8 copy_u8LedPinId,u8 copy_u8LedConnectionType)
{
	switch(copy_u8LedConnectionType)
    2af8:	41 30       	cpi	r20, 0x01	; 1
    2afa:	19 f0       	breq	.+6      	; 0x2b02 <LED_voidOff+0xa>
    2afc:	42 30       	cpi	r20, 0x02	; 2
    2afe:	29 f0       	breq	.+10     	; 0x2b0a <LED_voidOff+0x12>
    2b00:	08 95       	ret
	{
	case LED_FORWARD_CONNECTION	:
		DIO_voidSetPinValue    ( copy_u8LedPortId,  copy_u8LedPinId, DIO_PIN_LOW);
    2b02:	40 e0       	ldi	r20, 0x00	; 0
    2b04:	0e 94 98 16 	call	0x2d30	; 0x2d30 <DIO_voidSetPinValue>
		break;
    2b08:	08 95       	ret
	
	case LED_REVERSE_CONNECTION	:
		DIO_voidSetPinValue    ( copy_u8LedPortId,  copy_u8LedPinId, DIO_PIN_HIGH);
    2b0a:	41 e0       	ldi	r20, 0x01	; 1
    2b0c:	0e 94 98 16 	call	0x2d30	; 0x2d30 <DIO_voidSetPinValue>
    2b10:	08 95       	ret

00002b12 <SERVO_voidInit>:
 
 
void SERVO_voidInit(u8 copy_u8PWMPortId,u8 copy_u8PWMPinId)
{
	//Init pin as an outputpin
	DIO_voidSetPinDirection(copy_u8PWMPortId,copy_u8PWMPinId,DIO_PIN_OUTPUT);
    2b12:	41 e0       	ldi	r20, 0x01	; 1
    2b14:	0e 94 18 16 	call	0x2c30	; 0x2c30 <DIO_voidSetPinDirection>
	
	//init PWM(channel1A)
	PWM_voidInitChannel_1A();
    2b18:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <PWM_voidInitChannel_1A>
    2b1c:	08 95       	ret

00002b1e <SERVO_voidStartByAngle>:
{
	
	f32 Local_f32Dutycycle;
	
	//calculate servo duty
	Local_f32Dutycycle=((2.5*copy_f32ServoAngle)+675)/90;
    2b1e:	20 e0       	ldi	r18, 0x00	; 0
    2b20:	30 e0       	ldi	r19, 0x00	; 0
    2b22:	40 e2       	ldi	r20, 0x20	; 32
    2b24:	50 e4       	ldi	r21, 0x40	; 64
    2b26:	0e 94 43 1c 	call	0x3886	; 0x3886 <__mulsf3>
    2b2a:	20 e0       	ldi	r18, 0x00	; 0
    2b2c:	30 ec       	ldi	r19, 0xC0	; 192
    2b2e:	48 e2       	ldi	r20, 0x28	; 40
    2b30:	54 e4       	ldi	r21, 0x44	; 68
    2b32:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <__addsf3>
    2b36:	20 e0       	ldi	r18, 0x00	; 0
    2b38:	30 e0       	ldi	r19, 0x00	; 0
    2b3a:	44 eb       	ldi	r20, 0xB4	; 180
    2b3c:	52 e4       	ldi	r21, 0x42	; 66
    2b3e:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <__divsf3>
    2b42:	ab 01       	movw	r20, r22
    2b44:	bc 01       	movw	r22, r24
	
	PWM_voidGenerateChannel_1B(SERVO_FREQUENCY_HZ,Local_f32Dutycycle);
    2b46:	82 e3       	ldi	r24, 0x32	; 50
    2b48:	90 e0       	ldi	r25, 0x00	; 0
    2b4a:	0e 94 01 18 	call	0x3002	; 0x3002 <PWM_voidGenerateChannel_1B>
    2b4e:	08 95       	ret

00002b50 <main>:
 u8 usertype =HOME_NO_LOGIN;

int main()
{

	APP_init();
    2b50:	0e 94 b3 00 	call	0x166	; 0x166 <APP_init>
	

	
	while(1)
	{
		LCD_voidClear();
    2b54:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <LCD_voidClear>
		Reset_AllKPDValues();
    2b58:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <Reset_AllKPDValues>
		WelcomeScreenRemote();
    2b5c:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <WelcomeScreenRemote>
		WelcomeScreenLocal();
    2b60:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <WelcomeScreenLocal>
		GetUserType();
    2b64:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <GetUserType>
		HOME_voidFireAnALarm(usertype);
    2b68:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <usertype>
    2b6c:	0e 94 e6 04 	call	0x9cc	; 0x9cc <HOME_voidFireAnALarm>
		TMR2_voidStart();
    2b70:	0e 94 0d 19 	call	0x321a	; 0x321a <TMR2_voidStart>
	
		// HOME_voidChangeUserNameAndPass();
		
			if (usertype == HOME_REMOTE_ADMIN)
    2b74:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <usertype>
    2b78:	83 30       	cpi	r24, 0x03	; 3
    2b7a:	19 f4       	brne	.+6      	; 0x2b82 <main+0x32>
			{
				KPD_Interface_RemoteAdmin();
    2b7c:	0e 94 fd 04 	call	0x9fa	; 0x9fa <KPD_Interface_RemoteAdmin>
    2b80:	09 c0       	rjmp	.+18     	; 0x2b94 <main+0x44>
			}
			else if (usertype == HOME_REMOTE_USER)
    2b82:	84 30       	cpi	r24, 0x04	; 4
    2b84:	19 f4       	brne	.+6      	; 0x2b8c <main+0x3c>
			{
				KPD_Interface_RemoteUser();
    2b86:	0e 94 7d 09 	call	0x12fa	; 0x12fa <KPD_Interface_RemoteUser>
    2b8a:	04 c0       	rjmp	.+8      	; 0x2b94 <main+0x44>
			}

			else if (usertype == HOME_LOCAL_USER)
    2b8c:	82 30       	cpi	r24, 0x02	; 2
    2b8e:	11 f4       	brne	.+4      	; 0x2b94 <main+0x44>
			{
				KPD_Interface_Localuser();
    2b90:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <KPD_Interface_Localuser>
			}

			TMR2_voidStop();
    2b94:	0e 94 1b 19 	call	0x3236	; 0x3236 <TMR2_voidStop>
		// 	break;
		// }
		
		
		
	}
    2b98:	dd cf       	rjmp	.-70     	; 0x2b54 <main+0x4>

00002b9a <ADC_voidInit>:


void ADC_voidInit(u8 copy_u8ReferenceVoltage)
{
	//Select the voltage source
	switch(copy_u8ReferenceVoltage)
    2b9a:	82 30       	cpi	r24, 0x02	; 2
    2b9c:	59 f0       	breq	.+22     	; 0x2bb4 <ADC_voidInit+0x1a>
    2b9e:	83 30       	cpi	r24, 0x03	; 3
    2ba0:	81 f0       	breq	.+32     	; 0x2bc2 <ADC_voidInit+0x28>
    2ba2:	81 30       	cpi	r24, 0x01	; 1
    2ba4:	a1 f4       	brne	.+40     	; 0x2bce <ADC_voidInit+0x34>
	{
		case ADC_REFERENCE_AVCC:
		SET_BIT(ADMUX_REG,REFS0);
    2ba6:	87 b1       	in	r24, 0x07	; 7
    2ba8:	80 64       	ori	r24, 0x40	; 64
    2baa:	87 b9       	out	0x07, r24	; 7
		CLR_BIT(ADMUX_REG,REFS1);
    2bac:	87 b1       	in	r24, 0x07	; 7
    2bae:	8f 77       	andi	r24, 0x7F	; 127
    2bb0:	87 b9       	out	0x07, r24	; 7
		break;
    2bb2:	0d c0       	rjmp	.+26     	; 0x2bce <ADC_voidInit+0x34>
		
		case ADC_REFERENCE_AREF:
		CLR_BIT(ADMUX_REG,REFS0);
    2bb4:	87 b1       	in	r24, 0x07	; 7
    2bb6:	8f 7b       	andi	r24, 0xBF	; 191
    2bb8:	87 b9       	out	0x07, r24	; 7
		CLR_BIT(ADMUX_REG,REFS1);
    2bba:	87 b1       	in	r24, 0x07	; 7
    2bbc:	8f 77       	andi	r24, 0x7F	; 127
    2bbe:	87 b9       	out	0x07, r24	; 7
		break;
    2bc0:	06 c0       	rjmp	.+12     	; 0x2bce <ADC_voidInit+0x34>
		
		// Vref = 2.56V internal
		case ADC_REFERENCE_INTRNAL:
		SET_BIT(ADMUX_REG,REFS0);
    2bc2:	87 b1       	in	r24, 0x07	; 7
    2bc4:	80 64       	ori	r24, 0x40	; 64
    2bc6:	87 b9       	out	0x07, r24	; 7
		SET_BIT(ADMUX_REG,REFS1);
    2bc8:	87 b1       	in	r24, 0x07	; 7
    2bca:	80 68       	ori	r24, 0x80	; 128
    2bcc:	87 b9       	out	0x07, r24	; 7
		break;
	}
	
	//Select Right Adjustment
	CLR_BIT(ADMUX_REG,ADLAR);
    2bce:	87 b1       	in	r24, 0x07	; 7
    2bd0:	8f 7d       	andi	r24, 0xDF	; 223
    2bd2:	87 b9       	out	0x07, r24	; 7
	
	//Clear the auto trigger bit - Single Conversation Mode
	CLR_BIT(ADCSRA_REG,ADATE);
    2bd4:	86 b1       	in	r24, 0x06	; 6
    2bd6:	8f 7d       	andi	r24, 0xDF	; 223
    2bd8:	86 b9       	out	0x06, r24	; 6
	
	//Disable ADC Interrupt
	CLR_BIT(ADCSRA_REG,ADIE);
    2bda:	86 b1       	in	r24, 0x06	; 6
    2bdc:	87 7f       	andi	r24, 0xF7	; 247
    2bde:	86 b9       	out	0x06, r24	; 6
	
	//Prescaler 128 For 16MHZ (125 KHZ)
	SET_BIT(ADCSRA_REG,ADPS2);
    2be0:	86 b1       	in	r24, 0x06	; 6
    2be2:	84 60       	ori	r24, 0x04	; 4
    2be4:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA_REG,ADPS1);
    2be6:	86 b1       	in	r24, 0x06	; 6
    2be8:	82 60       	ori	r24, 0x02	; 2
    2bea:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA_REG,ADPS0);
    2bec:	86 b1       	in	r24, 0x06	; 6
    2bee:	81 60       	ori	r24, 0x01	; 1
    2bf0:	86 b9       	out	0x06, r24	; 6
	
	//ADC Enable (make the enable the last step)
	SET_BIT(ADCSRA_REG,ADEN);
    2bf2:	86 b1       	in	r24, 0x06	; 6
    2bf4:	80 68       	ori	r24, 0x80	; 128
    2bf6:	86 b9       	out	0x06, r24	; 6
    2bf8:	08 95       	ret

00002bfa <ADC_voidGetDigitalValue>:
}


void ADC_voidGetDigitalValue(u8 copy_u8ChannelNumber, u16* copy_pu16DigitalValue)
{
	if(copy_pu16DigitalValue!=NULL)
    2bfa:	61 15       	cp	r22, r1
    2bfc:	71 05       	cpc	r23, r1
    2bfe:	b9 f0       	breq	.+46     	; 0x2c2e <ADC_voidGetDigitalValue+0x34>
	{
		//1. Select channel
		ADMUX_REG &= 0xE0; //0b11100000
    2c00:	97 b1       	in	r25, 0x07	; 7
    2c02:	90 7e       	andi	r25, 0xE0	; 224
    2c04:	97 b9       	out	0x07, r25	; 7
		// Select Channel Number 
		ADMUX_REG |= copy_u8ChannelNumber;
    2c06:	97 b1       	in	r25, 0x07	; 7
    2c08:	89 2b       	or	r24, r25
    2c0a:	87 b9       	out	0x07, r24	; 7
		
		//2. Start Conversition
	    SET_BIT(ADCSRA_REG,ADSC);
    2c0c:	86 b1       	in	r24, 0x06	; 6
    2c0e:	80 64       	ori	r24, 0x40	; 64
    2c10:	86 b9       	out	0x06, r24	; 6
		// Busy Wait for ADC Flag 
		while(0 == GET_BIT(ADCSRA_REG,ADIF));
    2c12:	34 9b       	sbis	0x06, 4	; 6
    2c14:	fe cf       	rjmp	.-4      	; 0x2c12 <ADC_voidGetDigitalValue+0x18>
		u16 temp = ADC_u16_REG;
    2c16:	84 b1       	in	r24, 0x04	; 4
    2c18:	95 b1       	in	r25, 0x05	; 5
		*copy_pu16DigitalValue = temp/4;
    2c1a:	96 95       	lsr	r25
    2c1c:	87 95       	ror	r24
    2c1e:	96 95       	lsr	r25
    2c20:	87 95       	ror	r24
    2c22:	fb 01       	movw	r30, r22
    2c24:	91 83       	std	Z+1, r25	; 0x01
    2c26:	80 83       	st	Z, r24
		
		//Clear Flag(write one to clear)

		SET_BIT(ADCSRA_REG,ADIF);
    2c28:	86 b1       	in	r24, 0x06	; 6
    2c2a:	80 61       	ori	r24, 0x10	; 16
    2c2c:	86 b9       	out	0x06, r24	; 6
    2c2e:	08 95       	ret

00002c30 <DIO_voidSetPinDirection>:
			case DIO_PORTC:
			TOG_BIT(PORTC_REG,copy_u8PinId);
			break;
			
			case DIO_PORTD:
			TOG_BIT(PORTD_REG,copy_u8PinId);
    2c30:	84 30       	cpi	r24, 0x04	; 4
    2c32:	08 f0       	brcs	.+2      	; 0x2c36 <DIO_voidSetPinDirection+0x6>
    2c34:	7c c0       	rjmp	.+248    	; 0x2d2e <DIO_voidSetPinDirection+0xfe>
    2c36:	68 30       	cpi	r22, 0x08	; 8
    2c38:	08 f0       	brcs	.+2      	; 0x2c3c <DIO_voidSetPinDirection+0xc>
    2c3a:	79 c0       	rjmp	.+242    	; 0x2d2e <DIO_voidSetPinDirection+0xfe>
    2c3c:	42 30       	cpi	r20, 0x02	; 2
    2c3e:	08 f0       	brcs	.+2      	; 0x2c42 <DIO_voidSetPinDirection+0x12>
    2c40:	76 c0       	rjmp	.+236    	; 0x2d2e <DIO_voidSetPinDirection+0xfe>
    2c42:	81 30       	cpi	r24, 0x01	; 1
    2c44:	19 f1       	breq	.+70     	; 0x2c8c <DIO_voidSetPinDirection+0x5c>
    2c46:	30 f0       	brcs	.+12     	; 0x2c54 <DIO_voidSetPinDirection+0x24>
    2c48:	82 30       	cpi	r24, 0x02	; 2
    2c4a:	e1 f1       	breq	.+120    	; 0x2cc4 <DIO_voidSetPinDirection+0x94>
    2c4c:	83 30       	cpi	r24, 0x03	; 3
    2c4e:	09 f4       	brne	.+2      	; 0x2c52 <DIO_voidSetPinDirection+0x22>
    2c50:	54 c0       	rjmp	.+168    	; 0x2cfa <DIO_voidSetPinDirection+0xca>
    2c52:	08 95       	ret
    2c54:	44 23       	and	r20, r20
    2c56:	71 f0       	breq	.+28     	; 0x2c74 <DIO_voidSetPinDirection+0x44>
    2c58:	41 30       	cpi	r20, 0x01	; 1
    2c5a:	09 f0       	breq	.+2      	; 0x2c5e <DIO_voidSetPinDirection+0x2e>
    2c5c:	68 c0       	rjmp	.+208    	; 0x2d2e <DIO_voidSetPinDirection+0xfe>
    2c5e:	2a b3       	in	r18, 0x1a	; 26
    2c60:	81 e0       	ldi	r24, 0x01	; 1
    2c62:	90 e0       	ldi	r25, 0x00	; 0
    2c64:	02 c0       	rjmp	.+4      	; 0x2c6a <DIO_voidSetPinDirection+0x3a>
    2c66:	88 0f       	add	r24, r24
    2c68:	99 1f       	adc	r25, r25
    2c6a:	6a 95       	dec	r22
    2c6c:	e2 f7       	brpl	.-8      	; 0x2c66 <DIO_voidSetPinDirection+0x36>
    2c6e:	82 2b       	or	r24, r18
    2c70:	8a bb       	out	0x1a, r24	; 26
    2c72:	08 95       	ret
    2c74:	2a b3       	in	r18, 0x1a	; 26
    2c76:	81 e0       	ldi	r24, 0x01	; 1
    2c78:	90 e0       	ldi	r25, 0x00	; 0
    2c7a:	02 c0       	rjmp	.+4      	; 0x2c80 <DIO_voidSetPinDirection+0x50>
    2c7c:	88 0f       	add	r24, r24
    2c7e:	99 1f       	adc	r25, r25
    2c80:	6a 95       	dec	r22
    2c82:	e2 f7       	brpl	.-8      	; 0x2c7c <DIO_voidSetPinDirection+0x4c>
    2c84:	80 95       	com	r24
    2c86:	82 23       	and	r24, r18
    2c88:	8a bb       	out	0x1a, r24	; 26
    2c8a:	08 95       	ret
    2c8c:	44 23       	and	r20, r20
    2c8e:	71 f0       	breq	.+28     	; 0x2cac <DIO_voidSetPinDirection+0x7c>
    2c90:	41 30       	cpi	r20, 0x01	; 1
    2c92:	09 f0       	breq	.+2      	; 0x2c96 <DIO_voidSetPinDirection+0x66>
    2c94:	4c c0       	rjmp	.+152    	; 0x2d2e <DIO_voidSetPinDirection+0xfe>
    2c96:	27 b3       	in	r18, 0x17	; 23
    2c98:	81 e0       	ldi	r24, 0x01	; 1
    2c9a:	90 e0       	ldi	r25, 0x00	; 0
    2c9c:	02 c0       	rjmp	.+4      	; 0x2ca2 <DIO_voidSetPinDirection+0x72>
    2c9e:	88 0f       	add	r24, r24
    2ca0:	99 1f       	adc	r25, r25
    2ca2:	6a 95       	dec	r22
    2ca4:	e2 f7       	brpl	.-8      	; 0x2c9e <DIO_voidSetPinDirection+0x6e>
    2ca6:	82 2b       	or	r24, r18
    2ca8:	87 bb       	out	0x17, r24	; 23
    2caa:	08 95       	ret
    2cac:	27 b3       	in	r18, 0x17	; 23
    2cae:	81 e0       	ldi	r24, 0x01	; 1
    2cb0:	90 e0       	ldi	r25, 0x00	; 0
    2cb2:	02 c0       	rjmp	.+4      	; 0x2cb8 <DIO_voidSetPinDirection+0x88>
    2cb4:	88 0f       	add	r24, r24
    2cb6:	99 1f       	adc	r25, r25
    2cb8:	6a 95       	dec	r22
    2cba:	e2 f7       	brpl	.-8      	; 0x2cb4 <DIO_voidSetPinDirection+0x84>
    2cbc:	80 95       	com	r24
    2cbe:	82 23       	and	r24, r18
    2cc0:	87 bb       	out	0x17, r24	; 23
    2cc2:	08 95       	ret
    2cc4:	44 23       	and	r20, r20
    2cc6:	69 f0       	breq	.+26     	; 0x2ce2 <DIO_voidSetPinDirection+0xb2>
    2cc8:	41 30       	cpi	r20, 0x01	; 1
    2cca:	89 f5       	brne	.+98     	; 0x2d2e <DIO_voidSetPinDirection+0xfe>
    2ccc:	24 b3       	in	r18, 0x14	; 20
    2cce:	81 e0       	ldi	r24, 0x01	; 1
    2cd0:	90 e0       	ldi	r25, 0x00	; 0
    2cd2:	02 c0       	rjmp	.+4      	; 0x2cd8 <DIO_voidSetPinDirection+0xa8>
    2cd4:	88 0f       	add	r24, r24
    2cd6:	99 1f       	adc	r25, r25
    2cd8:	6a 95       	dec	r22
    2cda:	e2 f7       	brpl	.-8      	; 0x2cd4 <DIO_voidSetPinDirection+0xa4>
    2cdc:	82 2b       	or	r24, r18
    2cde:	84 bb       	out	0x14, r24	; 20
    2ce0:	08 95       	ret
    2ce2:	24 b3       	in	r18, 0x14	; 20
    2ce4:	81 e0       	ldi	r24, 0x01	; 1
    2ce6:	90 e0       	ldi	r25, 0x00	; 0
    2ce8:	02 c0       	rjmp	.+4      	; 0x2cee <DIO_voidSetPinDirection+0xbe>
    2cea:	88 0f       	add	r24, r24
    2cec:	99 1f       	adc	r25, r25
    2cee:	6a 95       	dec	r22
    2cf0:	e2 f7       	brpl	.-8      	; 0x2cea <DIO_voidSetPinDirection+0xba>
    2cf2:	80 95       	com	r24
    2cf4:	82 23       	and	r24, r18
    2cf6:	84 bb       	out	0x14, r24	; 20
    2cf8:	08 95       	ret
    2cfa:	44 23       	and	r20, r20
    2cfc:	69 f0       	breq	.+26     	; 0x2d18 <DIO_voidSetPinDirection+0xe8>
    2cfe:	41 30       	cpi	r20, 0x01	; 1
    2d00:	b1 f4       	brne	.+44     	; 0x2d2e <DIO_voidSetPinDirection+0xfe>
    2d02:	21 b3       	in	r18, 0x11	; 17
    2d04:	81 e0       	ldi	r24, 0x01	; 1
    2d06:	90 e0       	ldi	r25, 0x00	; 0
    2d08:	02 c0       	rjmp	.+4      	; 0x2d0e <DIO_voidSetPinDirection+0xde>
    2d0a:	88 0f       	add	r24, r24
    2d0c:	99 1f       	adc	r25, r25
    2d0e:	6a 95       	dec	r22
    2d10:	e2 f7       	brpl	.-8      	; 0x2d0a <DIO_voidSetPinDirection+0xda>
    2d12:	82 2b       	or	r24, r18
    2d14:	81 bb       	out	0x11, r24	; 17
    2d16:	08 95       	ret
    2d18:	21 b3       	in	r18, 0x11	; 17
    2d1a:	81 e0       	ldi	r24, 0x01	; 1
    2d1c:	90 e0       	ldi	r25, 0x00	; 0
    2d1e:	02 c0       	rjmp	.+4      	; 0x2d24 <DIO_voidSetPinDirection+0xf4>
    2d20:	88 0f       	add	r24, r24
    2d22:	99 1f       	adc	r25, r25
    2d24:	6a 95       	dec	r22
    2d26:	e2 f7       	brpl	.-8      	; 0x2d20 <DIO_voidSetPinDirection+0xf0>
    2d28:	80 95       	com	r24
    2d2a:	82 23       	and	r24, r18
    2d2c:	81 bb       	out	0x11, r24	; 17
    2d2e:	08 95       	ret

00002d30 <DIO_voidSetPinValue>:
    2d30:	84 30       	cpi	r24, 0x04	; 4
    2d32:	08 f0       	brcs	.+2      	; 0x2d36 <DIO_voidSetPinValue+0x6>
    2d34:	7c c0       	rjmp	.+248    	; 0x2e2e <DIO_voidSetPinValue+0xfe>
    2d36:	68 30       	cpi	r22, 0x08	; 8
    2d38:	08 f0       	brcs	.+2      	; 0x2d3c <DIO_voidSetPinValue+0xc>
    2d3a:	79 c0       	rjmp	.+242    	; 0x2e2e <DIO_voidSetPinValue+0xfe>
    2d3c:	42 30       	cpi	r20, 0x02	; 2
    2d3e:	08 f0       	brcs	.+2      	; 0x2d42 <DIO_voidSetPinValue+0x12>
    2d40:	76 c0       	rjmp	.+236    	; 0x2e2e <DIO_voidSetPinValue+0xfe>
    2d42:	81 30       	cpi	r24, 0x01	; 1
    2d44:	19 f1       	breq	.+70     	; 0x2d8c <DIO_voidSetPinValue+0x5c>
    2d46:	30 f0       	brcs	.+12     	; 0x2d54 <DIO_voidSetPinValue+0x24>
    2d48:	82 30       	cpi	r24, 0x02	; 2
    2d4a:	e1 f1       	breq	.+120    	; 0x2dc4 <DIO_voidSetPinValue+0x94>
    2d4c:	83 30       	cpi	r24, 0x03	; 3
    2d4e:	09 f4       	brne	.+2      	; 0x2d52 <DIO_voidSetPinValue+0x22>
    2d50:	54 c0       	rjmp	.+168    	; 0x2dfa <DIO_voidSetPinValue+0xca>
    2d52:	08 95       	ret
    2d54:	44 23       	and	r20, r20
    2d56:	71 f0       	breq	.+28     	; 0x2d74 <DIO_voidSetPinValue+0x44>
    2d58:	41 30       	cpi	r20, 0x01	; 1
    2d5a:	09 f0       	breq	.+2      	; 0x2d5e <DIO_voidSetPinValue+0x2e>
    2d5c:	68 c0       	rjmp	.+208    	; 0x2e2e <DIO_voidSetPinValue+0xfe>
    2d5e:	2b b3       	in	r18, 0x1b	; 27
    2d60:	81 e0       	ldi	r24, 0x01	; 1
    2d62:	90 e0       	ldi	r25, 0x00	; 0
    2d64:	02 c0       	rjmp	.+4      	; 0x2d6a <DIO_voidSetPinValue+0x3a>
    2d66:	88 0f       	add	r24, r24
    2d68:	99 1f       	adc	r25, r25
    2d6a:	6a 95       	dec	r22
    2d6c:	e2 f7       	brpl	.-8      	; 0x2d66 <DIO_voidSetPinValue+0x36>
    2d6e:	82 2b       	or	r24, r18
    2d70:	8b bb       	out	0x1b, r24	; 27
    2d72:	08 95       	ret
    2d74:	2b b3       	in	r18, 0x1b	; 27
    2d76:	81 e0       	ldi	r24, 0x01	; 1
    2d78:	90 e0       	ldi	r25, 0x00	; 0
    2d7a:	02 c0       	rjmp	.+4      	; 0x2d80 <DIO_voidSetPinValue+0x50>
    2d7c:	88 0f       	add	r24, r24
    2d7e:	99 1f       	adc	r25, r25
    2d80:	6a 95       	dec	r22
    2d82:	e2 f7       	brpl	.-8      	; 0x2d7c <DIO_voidSetPinValue+0x4c>
    2d84:	80 95       	com	r24
    2d86:	82 23       	and	r24, r18
    2d88:	8b bb       	out	0x1b, r24	; 27
    2d8a:	08 95       	ret
    2d8c:	44 23       	and	r20, r20
    2d8e:	71 f0       	breq	.+28     	; 0x2dac <DIO_voidSetPinValue+0x7c>
    2d90:	41 30       	cpi	r20, 0x01	; 1
    2d92:	09 f0       	breq	.+2      	; 0x2d96 <DIO_voidSetPinValue+0x66>
    2d94:	4c c0       	rjmp	.+152    	; 0x2e2e <DIO_voidSetPinValue+0xfe>
    2d96:	28 b3       	in	r18, 0x18	; 24
    2d98:	81 e0       	ldi	r24, 0x01	; 1
    2d9a:	90 e0       	ldi	r25, 0x00	; 0
    2d9c:	02 c0       	rjmp	.+4      	; 0x2da2 <DIO_voidSetPinValue+0x72>
    2d9e:	88 0f       	add	r24, r24
    2da0:	99 1f       	adc	r25, r25
    2da2:	6a 95       	dec	r22
    2da4:	e2 f7       	brpl	.-8      	; 0x2d9e <DIO_voidSetPinValue+0x6e>
    2da6:	82 2b       	or	r24, r18
    2da8:	88 bb       	out	0x18, r24	; 24
    2daa:	08 95       	ret
    2dac:	28 b3       	in	r18, 0x18	; 24
    2dae:	81 e0       	ldi	r24, 0x01	; 1
    2db0:	90 e0       	ldi	r25, 0x00	; 0
    2db2:	02 c0       	rjmp	.+4      	; 0x2db8 <DIO_voidSetPinValue+0x88>
    2db4:	88 0f       	add	r24, r24
    2db6:	99 1f       	adc	r25, r25
    2db8:	6a 95       	dec	r22
    2dba:	e2 f7       	brpl	.-8      	; 0x2db4 <DIO_voidSetPinValue+0x84>
    2dbc:	80 95       	com	r24
    2dbe:	82 23       	and	r24, r18
    2dc0:	88 bb       	out	0x18, r24	; 24
    2dc2:	08 95       	ret
    2dc4:	44 23       	and	r20, r20
    2dc6:	69 f0       	breq	.+26     	; 0x2de2 <DIO_voidSetPinValue+0xb2>
    2dc8:	41 30       	cpi	r20, 0x01	; 1
    2dca:	89 f5       	brne	.+98     	; 0x2e2e <DIO_voidSetPinValue+0xfe>
    2dcc:	25 b3       	in	r18, 0x15	; 21
    2dce:	81 e0       	ldi	r24, 0x01	; 1
    2dd0:	90 e0       	ldi	r25, 0x00	; 0
    2dd2:	02 c0       	rjmp	.+4      	; 0x2dd8 <DIO_voidSetPinValue+0xa8>
    2dd4:	88 0f       	add	r24, r24
    2dd6:	99 1f       	adc	r25, r25
    2dd8:	6a 95       	dec	r22
    2dda:	e2 f7       	brpl	.-8      	; 0x2dd4 <DIO_voidSetPinValue+0xa4>
    2ddc:	82 2b       	or	r24, r18
    2dde:	85 bb       	out	0x15, r24	; 21
    2de0:	08 95       	ret
    2de2:	25 b3       	in	r18, 0x15	; 21
    2de4:	81 e0       	ldi	r24, 0x01	; 1
    2de6:	90 e0       	ldi	r25, 0x00	; 0
    2de8:	02 c0       	rjmp	.+4      	; 0x2dee <DIO_voidSetPinValue+0xbe>
    2dea:	88 0f       	add	r24, r24
    2dec:	99 1f       	adc	r25, r25
    2dee:	6a 95       	dec	r22
    2df0:	e2 f7       	brpl	.-8      	; 0x2dea <DIO_voidSetPinValue+0xba>
    2df2:	80 95       	com	r24
    2df4:	82 23       	and	r24, r18
    2df6:	85 bb       	out	0x15, r24	; 21
    2df8:	08 95       	ret
    2dfa:	44 23       	and	r20, r20
    2dfc:	69 f0       	breq	.+26     	; 0x2e18 <DIO_voidSetPinValue+0xe8>
    2dfe:	41 30       	cpi	r20, 0x01	; 1
    2e00:	b1 f4       	brne	.+44     	; 0x2e2e <DIO_voidSetPinValue+0xfe>
    2e02:	22 b3       	in	r18, 0x12	; 18
    2e04:	81 e0       	ldi	r24, 0x01	; 1
    2e06:	90 e0       	ldi	r25, 0x00	; 0
    2e08:	02 c0       	rjmp	.+4      	; 0x2e0e <DIO_voidSetPinValue+0xde>
    2e0a:	88 0f       	add	r24, r24
    2e0c:	99 1f       	adc	r25, r25
    2e0e:	6a 95       	dec	r22
    2e10:	e2 f7       	brpl	.-8      	; 0x2e0a <DIO_voidSetPinValue+0xda>
    2e12:	82 2b       	or	r24, r18
    2e14:	82 bb       	out	0x12, r24	; 18
    2e16:	08 95       	ret
    2e18:	22 b3       	in	r18, 0x12	; 18
    2e1a:	81 e0       	ldi	r24, 0x01	; 1
    2e1c:	90 e0       	ldi	r25, 0x00	; 0
    2e1e:	02 c0       	rjmp	.+4      	; 0x2e24 <DIO_voidSetPinValue+0xf4>
    2e20:	88 0f       	add	r24, r24
    2e22:	99 1f       	adc	r25, r25
    2e24:	6a 95       	dec	r22
    2e26:	e2 f7       	brpl	.-8      	; 0x2e20 <DIO_voidSetPinValue+0xf0>
    2e28:	80 95       	com	r24
    2e2a:	82 23       	and	r24, r18
    2e2c:	82 bb       	out	0x12, r24	; 18
    2e2e:	08 95       	ret

00002e30 <DIO_voidGetPinValue>:
    2e30:	84 30       	cpi	r24, 0x04	; 4
    2e32:	c0 f5       	brcc	.+112    	; 0x2ea4 <DIO_voidGetPinValue+0x74>
    2e34:	68 30       	cpi	r22, 0x08	; 8
    2e36:	b0 f5       	brcc	.+108    	; 0x2ea4 <DIO_voidGetPinValue+0x74>
    2e38:	41 15       	cp	r20, r1
    2e3a:	51 05       	cpc	r21, r1
    2e3c:	99 f1       	breq	.+102    	; 0x2ea4 <DIO_voidGetPinValue+0x74>
    2e3e:	81 30       	cpi	r24, 0x01	; 1
    2e40:	89 f0       	breq	.+34     	; 0x2e64 <DIO_voidGetPinValue+0x34>
    2e42:	28 f0       	brcs	.+10     	; 0x2e4e <DIO_voidGetPinValue+0x1e>
    2e44:	82 30       	cpi	r24, 0x02	; 2
    2e46:	c9 f0       	breq	.+50     	; 0x2e7a <DIO_voidGetPinValue+0x4a>
    2e48:	83 30       	cpi	r24, 0x03	; 3
    2e4a:	11 f1       	breq	.+68     	; 0x2e90 <DIO_voidGetPinValue+0x60>
    2e4c:	08 95       	ret
    2e4e:	89 b3       	in	r24, 0x19	; 25
    2e50:	90 e0       	ldi	r25, 0x00	; 0
    2e52:	02 c0       	rjmp	.+4      	; 0x2e58 <DIO_voidGetPinValue+0x28>
    2e54:	95 95       	asr	r25
    2e56:	87 95       	ror	r24
    2e58:	6a 95       	dec	r22
    2e5a:	e2 f7       	brpl	.-8      	; 0x2e54 <DIO_voidGetPinValue+0x24>
    2e5c:	81 70       	andi	r24, 0x01	; 1
    2e5e:	fa 01       	movw	r30, r20
    2e60:	80 83       	st	Z, r24
    2e62:	08 95       	ret
    2e64:	86 b3       	in	r24, 0x16	; 22
    2e66:	90 e0       	ldi	r25, 0x00	; 0
    2e68:	02 c0       	rjmp	.+4      	; 0x2e6e <DIO_voidGetPinValue+0x3e>
    2e6a:	95 95       	asr	r25
    2e6c:	87 95       	ror	r24
    2e6e:	6a 95       	dec	r22
    2e70:	e2 f7       	brpl	.-8      	; 0x2e6a <DIO_voidGetPinValue+0x3a>
    2e72:	81 70       	andi	r24, 0x01	; 1
    2e74:	fa 01       	movw	r30, r20
    2e76:	80 83       	st	Z, r24
    2e78:	08 95       	ret
    2e7a:	83 b3       	in	r24, 0x13	; 19
    2e7c:	90 e0       	ldi	r25, 0x00	; 0
    2e7e:	02 c0       	rjmp	.+4      	; 0x2e84 <DIO_voidGetPinValue+0x54>
    2e80:	95 95       	asr	r25
    2e82:	87 95       	ror	r24
    2e84:	6a 95       	dec	r22
    2e86:	e2 f7       	brpl	.-8      	; 0x2e80 <DIO_voidGetPinValue+0x50>
    2e88:	81 70       	andi	r24, 0x01	; 1
    2e8a:	fa 01       	movw	r30, r20
    2e8c:	80 83       	st	Z, r24
    2e8e:	08 95       	ret
    2e90:	80 b3       	in	r24, 0x10	; 16
    2e92:	90 e0       	ldi	r25, 0x00	; 0
    2e94:	02 c0       	rjmp	.+4      	; 0x2e9a <DIO_voidGetPinValue+0x6a>
    2e96:	95 95       	asr	r25
    2e98:	87 95       	ror	r24
    2e9a:	6a 95       	dec	r22
    2e9c:	e2 f7       	brpl	.-8      	; 0x2e96 <DIO_voidGetPinValue+0x66>
    2e9e:	81 70       	andi	r24, 0x01	; 1
    2ea0:	fa 01       	movw	r30, r20
    2ea2:	80 83       	st	Z, r24
    2ea4:	08 95       	ret

00002ea6 <DIO_voidActivePinInPullUpResistance>:
}


void DIO_voidActivePinInPullUpResistance(u8 copy_u8PortId, u8 copy_u8PinId)
{
	if((copy_u8PortId<4)&&(copy_u8PinId<8))
    2ea6:	84 30       	cpi	r24, 0x04	; 4
    2ea8:	a8 f5       	brcc	.+106    	; 0x2f14 <DIO_voidActivePinInPullUpResistance+0x6e>
    2eaa:	68 30       	cpi	r22, 0x08	; 8
    2eac:	98 f5       	brcc	.+102    	; 0x2f14 <DIO_voidActivePinInPullUpResistance+0x6e>
	{
		switch(copy_u8PortId)
    2eae:	81 30       	cpi	r24, 0x01	; 1
    2eb0:	89 f0       	breq	.+34     	; 0x2ed4 <DIO_voidActivePinInPullUpResistance+0x2e>
    2eb2:	28 f0       	brcs	.+10     	; 0x2ebe <DIO_voidActivePinInPullUpResistance+0x18>
    2eb4:	82 30       	cpi	r24, 0x02	; 2
    2eb6:	c9 f0       	breq	.+50     	; 0x2eea <DIO_voidActivePinInPullUpResistance+0x44>
    2eb8:	83 30       	cpi	r24, 0x03	; 3
    2eba:	11 f1       	breq	.+68     	; 0x2f00 <DIO_voidActivePinInPullUpResistance+0x5a>
    2ebc:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(PORTA_REG,copy_u8PinId);
    2ebe:	2b b3       	in	r18, 0x1b	; 27
    2ec0:	81 e0       	ldi	r24, 0x01	; 1
    2ec2:	90 e0       	ldi	r25, 0x00	; 0
    2ec4:	02 c0       	rjmp	.+4      	; 0x2eca <DIO_voidActivePinInPullUpResistance+0x24>
    2ec6:	88 0f       	add	r24, r24
    2ec8:	99 1f       	adc	r25, r25
    2eca:	6a 95       	dec	r22
    2ecc:	e2 f7       	brpl	.-8      	; 0x2ec6 <DIO_voidActivePinInPullUpResistance+0x20>
    2ece:	82 2b       	or	r24, r18
    2ed0:	8b bb       	out	0x1b, r24	; 27
			break;
    2ed2:	08 95       	ret
			
			case DIO_PORTB:
			SET_BIT(PORTB_REG,copy_u8PinId);
    2ed4:	28 b3       	in	r18, 0x18	; 24
    2ed6:	81 e0       	ldi	r24, 0x01	; 1
    2ed8:	90 e0       	ldi	r25, 0x00	; 0
    2eda:	02 c0       	rjmp	.+4      	; 0x2ee0 <DIO_voidActivePinInPullUpResistance+0x3a>
    2edc:	88 0f       	add	r24, r24
    2ede:	99 1f       	adc	r25, r25
    2ee0:	6a 95       	dec	r22
    2ee2:	e2 f7       	brpl	.-8      	; 0x2edc <DIO_voidActivePinInPullUpResistance+0x36>
    2ee4:	82 2b       	or	r24, r18
    2ee6:	88 bb       	out	0x18, r24	; 24
			break;
    2ee8:	08 95       	ret
			
			case DIO_PORTC:
			SET_BIT(PORTC_REG,copy_u8PinId);
    2eea:	25 b3       	in	r18, 0x15	; 21
    2eec:	81 e0       	ldi	r24, 0x01	; 1
    2eee:	90 e0       	ldi	r25, 0x00	; 0
    2ef0:	02 c0       	rjmp	.+4      	; 0x2ef6 <DIO_voidActivePinInPullUpResistance+0x50>
    2ef2:	88 0f       	add	r24, r24
    2ef4:	99 1f       	adc	r25, r25
    2ef6:	6a 95       	dec	r22
    2ef8:	e2 f7       	brpl	.-8      	; 0x2ef2 <DIO_voidActivePinInPullUpResistance+0x4c>
    2efa:	82 2b       	or	r24, r18
    2efc:	85 bb       	out	0x15, r24	; 21
			break;
    2efe:	08 95       	ret
			
			case DIO_PORTD:
			SET_BIT(PORTD_REG,copy_u8PinId);
    2f00:	22 b3       	in	r18, 0x12	; 18
    2f02:	81 e0       	ldi	r24, 0x01	; 1
    2f04:	90 e0       	ldi	r25, 0x00	; 0
    2f06:	02 c0       	rjmp	.+4      	; 0x2f0c <DIO_voidActivePinInPullUpResistance+0x66>
    2f08:	88 0f       	add	r24, r24
    2f0a:	99 1f       	adc	r25, r25
    2f0c:	6a 95       	dec	r22
    2f0e:	e2 f7       	brpl	.-8      	; 0x2f08 <DIO_voidActivePinInPullUpResistance+0x62>
    2f10:	82 2b       	or	r24, r18
    2f12:	82 bb       	out	0x12, r24	; 18
    2f14:	08 95       	ret

00002f16 <GI_voidEnable>:
#include"GI_register.h"


void GI_voidEnable(void)
{
	SET_BIT(SREG_REG,I);
    2f16:	8f b7       	in	r24, 0x3f	; 63
    2f18:	80 68       	ori	r24, 0x80	; 128
    2f1a:	8f bf       	out	0x3f, r24	; 63
    2f1c:	08 95       	ret

00002f1e <PWM_voidInitChannel_1A>:


void PWM_voidInitChannel_1A(void)
{
	/*Waveform Generation Mode>>Fast PWM(channel A)*/
	SET_BIT(TCCR1B_REG, WGM13);
    2f1e:	8e b5       	in	r24, 0x2e	; 46
    2f20:	80 61       	ori	r24, 0x10	; 16
    2f22:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1B_REG, WGM12);
    2f24:	8e b5       	in	r24, 0x2e	; 46
    2f26:	88 60       	ori	r24, 0x08	; 8
    2f28:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1A_REG, WGM11);
    2f2a:	8f b5       	in	r24, 0x2f	; 47
    2f2c:	82 60       	ori	r24, 0x02	; 2
    2f2e:	8f bd       	out	0x2f, r24	; 47
	CLR_BIT(TCCR1A_REG, WGM10);
    2f30:	8f b5       	in	r24, 0x2f	; 47
    2f32:	8e 7f       	andi	r24, 0xFE	; 254
    2f34:	8f bd       	out	0x2f, r24	; 47
	
	/*Compare Match Output Mode>>Clear OC1A/OC1B on compare match*/
	SET_BIT(TCCR1A_REG,COM1A1);
    2f36:	8f b5       	in	r24, 0x2f	; 47
    2f38:	80 68       	ori	r24, 0x80	; 128
    2f3a:	8f bd       	out	0x2f, r24	; 47
	CLR_BIT(TCCR1A_REG,COM1A0);
    2f3c:	8f b5       	in	r24, 0x2f	; 47
    2f3e:	8f 7b       	andi	r24, 0xBF	; 191
    2f40:	8f bd       	out	0x2f, r24	; 47
    2f42:	08 95       	ret

00002f44 <PWM_voidInitChannel_1B>:
}

void PWM_voidInitChannel_1B(void)
{
	/*Waveform Generation Mode>>Fast PWM(channel B)*/
	SET_BIT(TCCR1B_REG, WGM13);
    2f44:	8e b5       	in	r24, 0x2e	; 46
    2f46:	80 61       	ori	r24, 0x10	; 16
    2f48:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1B_REG, WGM12);
    2f4a:	8e b5       	in	r24, 0x2e	; 46
    2f4c:	88 60       	ori	r24, 0x08	; 8
    2f4e:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1A_REG, WGM11);
    2f50:	8f b5       	in	r24, 0x2f	; 47
    2f52:	82 60       	ori	r24, 0x02	; 2
    2f54:	8f bd       	out	0x2f, r24	; 47
	CLR_BIT(TCCR1A_REG, WGM10);
    2f56:	8f b5       	in	r24, 0x2f	; 47
    2f58:	8e 7f       	andi	r24, 0xFE	; 254
    2f5a:	8f bd       	out	0x2f, r24	; 47
	
	/*Compare Match Output Mode>>Clear OC1A/OC1B on compare match*/
	SET_BIT(TCCR1A_REG,COM1B1);
    2f5c:	8f b5       	in	r24, 0x2f	; 47
    2f5e:	80 62       	ori	r24, 0x20	; 32
    2f60:	8f bd       	out	0x2f, r24	; 47
	CLR_BIT(TCCR1A_REG,COM1B0);
    2f62:	8f b5       	in	r24, 0x2f	; 47
    2f64:	8f 7e       	andi	r24, 0xEF	; 239
    2f66:	8f bd       	out	0x2f, r24	; 47
    2f68:	08 95       	ret

00002f6a <PWM_voidGenerateChannel_1A>:
}


void PWM_voidGenerateChannel_1A(u16 copy_u16Frequency_hz,f32 copy_f32DutyCycle)
{
    2f6a:	cf 92       	push	r12
    2f6c:	df 92       	push	r13
    2f6e:	ef 92       	push	r14
    2f70:	ff 92       	push	r15
    2f72:	cf 93       	push	r28
    2f74:	df 93       	push	r29
    2f76:	ec 01       	movw	r28, r24
    2f78:	6a 01       	movw	r12, r20
    2f7a:	7b 01       	movw	r14, r22
	if(copy_f32DutyCycle<=100)
    2f7c:	20 e0       	ldi	r18, 0x00	; 0
    2f7e:	30 e0       	ldi	r19, 0x00	; 0
    2f80:	48 ec       	ldi	r20, 0xC8	; 200
    2f82:	52 e4       	ldi	r21, 0x42	; 66
    2f84:	c7 01       	movw	r24, r14
    2f86:	b6 01       	movw	r22, r12
    2f88:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <__cmpsf2>
    2f8c:	18 16       	cp	r1, r24
    2f8e:	94 f1       	brlt	.+100    	; 0x2ff4 <PWM_voidGenerateChannel_1A+0x8a>
	{
		/*Set freq by clkI/O/64 (From prescaler)*/
		ICR1_REG=((1000000UL/copy_u16Frequency_hz)/4)-1;
    2f90:	9e 01       	movw	r18, r28
    2f92:	40 e0       	ldi	r20, 0x00	; 0
    2f94:	50 e0       	ldi	r21, 0x00	; 0
    2f96:	60 e9       	ldi	r22, 0x90	; 144
    2f98:	70 ed       	ldi	r23, 0xD0	; 208
    2f9a:	83 e0       	ldi	r24, 0x03	; 3
    2f9c:	90 e0       	ldi	r25, 0x00	; 0
    2f9e:	0e 94 b0 1c 	call	0x3960	; 0x3960 <__udivmodsi4>
    2fa2:	21 50       	subi	r18, 0x01	; 1
    2fa4:	31 09       	sbc	r19, r1
    2fa6:	37 bd       	out	0x27, r19	; 39
    2fa8:	26 bd       	out	0x26, r18	; 38
		
		/*Calculating Duty for non inverting*/
		OCR1A_REG=((copy_f32DutyCycle*(ICR1_REG+1))/100)-1;
    2faa:	66 b5       	in	r22, 0x26	; 38
    2fac:	77 b5       	in	r23, 0x27	; 39
    2fae:	6f 5f       	subi	r22, 0xFF	; 255
    2fb0:	7f 4f       	sbci	r23, 0xFF	; 255
    2fb2:	80 e0       	ldi	r24, 0x00	; 0
    2fb4:	90 e0       	ldi	r25, 0x00	; 0
    2fb6:	0e 94 91 1b 	call	0x3722	; 0x3722 <__floatunsisf>
    2fba:	a7 01       	movw	r20, r14
    2fbc:	96 01       	movw	r18, r12
    2fbe:	0e 94 43 1c 	call	0x3886	; 0x3886 <__mulsf3>
    2fc2:	20 e0       	ldi	r18, 0x00	; 0
    2fc4:	30 e0       	ldi	r19, 0x00	; 0
    2fc6:	48 ec       	ldi	r20, 0xC8	; 200
    2fc8:	52 e4       	ldi	r21, 0x42	; 66
    2fca:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <__divsf3>
    2fce:	20 e0       	ldi	r18, 0x00	; 0
    2fd0:	30 e0       	ldi	r19, 0x00	; 0
    2fd2:	40 e8       	ldi	r20, 0x80	; 128
    2fd4:	5f e3       	ldi	r21, 0x3F	; 63
    2fd6:	0e 94 7e 1a 	call	0x34fc	; 0x34fc <__subsf3>
    2fda:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <__fixunssfsi>
    2fde:	7b bd       	out	0x2b, r23	; 43
    2fe0:	6a bd       	out	0x2a, r22	; 42
		
		/*Clock Select>>clk/64(From prescaler)*/
		SET_BIT(TCCR1B_REG,CS10);
    2fe2:	8e b5       	in	r24, 0x2e	; 46
    2fe4:	81 60       	ori	r24, 0x01	; 1
    2fe6:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TCCR1B_REG,CS11);
    2fe8:	8e b5       	in	r24, 0x2e	; 46
    2fea:	82 60       	ori	r24, 0x02	; 2
    2fec:	8e bd       	out	0x2e, r24	; 46
		CLR_BIT(TCCR1B_REG,CS12);
    2fee:	8e b5       	in	r24, 0x2e	; 46
    2ff0:	8b 7f       	andi	r24, 0xFB	; 251
    2ff2:	8e bd       	out	0x2e, r24	; 46
	else
	{
		//error 
	}
	
}
    2ff4:	df 91       	pop	r29
    2ff6:	cf 91       	pop	r28
    2ff8:	ff 90       	pop	r15
    2ffa:	ef 90       	pop	r14
    2ffc:	df 90       	pop	r13
    2ffe:	cf 90       	pop	r12
    3000:	08 95       	ret

00003002 <PWM_voidGenerateChannel_1B>:



void PWM_voidGenerateChannel_1B(u16 copy_u16Frequency_hz,f32 copy_f32DutyCycle)
{
    3002:	cf 92       	push	r12
    3004:	df 92       	push	r13
    3006:	ef 92       	push	r14
    3008:	ff 92       	push	r15
    300a:	cf 93       	push	r28
    300c:	df 93       	push	r29
    300e:	ec 01       	movw	r28, r24
    3010:	6a 01       	movw	r12, r20
    3012:	7b 01       	movw	r14, r22
	if(copy_f32DutyCycle<=100)
    3014:	20 e0       	ldi	r18, 0x00	; 0
    3016:	30 e0       	ldi	r19, 0x00	; 0
    3018:	48 ec       	ldi	r20, 0xC8	; 200
    301a:	52 e4       	ldi	r21, 0x42	; 66
    301c:	c7 01       	movw	r24, r14
    301e:	b6 01       	movw	r22, r12
    3020:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <__cmpsf2>
    3024:	18 16       	cp	r1, r24
    3026:	94 f1       	brlt	.+100    	; 0x308c <PWM_voidGenerateChannel_1B+0x8a>
	{
		/*Set freq by clkI/O/64 (From prescaler)*/
		ICR1_REG=((1000000UL/copy_u16Frequency_hz)/4)-1;
    3028:	9e 01       	movw	r18, r28
    302a:	40 e0       	ldi	r20, 0x00	; 0
    302c:	50 e0       	ldi	r21, 0x00	; 0
    302e:	60 e9       	ldi	r22, 0x90	; 144
    3030:	70 ed       	ldi	r23, 0xD0	; 208
    3032:	83 e0       	ldi	r24, 0x03	; 3
    3034:	90 e0       	ldi	r25, 0x00	; 0
    3036:	0e 94 b0 1c 	call	0x3960	; 0x3960 <__udivmodsi4>
    303a:	21 50       	subi	r18, 0x01	; 1
    303c:	31 09       	sbc	r19, r1
    303e:	37 bd       	out	0x27, r19	; 39
    3040:	26 bd       	out	0x26, r18	; 38
		
		/*Calculating Duty for non inverting*/
		OCR1B_REG=((copy_f32DutyCycle*(ICR1_REG+1))/100)-1;
    3042:	66 b5       	in	r22, 0x26	; 38
    3044:	77 b5       	in	r23, 0x27	; 39
    3046:	6f 5f       	subi	r22, 0xFF	; 255
    3048:	7f 4f       	sbci	r23, 0xFF	; 255
    304a:	80 e0       	ldi	r24, 0x00	; 0
    304c:	90 e0       	ldi	r25, 0x00	; 0
    304e:	0e 94 91 1b 	call	0x3722	; 0x3722 <__floatunsisf>
    3052:	a7 01       	movw	r20, r14
    3054:	96 01       	movw	r18, r12
    3056:	0e 94 43 1c 	call	0x3886	; 0x3886 <__mulsf3>
    305a:	20 e0       	ldi	r18, 0x00	; 0
    305c:	30 e0       	ldi	r19, 0x00	; 0
    305e:	48 ec       	ldi	r20, 0xC8	; 200
    3060:	52 e4       	ldi	r21, 0x42	; 66
    3062:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <__divsf3>
    3066:	20 e0       	ldi	r18, 0x00	; 0
    3068:	30 e0       	ldi	r19, 0x00	; 0
    306a:	40 e8       	ldi	r20, 0x80	; 128
    306c:	5f e3       	ldi	r21, 0x3F	; 63
    306e:	0e 94 7e 1a 	call	0x34fc	; 0x34fc <__subsf3>
    3072:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <__fixunssfsi>
    3076:	79 bd       	out	0x29, r23	; 41
    3078:	68 bd       	out	0x28, r22	; 40
		
		/*Clock Select>>clk/64(From prescaler)*/
		SET_BIT(TCCR1B_REG,CS10);
    307a:	8e b5       	in	r24, 0x2e	; 46
    307c:	81 60       	ori	r24, 0x01	; 1
    307e:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TCCR1B_REG,CS11);
    3080:	8e b5       	in	r24, 0x2e	; 46
    3082:	82 60       	ori	r24, 0x02	; 2
    3084:	8e bd       	out	0x2e, r24	; 46
		CLR_BIT(TCCR1B_REG,CS12);
    3086:	8e b5       	in	r24, 0x2e	; 46
    3088:	8b 7f       	andi	r24, 0xFB	; 251
    308a:	8e bd       	out	0x2e, r24	; 46
	else
	{
		//error 
	}
	
    308c:	df 91       	pop	r29
    308e:	cf 91       	pop	r28
    3090:	ff 90       	pop	r15
    3092:	ef 90       	pop	r14
    3094:	df 90       	pop	r13
    3096:	cf 90       	pop	r12
    3098:	08 95       	ret

0000309a <TMR0_voidInit>:
void TMR0_SetCallBackOVF(void (*copy_pFunAction)(void))
{
	if(copy_pFunAction != NULL)
	{
		
		PRV_pFunCallBackOVF=copy_pFunAction;
    309a:	83 b7       	in	r24, 0x33	; 51
    309c:	8f 7b       	andi	r24, 0xBF	; 191
    309e:	83 bf       	out	0x33, r24	; 51
    30a0:	83 b7       	in	r24, 0x33	; 51
    30a2:	88 60       	ori	r24, 0x08	; 8
    30a4:	83 bf       	out	0x33, r24	; 51
    30a6:	83 b7       	in	r24, 0x33	; 51
    30a8:	8f 7e       	andi	r24, 0xEF	; 239
    30aa:	83 bf       	out	0x33, r24	; 51
    30ac:	83 b7       	in	r24, 0x33	; 51
    30ae:	8f 7d       	andi	r24, 0xDF	; 223
    30b0:	83 bf       	out	0x33, r24	; 51
    30b2:	89 b7       	in	r24, 0x39	; 57
    30b4:	82 60       	ori	r24, 0x02	; 2
    30b6:	89 bf       	out	0x39, r24	; 57
    30b8:	89 ef       	ldi	r24, 0xF9	; 249
    30ba:	8c bf       	out	0x3c, r24	; 60
    30bc:	08 95       	ret

000030be <TMR0_voidStart>:
    30be:	83 b7       	in	r24, 0x33	; 51
    30c0:	81 60       	ori	r24, 0x01	; 1
    30c2:	83 bf       	out	0x33, r24	; 51
    30c4:	83 b7       	in	r24, 0x33	; 51
    30c6:	82 60       	ori	r24, 0x02	; 2
    30c8:	83 bf       	out	0x33, r24	; 51
    30ca:	83 b7       	in	r24, 0x33	; 51
    30cc:	8b 7f       	andi	r24, 0xFB	; 251
    30ce:	83 bf       	out	0x33, r24	; 51
    30d0:	10 92 bc 04 	sts	0x04BC, r1	; 0x8004bc <local_u16Counter+0x1>
    30d4:	10 92 bb 04 	sts	0x04BB, r1	; 0x8004bb <local_u16Counter>
    30d8:	08 95       	ret

000030da <TMR0_voidStop>:
    30da:	83 b7       	in	r24, 0x33	; 51
    30dc:	8e 7f       	andi	r24, 0xFE	; 254
    30de:	83 bf       	out	0x33, r24	; 51
    30e0:	83 b7       	in	r24, 0x33	; 51
    30e2:	8d 7f       	andi	r24, 0xFD	; 253
    30e4:	83 bf       	out	0x33, r24	; 51
    30e6:	83 b7       	in	r24, 0x33	; 51
    30e8:	8b 7f       	andi	r24, 0xFB	; 251
    30ea:	83 bf       	out	0x33, r24	; 51
    30ec:	08 95       	ret

000030ee <TMR0_SetCallBackCTC>:
	}
}

void TMR0_SetCallBackCTC(void (*copy_pFunAction)(void))
{
	if(copy_pFunAction != NULL)
    30ee:	00 97       	sbiw	r24, 0x00	; 0
    30f0:	21 f0       	breq	.+8      	; 0x30fa <TMR0_SetCallBackCTC+0xc>
	{
		
		PRV_pFunCallBackCTC=copy_pFunAction;
    30f2:	90 93 be 04 	sts	0x04BE, r25	; 0x8004be <PRV_pFunCallBackCTC+0x1>
    30f6:	80 93 bd 04 	sts	0x04BD, r24	; 0x8004bd <PRV_pFunCallBackCTC>
    30fa:	08 95       	ret

000030fc <TMR0clear_flag>:
}

void TMR0clear_flag(void)
{
	// SET_BIT(TIFR_REG,OCF0);
	TIFR_REG |= (1 << OCF0); 
    30fc:	88 b7       	in	r24, 0x38	; 56
    30fe:	82 60       	ori	r24, 0x02	; 2
    3100:	88 bf       	out	0x38, r24	; 56
	SET_BIT(TIFR_REG,TOV0);
    3102:	88 b7       	in	r24, 0x38	; 56
    3104:	81 60       	ori	r24, 0x01	; 1
    3106:	88 bf       	out	0x38, r24	; 56
    3108:	08 95       	ret

0000310a <__vector_11>:



void __vector_11(void)__attribute__((signal));
void __vector_11(void)
{
    310a:	1f 92       	push	r1
    310c:	0f 92       	push	r0
    310e:	0f b6       	in	r0, 0x3f	; 63
    3110:	0f 92       	push	r0
    3112:	11 24       	eor	r1, r1
    3114:	2f 93       	push	r18
    3116:	3f 93       	push	r19
    3118:	4f 93       	push	r20
    311a:	5f 93       	push	r21
    311c:	6f 93       	push	r22
    311e:	7f 93       	push	r23
    3120:	8f 93       	push	r24
    3122:	9f 93       	push	r25
    3124:	af 93       	push	r26
    3126:	bf 93       	push	r27
    3128:	ef 93       	push	r30
    312a:	ff 93       	push	r31
	
	
	local_u16Counter++;
    312c:	80 91 bb 04 	lds	r24, 0x04BB	; 0x8004bb <local_u16Counter>
    3130:	90 91 bc 04 	lds	r25, 0x04BC	; 0x8004bc <local_u16Counter+0x1>
    3134:	01 96       	adiw	r24, 0x01	; 1
    3136:	90 93 bc 04 	sts	0x04BC, r25	; 0x8004bc <local_u16Counter+0x1>
    313a:	80 93 bb 04 	sts	0x04BB, r24	; 0x8004bb <local_u16Counter>
	
	if(local_u16Counter==TMR0_OVERFLOW_COUNTER)
    313e:	88 3e       	cpi	r24, 0xE8	; 232
    3140:	93 40       	sbci	r25, 0x03	; 3
    3142:	69 f4       	brne	.+26     	; 0x315e <__vector_11+0x54>
	{
		/*put preload value in timer register*/
		TCNT0_REG=TMR0_PRELOAD_VALUE;
    3144:	81 e7       	ldi	r24, 0x71	; 113
    3146:	82 bf       	out	0x32, r24	; 50
		
		/*CLR counter*/
		local_u16Counter=0;
    3148:	10 92 bc 04 	sts	0x04BC, r1	; 0x8004bc <local_u16Counter+0x1>
    314c:	10 92 bb 04 	sts	0x04BB, r1	; 0x8004bb <local_u16Counter>
		
		if(PRV_pFunCallBackOVF != NULL)
    3150:	e0 91 bf 04 	lds	r30, 0x04BF	; 0x8004bf <PRV_pFunCallBackOVF>
    3154:	f0 91 c0 04 	lds	r31, 0x04C0	; 0x8004c0 <PRV_pFunCallBackOVF+0x1>
    3158:	30 97       	sbiw	r30, 0x00	; 0
    315a:	09 f0       	breq	.+2      	; 0x315e <__vector_11+0x54>
		{
			/*execute action*/
			PRV_pFunCallBackOVF();
    315c:	09 95       	icall
		else
		{
				//error state
		}
	}
}
    315e:	ff 91       	pop	r31
    3160:	ef 91       	pop	r30
    3162:	bf 91       	pop	r27
    3164:	af 91       	pop	r26
    3166:	9f 91       	pop	r25
    3168:	8f 91       	pop	r24
    316a:	7f 91       	pop	r23
    316c:	6f 91       	pop	r22
    316e:	5f 91       	pop	r21
    3170:	4f 91       	pop	r20
    3172:	3f 91       	pop	r19
    3174:	2f 91       	pop	r18
    3176:	0f 90       	pop	r0
    3178:	0f be       	out	0x3f, r0	; 63
    317a:	0f 90       	pop	r0
    317c:	1f 90       	pop	r1
    317e:	18 95       	reti

00003180 <__vector_10>:

void __vector_10(void)__attribute__((signal));
void __vector_10(void)
{
    3180:	1f 92       	push	r1
    3182:	0f 92       	push	r0
    3184:	0f b6       	in	r0, 0x3f	; 63
    3186:	0f 92       	push	r0
    3188:	11 24       	eor	r1, r1
    318a:	2f 93       	push	r18
    318c:	3f 93       	push	r19
    318e:	4f 93       	push	r20
    3190:	5f 93       	push	r21
    3192:	6f 93       	push	r22
    3194:	7f 93       	push	r23
    3196:	8f 93       	push	r24
    3198:	9f 93       	push	r25
    319a:	af 93       	push	r26
    319c:	bf 93       	push	r27
    319e:	ef 93       	push	r30
    31a0:	ff 93       	push	r31
	

	
	local_u16Counter++;
    31a2:	80 91 bb 04 	lds	r24, 0x04BB	; 0x8004bb <local_u16Counter>
    31a6:	90 91 bc 04 	lds	r25, 0x04BC	; 0x8004bc <local_u16Counter+0x1>
    31aa:	01 96       	adiw	r24, 0x01	; 1
    31ac:	90 93 bc 04 	sts	0x04BC, r25	; 0x8004bc <local_u16Counter+0x1>
    31b0:	80 93 bb 04 	sts	0x04BB, r24	; 0x8004bb <local_u16Counter>
	
	if(local_u16Counter==TMR0_CTC_COUNTER)
    31b4:	88 38       	cpi	r24, 0x88	; 136
    31b6:	93 41       	sbci	r25, 0x13	; 19
    31b8:	69 f4       	brne	.+26     	; 0x31d4 <__vector_10+0x54>
	{
		
		/*CLR counter*/
		local_u16Counter=0;
    31ba:	10 92 bc 04 	sts	0x04BC, r1	; 0x8004bc <local_u16Counter+0x1>
    31be:	10 92 bb 04 	sts	0x04BB, r1	; 0x8004bb <local_u16Counter>
		
		if(PRV_pFunCallBackCTC != NULL)
    31c2:	e0 91 bd 04 	lds	r30, 0x04BD	; 0x8004bd <PRV_pFunCallBackCTC>
    31c6:	f0 91 be 04 	lds	r31, 0x04BE	; 0x8004be <PRV_pFunCallBackCTC+0x1>
    31ca:	30 97       	sbiw	r30, 0x00	; 0
    31cc:	19 f0       	breq	.+6      	; 0x31d4 <__vector_10+0x54>
		{
			/*execute action*/
			PRV_pFunCallBackCTC();
    31ce:	09 95       	icall
			TMR0clear_flag();
    31d0:	0e 94 7e 18 	call	0x30fc	; 0x30fc <TMR0clear_flag>
		{
				//error state
		}
	}
	
    31d4:	ff 91       	pop	r31
    31d6:	ef 91       	pop	r30
    31d8:	bf 91       	pop	r27
    31da:	af 91       	pop	r26
    31dc:	9f 91       	pop	r25
    31de:	8f 91       	pop	r24
    31e0:	7f 91       	pop	r23
    31e2:	6f 91       	pop	r22
    31e4:	5f 91       	pop	r21
    31e6:	4f 91       	pop	r20
    31e8:	3f 91       	pop	r19
    31ea:	2f 91       	pop	r18
    31ec:	0f 90       	pop	r0
    31ee:	0f be       	out	0x3f, r0	; 63
    31f0:	0f 90       	pop	r0
    31f2:	1f 90       	pop	r1
    31f4:	18 95       	reti

000031f6 <TMR2_voidInit>:

void TMR2_SetCallBackOVF(void (*copy_pFunAction)(void))
{
    if(copy_pFunAction != NULL)
    {
        PRV_pFunCallBackOVF=copy_pFunAction;
    31f6:	85 b5       	in	r24, 0x25	; 37
    31f8:	8f 7b       	andi	r24, 0xBF	; 191
    31fa:	85 bd       	out	0x25, r24	; 37
    31fc:	85 b5       	in	r24, 0x25	; 37
    31fe:	88 60       	ori	r24, 0x08	; 8
    3200:	85 bd       	out	0x25, r24	; 37
    3202:	85 b5       	in	r24, 0x25	; 37
    3204:	8f 7e       	andi	r24, 0xEF	; 239
    3206:	85 bd       	out	0x25, r24	; 37
    3208:	85 b5       	in	r24, 0x25	; 37
    320a:	8f 7d       	andi	r24, 0xDF	; 223
    320c:	85 bd       	out	0x25, r24	; 37
    320e:	89 b7       	in	r24, 0x39	; 57
    3210:	80 68       	ori	r24, 0x80	; 128
    3212:	89 bf       	out	0x39, r24	; 57
    3214:	89 ef       	ldi	r24, 0xF9	; 249
    3216:	83 bd       	out	0x23, r24	; 35
    3218:	08 95       	ret

0000321a <TMR2_voidStart>:
    321a:	85 b5       	in	r24, 0x25	; 37
    321c:	81 60       	ori	r24, 0x01	; 1
    321e:	85 bd       	out	0x25, r24	; 37
    3220:	85 b5       	in	r24, 0x25	; 37
    3222:	82 60       	ori	r24, 0x02	; 2
    3224:	85 bd       	out	0x25, r24	; 37
    3226:	85 b5       	in	r24, 0x25	; 37
    3228:	8b 7f       	andi	r24, 0xFB	; 251
    322a:	85 bd       	out	0x25, r24	; 37
    322c:	10 92 c2 04 	sts	0x04C2, r1	; 0x8004c2 <local_u16Counter+0x1>
    3230:	10 92 c1 04 	sts	0x04C1, r1	; 0x8004c1 <local_u16Counter>
    3234:	08 95       	ret

00003236 <TMR2_voidStop>:
    3236:	85 b5       	in	r24, 0x25	; 37
    3238:	8e 7f       	andi	r24, 0xFE	; 254
    323a:	85 bd       	out	0x25, r24	; 37
    323c:	85 b5       	in	r24, 0x25	; 37
    323e:	8d 7f       	andi	r24, 0xFD	; 253
    3240:	85 bd       	out	0x25, r24	; 37
    3242:	85 b5       	in	r24, 0x25	; 37
    3244:	8b 7f       	andi	r24, 0xFB	; 251
    3246:	85 bd       	out	0x25, r24	; 37
    3248:	08 95       	ret

0000324a <TMR2_SetCallBackCTC>:
    }
}

void TMR2_SetCallBackCTC(void (*copy_pFunAction)(void))
{
    if(copy_pFunAction != NULL)
    324a:	00 97       	sbiw	r24, 0x00	; 0
    324c:	21 f0       	breq	.+8      	; 0x3256 <TMR2_SetCallBackCTC+0xc>
    {
        PRV_pFunCallBackCTC=copy_pFunAction;
    324e:	90 93 c4 04 	sts	0x04C4, r25	; 0x8004c4 <PRV_pFunCallBackCTC+0x1>
    3252:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <PRV_pFunCallBackCTC>
    3256:	08 95       	ret

00003258 <TMR2_clear_flag>:
    }
}

void TMR2_clear_flag(void)
{
    TIFR2_REG |= (1 << OCF2); 
    3258:	88 b7       	in	r24, 0x38	; 56
    325a:	80 68       	ori	r24, 0x80	; 128
    325c:	88 bf       	out	0x38, r24	; 56
    SET_BIT(TIFR2_REG,TOV2);
    325e:	88 b7       	in	r24, 0x38	; 56
    3260:	80 64       	ori	r24, 0x40	; 64
    3262:	88 bf       	out	0x38, r24	; 56
    3264:	08 95       	ret

00003266 <__vector_5>:
}

void __vector_5(void)__attribute__((signal));
void __vector_5(void)
{
    3266:	1f 92       	push	r1
    3268:	0f 92       	push	r0
    326a:	0f b6       	in	r0, 0x3f	; 63
    326c:	0f 92       	push	r0
    326e:	11 24       	eor	r1, r1
    3270:	2f 93       	push	r18
    3272:	3f 93       	push	r19
    3274:	4f 93       	push	r20
    3276:	5f 93       	push	r21
    3278:	6f 93       	push	r22
    327a:	7f 93       	push	r23
    327c:	8f 93       	push	r24
    327e:	9f 93       	push	r25
    3280:	af 93       	push	r26
    3282:	bf 93       	push	r27
    3284:	ef 93       	push	r30
    3286:	ff 93       	push	r31
    local_u16Counter++;
    3288:	80 91 c1 04 	lds	r24, 0x04C1	; 0x8004c1 <local_u16Counter>
    328c:	90 91 c2 04 	lds	r25, 0x04C2	; 0x8004c2 <local_u16Counter+0x1>
    3290:	01 96       	adiw	r24, 0x01	; 1
    3292:	90 93 c2 04 	sts	0x04C2, r25	; 0x8004c2 <local_u16Counter+0x1>
    3296:	80 93 c1 04 	sts	0x04C1, r24	; 0x8004c1 <local_u16Counter>
    
    if(local_u16Counter==TMR2_OVERFLOW_COUNTER)
    329a:	88 3e       	cpi	r24, 0xE8	; 232
    329c:	93 40       	sbci	r25, 0x03	; 3
    329e:	69 f4       	brne	.+26     	; 0x32ba <__vector_5+0x54>
    {
        /*put preload value in timer register*/
        TCNT2_REG=TMR2_PRELOAD_VALUE;
    32a0:	81 e7       	ldi	r24, 0x71	; 113
    32a2:	84 bd       	out	0x24, r24	; 36
        
        /*CLR counter*/
        local_u16Counter=0;
    32a4:	10 92 c2 04 	sts	0x04C2, r1	; 0x8004c2 <local_u16Counter+0x1>
    32a8:	10 92 c1 04 	sts	0x04C1, r1	; 0x8004c1 <local_u16Counter>
        
        if(PRV_pFunCallBackOVF != NULL)
    32ac:	e0 91 c5 04 	lds	r30, 0x04C5	; 0x8004c5 <PRV_pFunCallBackOVF>
    32b0:	f0 91 c6 04 	lds	r31, 0x04C6	; 0x8004c6 <PRV_pFunCallBackOVF+0x1>
    32b4:	30 97       	sbiw	r30, 0x00	; 0
    32b6:	09 f0       	breq	.+2      	; 0x32ba <__vector_5+0x54>
        {
            /*execute action*/
            PRV_pFunCallBackOVF();
    32b8:	09 95       	icall
        else
        {
            //error state
        }
    }
}
    32ba:	ff 91       	pop	r31
    32bc:	ef 91       	pop	r30
    32be:	bf 91       	pop	r27
    32c0:	af 91       	pop	r26
    32c2:	9f 91       	pop	r25
    32c4:	8f 91       	pop	r24
    32c6:	7f 91       	pop	r23
    32c8:	6f 91       	pop	r22
    32ca:	5f 91       	pop	r21
    32cc:	4f 91       	pop	r20
    32ce:	3f 91       	pop	r19
    32d0:	2f 91       	pop	r18
    32d2:	0f 90       	pop	r0
    32d4:	0f be       	out	0x3f, r0	; 63
    32d6:	0f 90       	pop	r0
    32d8:	1f 90       	pop	r1
    32da:	18 95       	reti

000032dc <__vector_4>:

void __vector_4(void)__attribute__((signal));
void __vector_4(void)
{
    32dc:	1f 92       	push	r1
    32de:	0f 92       	push	r0
    32e0:	0f b6       	in	r0, 0x3f	; 63
    32e2:	0f 92       	push	r0
    32e4:	11 24       	eor	r1, r1
    32e6:	2f 93       	push	r18
    32e8:	3f 93       	push	r19
    32ea:	4f 93       	push	r20
    32ec:	5f 93       	push	r21
    32ee:	6f 93       	push	r22
    32f0:	7f 93       	push	r23
    32f2:	8f 93       	push	r24
    32f4:	9f 93       	push	r25
    32f6:	af 93       	push	r26
    32f8:	bf 93       	push	r27
    32fa:	ef 93       	push	r30
    32fc:	ff 93       	push	r31
    local_u16Counter++;
    32fe:	80 91 c1 04 	lds	r24, 0x04C1	; 0x8004c1 <local_u16Counter>
    3302:	90 91 c2 04 	lds	r25, 0x04C2	; 0x8004c2 <local_u16Counter+0x1>
    3306:	01 96       	adiw	r24, 0x01	; 1
    3308:	90 93 c2 04 	sts	0x04C2, r25	; 0x8004c2 <local_u16Counter+0x1>
    330c:	80 93 c1 04 	sts	0x04C1, r24	; 0x8004c1 <local_u16Counter>
    
    if(local_u16Counter==TMR2_CTC_COUNTER)
    3310:	88 38       	cpi	r24, 0x88	; 136
    3312:	93 41       	sbci	r25, 0x13	; 19
    3314:	69 f4       	brne	.+26     	; 0x3330 <__vector_4+0x54>
    {
        /*CLR counter*/
        local_u16Counter=0;
    3316:	10 92 c2 04 	sts	0x04C2, r1	; 0x8004c2 <local_u16Counter+0x1>
    331a:	10 92 c1 04 	sts	0x04C1, r1	; 0x8004c1 <local_u16Counter>
        
        if(PRV_pFunCallBackCTC != NULL)
    331e:	e0 91 c3 04 	lds	r30, 0x04C3	; 0x8004c3 <PRV_pFunCallBackCTC>
    3322:	f0 91 c4 04 	lds	r31, 0x04C4	; 0x8004c4 <PRV_pFunCallBackCTC+0x1>
    3326:	30 97       	sbiw	r30, 0x00	; 0
    3328:	19 f0       	breq	.+6      	; 0x3330 <__vector_4+0x54>
        {
            /*execute action*/
            PRV_pFunCallBackCTC();
    332a:	09 95       	icall
            TMR2_clear_flag();
    332c:	0e 94 2c 19 	call	0x3258	; 0x3258 <TMR2_clear_flag>
        else
        {
            //error state
        }
    }
}
    3330:	ff 91       	pop	r31
    3332:	ef 91       	pop	r30
    3334:	bf 91       	pop	r27
    3336:	af 91       	pop	r26
    3338:	9f 91       	pop	r25
    333a:	8f 91       	pop	r24
    333c:	7f 91       	pop	r23
    333e:	6f 91       	pop	r22
    3340:	5f 91       	pop	r21
    3342:	4f 91       	pop	r20
    3344:	3f 91       	pop	r19
    3346:	2f 91       	pop	r18
    3348:	0f 90       	pop	r0
    334a:	0f be       	out	0x3f, r0	; 63
    334c:	0f 90       	pop	r0
    334e:	1f 90       	pop	r1
    3350:	18 95       	reti

00003352 <TWI_voidInitMaster>:



void TWI_voidInitMaster(void)
{
	TWBR_REG=12;
    3352:	8c e0       	ldi	r24, 0x0C	; 12
    3354:	80 b9       	out	0x00, r24	; 0
	CLR_BIT(TWSR_REG,TWPS1);
    3356:	81 b1       	in	r24, 0x01	; 1
    3358:	8d 7f       	andi	r24, 0xFD	; 253
    335a:	81 b9       	out	0x01, r24	; 1
	CLR_BIT(TWSR_REG,TWPS0);
    335c:	81 b1       	in	r24, 0x01	; 1
    335e:	8e 7f       	andi	r24, 0xFE	; 254
    3360:	81 b9       	out	0x01, r24	; 1
	
	SET_BIT(TWCR_REG,TWEN);
    3362:	86 b7       	in	r24, 0x36	; 54
    3364:	84 60       	ori	r24, 0x04	; 4
    3366:	86 bf       	out	0x36, r24	; 54
    3368:	08 95       	ret

0000336a <TWI_voidSendStartCondition>:



void TWI_voidSendStartCondition(void)
{
	SET_BIT(TWCR_REG,TWSTA);
    336a:	86 b7       	in	r24, 0x36	; 54
    336c:	80 62       	ori	r24, 0x20	; 32
    336e:	86 bf       	out	0x36, r24	; 54
	
	SET_BIT(TWCR_REG,TWINT);
    3370:	86 b7       	in	r24, 0x36	; 54
    3372:	80 68       	ori	r24, 0x80	; 128
    3374:	86 bf       	out	0x36, r24	; 54
	
	while(0==GET_BIT(TWCR_REG,TWINT));
    3376:	06 b6       	in	r0, 0x36	; 54
    3378:	07 fe       	sbrs	r0, 7
    337a:	fd cf       	rjmp	.-6      	; 0x3376 <TWI_voidSendStartCondition+0xc>
	
	while(TWI_STATUS_VALUE != TWI_START_CONDITION_ACK);
    337c:	81 b1       	in	r24, 0x01	; 1
    337e:	88 7f       	andi	r24, 0xF8	; 248
    3380:	88 30       	cpi	r24, 0x08	; 8
    3382:	e1 f7       	brne	.-8      	; 0x337c <TWI_voidSendStartCondition+0x12>
}
    3384:	08 95       	ret

00003386 <TWI_voidSendRepeatedStartCondition>:



void TWI_voidSendRepeatedStartCondition(void)
{
	SET_BIT(TWCR_REG,TWSTA);
    3386:	86 b7       	in	r24, 0x36	; 54
    3388:	80 62       	ori	r24, 0x20	; 32
    338a:	86 bf       	out	0x36, r24	; 54
	
	SET_BIT(TWCR_REG,TWINT);
    338c:	86 b7       	in	r24, 0x36	; 54
    338e:	80 68       	ori	r24, 0x80	; 128
    3390:	86 bf       	out	0x36, r24	; 54
	
	while(0==GET_BIT(TWCR_REG,TWINT));
    3392:	06 b6       	in	r0, 0x36	; 54
    3394:	07 fe       	sbrs	r0, 7
    3396:	fd cf       	rjmp	.-6      	; 0x3392 <TWI_voidSendRepeatedStartCondition+0xc>
	
	while(TWI_STATUS_VALUE != TWI_REP_START_CONDITION_ACK);
    3398:	81 b1       	in	r24, 0x01	; 1
    339a:	88 7f       	andi	r24, 0xF8	; 248
    339c:	80 31       	cpi	r24, 0x10	; 16
    339e:	e1 f7       	brne	.-8      	; 0x3398 <TWI_voidSendRepeatedStartCondition+0x12>
}
    33a0:	08 95       	ret

000033a2 <TWI_voidSendStopCondition>:



void TWI_voidSendStopCondition(void)
{
	SET_BIT(TWCR_REG, TWSTO);
    33a2:	86 b7       	in	r24, 0x36	; 54
    33a4:	80 61       	ori	r24, 0x10	; 16
    33a6:	86 bf       	out	0x36, r24	; 54
	
	SET_BIT(TWCR_REG,TWINT);
    33a8:	86 b7       	in	r24, 0x36	; 54
    33aa:	80 68       	ori	r24, 0x80	; 128
    33ac:	86 bf       	out	0x36, r24	; 54
    33ae:	08 95       	ret

000033b0 <TWI_voidSendSlaveAddWithWrite>:



void TWI_voidSendSlaveAddWithWrite(u8 copy_u8SlaveAdd)
{
	if(copy_u8SlaveAdd<128)
    33b0:	88 23       	and	r24, r24
    33b2:	94 f0       	brlt	.+36     	; 0x33d8 <TWI_voidSendSlaveAddWithWrite+0x28>
	{
		TWDR_REG=(copy_u8SlaveAdd<<1);
    33b4:	88 0f       	add	r24, r24
    33b6:	83 b9       	out	0x03, r24	; 3
		CLR_BIT(TWDR_REG,TWD0);
    33b8:	83 b1       	in	r24, 0x03	; 3
    33ba:	8e 7f       	andi	r24, 0xFE	; 254
    33bc:	83 b9       	out	0x03, r24	; 3
		
		CLR_BIT(TWCR_REG,TWSTA);
    33be:	86 b7       	in	r24, 0x36	; 54
    33c0:	8f 7d       	andi	r24, 0xDF	; 223
    33c2:	86 bf       	out	0x36, r24	; 54
		
		/*clr flag*/
		SET_BIT(TWCR_REG,TWINT);
    33c4:	86 b7       	in	r24, 0x36	; 54
    33c6:	80 68       	ori	r24, 0x80	; 128
    33c8:	86 bf       	out	0x36, r24	; 54
		
		while(0==GET_BIT(TWCR_REG,TWINT));
    33ca:	06 b6       	in	r0, 0x36	; 54
    33cc:	07 fe       	sbrs	r0, 7
    33ce:	fd cf       	rjmp	.-6      	; 0x33ca <TWI_voidSendSlaveAddWithWrite+0x1a>
		
		while(TWI_STATUS_VALUE != TWI_SLAVE_ADDRESS_WRITE_ACK);
    33d0:	81 b1       	in	r24, 0x01	; 1
    33d2:	88 7f       	andi	r24, 0xF8	; 248
    33d4:	88 31       	cpi	r24, 0x18	; 24
    33d6:	e1 f7       	brne	.-8      	; 0x33d0 <TWI_voidSendSlaveAddWithWrite+0x20>
    33d8:	08 95       	ret

000033da <TWI_voidSendSlaveAddWithRead>:
	}
}

void TWI_voidSendSlaveAddWithRead(u8 copy_u8SlaveAdd)
{
	if(copy_u8SlaveAdd<128)
    33da:	88 23       	and	r24, r24
    33dc:	94 f0       	brlt	.+36     	; 0x3402 <TWI_voidSendSlaveAddWithRead+0x28>
	{
		TWDR_REG=(copy_u8SlaveAdd<<1);
    33de:	88 0f       	add	r24, r24
    33e0:	83 b9       	out	0x03, r24	; 3
		SET_BIT(TWDR_REG,TWD0);
    33e2:	83 b1       	in	r24, 0x03	; 3
    33e4:	81 60       	ori	r24, 0x01	; 1
    33e6:	83 b9       	out	0x03, r24	; 3
		
		CLR_BIT(TWCR_REG,TWSTA);
    33e8:	86 b7       	in	r24, 0x36	; 54
    33ea:	8f 7d       	andi	r24, 0xDF	; 223
    33ec:	86 bf       	out	0x36, r24	; 54
		
		/*clr flag*/
		SET_BIT(TWCR_REG,TWINT);
    33ee:	86 b7       	in	r24, 0x36	; 54
    33f0:	80 68       	ori	r24, 0x80	; 128
    33f2:	86 bf       	out	0x36, r24	; 54
		
		while(0==GET_BIT(TWCR_REG,TWINT));
    33f4:	06 b6       	in	r0, 0x36	; 54
    33f6:	07 fe       	sbrs	r0, 7
    33f8:	fd cf       	rjmp	.-6      	; 0x33f4 <TWI_voidSendSlaveAddWithRead+0x1a>
		
		while(TWI_STATUS_VALUE != TWI_SLAVE_ADDRESS_READ_ACK);
    33fa:	81 b1       	in	r24, 0x01	; 1
    33fc:	88 7f       	andi	r24, 0xF8	; 248
    33fe:	80 34       	cpi	r24, 0x40	; 64
    3400:	e1 f7       	brne	.-8      	; 0x33fa <TWI_voidSendSlaveAddWithRead+0x20>
    3402:	08 95       	ret

00003404 <TWI_voidTransmitMasterDataByte>:



void TWI_voidTransmitMasterDataByte(u8 copy_u8TxData)
{
	TWDR_REG=copy_u8TxData;
    3404:	83 b9       	out	0x03, r24	; 3
	
	/*clr flag*/
	SET_BIT(TWCR_REG,TWINT);
    3406:	86 b7       	in	r24, 0x36	; 54
    3408:	80 68       	ori	r24, 0x80	; 128
    340a:	86 bf       	out	0x36, r24	; 54
	
	while(0==GET_BIT(TWCR_REG,TWINT));
    340c:	06 b6       	in	r0, 0x36	; 54
    340e:	07 fe       	sbrs	r0, 7
    3410:	fd cf       	rjmp	.-6      	; 0x340c <TWI_voidTransmitMasterDataByte+0x8>
		
	while(TWI_STATUS_VALUE != TWI_MATER_DATA_TRANSMIT_ACK);
    3412:	81 b1       	in	r24, 0x01	; 1
    3414:	88 7f       	andi	r24, 0xF8	; 248
    3416:	88 32       	cpi	r24, 0x28	; 40
    3418:	e1 f7       	brne	.-8      	; 0x3412 <TWI_voidTransmitMasterDataByte+0xe>
}
    341a:	08 95       	ret

0000341c <TWI_voidRecieveMasterDataByteWithAch>:




void TWI_voidRecieveMasterDataByteWithAch(u8* copy_pu8RxData)
{
    341c:	fc 01       	movw	r30, r24
	if(copy_pu8RxData!=NULL)
    341e:	89 2b       	or	r24, r25
    3420:	91 f0       	breq	.+36     	; 0x3446 <TWI_voidRecieveMasterDataByteWithAch+0x2a>
	{
		SET_BIT(TWCR_REG,TWEA);
    3422:	96 b7       	in	r25, 0x36	; 54
    3424:	90 64       	ori	r25, 0x40	; 64
    3426:	96 bf       	out	0x36, r25	; 54
		
		/*clr flag*/
		SET_BIT(TWCR_REG,TWINT);
    3428:	96 b7       	in	r25, 0x36	; 54
    342a:	90 68       	ori	r25, 0x80	; 128
    342c:	96 bf       	out	0x36, r25	; 54
		
		while(0==GET_BIT(TWCR_REG,TWINT));
    342e:	06 b6       	in	r0, 0x36	; 54
    3430:	07 fe       	sbrs	r0, 7
    3432:	fd cf       	rjmp	.-6      	; 0x342e <TWI_voidRecieveMasterDataByteWithAch+0x12>
		
		while(TWI_STATUS_VALUE != TWI_MATER_DATA_RECIEVE_ACK);
    3434:	91 b1       	in	r25, 0x01	; 1
    3436:	98 7f       	andi	r25, 0xF8	; 248
    3438:	90 35       	cpi	r25, 0x50	; 80
    343a:	e1 f7       	brne	.-8      	; 0x3434 <TWI_voidRecieveMasterDataByteWithAch+0x18>
		
		*copy_pu8RxData=TWDR_REG;
    343c:	83 b1       	in	r24, 0x03	; 3
    343e:	80 83       	st	Z, r24
		
		CLR_BIT(TWCR_REG,TWEA);
    3440:	86 b7       	in	r24, 0x36	; 54
    3442:	8f 7b       	andi	r24, 0xBF	; 191
    3444:	86 bf       	out	0x36, r24	; 54
    3446:	08 95       	ret

00003448 <TWI_voidRecieveMasterDataByteWithNAch>:




void TWI_voidRecieveMasterDataByteWithNAch(u8* copy_pu8RxData)
{
    3448:	fc 01       	movw	r30, r24
	if(copy_pu8RxData!=NULL)
    344a:	89 2b       	or	r24, r25
    344c:	61 f0       	breq	.+24     	; 0x3466 <TWI_voidRecieveMasterDataByteWithNAch+0x1e>
	{
		
		
		
		/*clr flag*/
		SET_BIT(TWCR_REG,TWINT);
    344e:	96 b7       	in	r25, 0x36	; 54
    3450:	90 68       	ori	r25, 0x80	; 128
    3452:	96 bf       	out	0x36, r25	; 54
		
		while(0==GET_BIT(TWCR_REG,TWINT));
    3454:	06 b6       	in	r0, 0x36	; 54
    3456:	07 fe       	sbrs	r0, 7
    3458:	fd cf       	rjmp	.-6      	; 0x3454 <TWI_voidRecieveMasterDataByteWithNAch+0xc>
		
		while(TWI_STATUS_VALUE != TWI_MATER_DATA_RECIEVE_NACK);
    345a:	91 b1       	in	r25, 0x01	; 1
    345c:	98 7f       	andi	r25, 0xF8	; 248
    345e:	98 35       	cpi	r25, 0x58	; 88
    3460:	e1 f7       	brne	.-8      	; 0x345a <TWI_voidRecieveMasterDataByteWithNAch+0x12>
		
		*copy_pu8RxData=TWDR_REG;
    3462:	83 b1       	in	r24, 0x03	; 3
    3464:	80 83       	st	Z, r24
    3466:	08 95       	ret

00003468 <UART_voidInit>:
	else
	{
		//error state
	}
	
}
    3468:	8b b1       	in	r24, 0x0b	; 11
    346a:	8d 7f       	andi	r24, 0xFD	; 253
    346c:	8b b9       	out	0x0b, r24	; 11
    346e:	87 e6       	ldi	r24, 0x67	; 103
    3470:	89 b9       	out	0x09, r24	; 9
    3472:	8a b1       	in	r24, 0x0a	; 10
    3474:	8b 7f       	andi	r24, 0xFB	; 251
    3476:	8a b9       	out	0x0a, r24	; 10
    3478:	86 e8       	ldi	r24, 0x86	; 134
    347a:	80 bd       	out	0x20, r24	; 32
    347c:	8a b1       	in	r24, 0x0a	; 10
    347e:	80 61       	ori	r24, 0x10	; 16
    3480:	8a b9       	out	0x0a, r24	; 10
    3482:	8a b1       	in	r24, 0x0a	; 10
    3484:	88 60       	ori	r24, 0x08	; 8
    3486:	8a b9       	out	0x0a, r24	; 10
    3488:	08 95       	ret

0000348a <UART_voidTxChar>:
    348a:	8c b9       	out	0x0c, r24	; 12
    348c:	5d 9b       	sbis	0x0b, 5	; 11
    348e:	fe cf       	rjmp	.-4      	; 0x348c <UART_voidTxChar+0x2>
    3490:	08 95       	ret

00003492 <UART_voidRxChar>:
    3492:	00 97       	sbiw	r24, 0x00	; 0
    3494:	29 f0       	breq	.+10     	; 0x34a0 <UART_voidRxChar+0xe>
    3496:	5f 9b       	sbis	0x0b, 7	; 11
    3498:	fe cf       	rjmp	.-4      	; 0x3496 <UART_voidRxChar+0x4>
    349a:	2c b1       	in	r18, 0x0c	; 12
    349c:	fc 01       	movw	r30, r24
    349e:	20 83       	st	Z, r18
    34a0:	08 95       	ret

000034a2 <UART_voidTxString>:
    34a2:	0f 93       	push	r16
    34a4:	1f 93       	push	r17
    34a6:	cf 93       	push	r28
    34a8:	00 97       	sbiw	r24, 0x00	; 0
    34aa:	29 f4       	brne	.+10     	; 0x34b6 <UART_voidTxString+0x14>
    34ac:	0c c0       	rjmp	.+24     	; 0x34c6 <UART_voidTxString+0x24>
    34ae:	0e 94 45 1a 	call	0x348a	; 0x348a <UART_voidTxChar>
    34b2:	cf 5f       	subi	r28, 0xFF	; 255
    34b4:	02 c0       	rjmp	.+4      	; 0x34ba <UART_voidTxString+0x18>
    34b6:	8c 01       	movw	r16, r24
    34b8:	c0 e0       	ldi	r28, 0x00	; 0
    34ba:	f8 01       	movw	r30, r16
    34bc:	ec 0f       	add	r30, r28
    34be:	f1 1d       	adc	r31, r1
    34c0:	80 81       	ld	r24, Z
    34c2:	81 11       	cpse	r24, r1
    34c4:	f4 cf       	rjmp	.-24     	; 0x34ae <UART_voidTxString+0xc>
    34c6:	cf 91       	pop	r28
    34c8:	1f 91       	pop	r17
    34ca:	0f 91       	pop	r16
    34cc:	08 95       	ret

000034ce <UART_voidRxCharWithTimeout>:

void UART_voidRxCharWithTimeout(u8* copy_pu8RxData)
{
	u16 Local_u16TimeoutCounter=0;
	if(copy_pu8RxData!=NULL)
    34ce:	00 97       	sbiw	r24, 0x00	; 0
    34d0:	69 f4       	brne	.+26     	; 0x34ec <UART_voidRxCharWithTimeout+0x1e>
    34d2:	08 95       	ret
	{
		/*busy wait for unread data in data register*/
		while(0==GET_BIT(UCSRA_REG,RXC))
		{
			if(Local_u16TimeoutCounter>=UART_TIMEOUT_MS)
    34d4:	24 36       	cpi	r18, 0x64	; 100
    34d6:	31 05       	cpc	r19, r1
    34d8:	80 f4       	brcc	.+32     	; 0x34fa <UART_voidRxCharWithTimeout+0x2c>
    34da:	ef e9       	ldi	r30, 0x9F	; 159
    34dc:	ff e0       	ldi	r31, 0x0F	; 15
    34de:	31 97       	sbiw	r30, 0x01	; 1
    34e0:	f1 f7       	brne	.-4      	; 0x34de <UART_voidRxCharWithTimeout+0x10>
    34e2:	00 c0       	rjmp	.+0      	; 0x34e4 <UART_voidRxCharWithTimeout+0x16>
    34e4:	00 00       	nop
			{
				return 0;
			}
			_delay_ms(1);
			Local_u16TimeoutCounter++;
    34e6:	2f 5f       	subi	r18, 0xFF	; 255
    34e8:	3f 4f       	sbci	r19, 0xFF	; 255
    34ea:	02 c0       	rjmp	.+4      	; 0x34f0 <UART_voidRxCharWithTimeout+0x22>
    34ec:	20 e0       	ldi	r18, 0x00	; 0
    34ee:	30 e0       	ldi	r19, 0x00	; 0
{
	u16 Local_u16TimeoutCounter=0;
	if(copy_pu8RxData!=NULL)
	{
		/*busy wait for unread data in data register*/
		while(0==GET_BIT(UCSRA_REG,RXC))
    34f0:	5f 9b       	sbis	0x0b, 7	; 11
    34f2:	f0 cf       	rjmp	.-32     	; 0x34d4 <UART_voidRxCharWithTimeout+0x6>
			}
			_delay_ms(1);
			Local_u16TimeoutCounter++;
		}
		/*Read data to data register*/
		*copy_pu8RxData=UDR_REG;
    34f4:	2c b1       	in	r18, 0x0c	; 12
    34f6:	fc 01       	movw	r30, r24
    34f8:	20 83       	st	Z, r18
    34fa:	08 95       	ret

000034fc <__subsf3>:
    34fc:	50 58       	subi	r21, 0x80	; 128

000034fe <__addsf3>:
    34fe:	bb 27       	eor	r27, r27
    3500:	aa 27       	eor	r26, r26
    3502:	0e 94 96 1a 	call	0x352c	; 0x352c <__addsf3x>
    3506:	0c 94 09 1c 	jmp	0x3812	; 0x3812 <__fp_round>
    350a:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <__fp_pscA>
    350e:	38 f0       	brcs	.+14     	; 0x351e <__addsf3+0x20>
    3510:	0e 94 02 1c 	call	0x3804	; 0x3804 <__fp_pscB>
    3514:	20 f0       	brcs	.+8      	; 0x351e <__addsf3+0x20>
    3516:	39 f4       	brne	.+14     	; 0x3526 <__addsf3+0x28>
    3518:	9f 3f       	cpi	r25, 0xFF	; 255
    351a:	19 f4       	brne	.+6      	; 0x3522 <__addsf3+0x24>
    351c:	26 f4       	brtc	.+8      	; 0x3526 <__addsf3+0x28>
    351e:	0c 94 f8 1b 	jmp	0x37f0	; 0x37f0 <__fp_nan>
    3522:	0e f4       	brtc	.+2      	; 0x3526 <__addsf3+0x28>
    3524:	e0 95       	com	r30
    3526:	e7 fb       	bst	r30, 7
    3528:	0c 94 f2 1b 	jmp	0x37e4	; 0x37e4 <__fp_inf>

0000352c <__addsf3x>:
    352c:	e9 2f       	mov	r30, r25
    352e:	0e 94 1a 1c 	call	0x3834	; 0x3834 <__fp_split3>
    3532:	58 f3       	brcs	.-42     	; 0x350a <__addsf3+0xc>
    3534:	ba 17       	cp	r27, r26
    3536:	62 07       	cpc	r22, r18
    3538:	73 07       	cpc	r23, r19
    353a:	84 07       	cpc	r24, r20
    353c:	95 07       	cpc	r25, r21
    353e:	20 f0       	brcs	.+8      	; 0x3548 <__addsf3x+0x1c>
    3540:	79 f4       	brne	.+30     	; 0x3560 <__addsf3x+0x34>
    3542:	a6 f5       	brtc	.+104    	; 0x35ac <__addsf3x+0x80>
    3544:	0c 94 3c 1c 	jmp	0x3878	; 0x3878 <__fp_zero>
    3548:	0e f4       	brtc	.+2      	; 0x354c <__addsf3x+0x20>
    354a:	e0 95       	com	r30
    354c:	0b 2e       	mov	r0, r27
    354e:	ba 2f       	mov	r27, r26
    3550:	a0 2d       	mov	r26, r0
    3552:	0b 01       	movw	r0, r22
    3554:	b9 01       	movw	r22, r18
    3556:	90 01       	movw	r18, r0
    3558:	0c 01       	movw	r0, r24
    355a:	ca 01       	movw	r24, r20
    355c:	a0 01       	movw	r20, r0
    355e:	11 24       	eor	r1, r1
    3560:	ff 27       	eor	r31, r31
    3562:	59 1b       	sub	r21, r25
    3564:	99 f0       	breq	.+38     	; 0x358c <__addsf3x+0x60>
    3566:	59 3f       	cpi	r21, 0xF9	; 249
    3568:	50 f4       	brcc	.+20     	; 0x357e <__addsf3x+0x52>
    356a:	50 3e       	cpi	r21, 0xE0	; 224
    356c:	68 f1       	brcs	.+90     	; 0x35c8 <__addsf3x+0x9c>
    356e:	1a 16       	cp	r1, r26
    3570:	f0 40       	sbci	r31, 0x00	; 0
    3572:	a2 2f       	mov	r26, r18
    3574:	23 2f       	mov	r18, r19
    3576:	34 2f       	mov	r19, r20
    3578:	44 27       	eor	r20, r20
    357a:	58 5f       	subi	r21, 0xF8	; 248
    357c:	f3 cf       	rjmp	.-26     	; 0x3564 <__addsf3x+0x38>
    357e:	46 95       	lsr	r20
    3580:	37 95       	ror	r19
    3582:	27 95       	ror	r18
    3584:	a7 95       	ror	r26
    3586:	f0 40       	sbci	r31, 0x00	; 0
    3588:	53 95       	inc	r21
    358a:	c9 f7       	brne	.-14     	; 0x357e <__addsf3x+0x52>
    358c:	7e f4       	brtc	.+30     	; 0x35ac <__addsf3x+0x80>
    358e:	1f 16       	cp	r1, r31
    3590:	ba 0b       	sbc	r27, r26
    3592:	62 0b       	sbc	r22, r18
    3594:	73 0b       	sbc	r23, r19
    3596:	84 0b       	sbc	r24, r20
    3598:	ba f0       	brmi	.+46     	; 0x35c8 <__addsf3x+0x9c>
    359a:	91 50       	subi	r25, 0x01	; 1
    359c:	a1 f0       	breq	.+40     	; 0x35c6 <__addsf3x+0x9a>
    359e:	ff 0f       	add	r31, r31
    35a0:	bb 1f       	adc	r27, r27
    35a2:	66 1f       	adc	r22, r22
    35a4:	77 1f       	adc	r23, r23
    35a6:	88 1f       	adc	r24, r24
    35a8:	c2 f7       	brpl	.-16     	; 0x359a <__addsf3x+0x6e>
    35aa:	0e c0       	rjmp	.+28     	; 0x35c8 <__addsf3x+0x9c>
    35ac:	ba 0f       	add	r27, r26
    35ae:	62 1f       	adc	r22, r18
    35b0:	73 1f       	adc	r23, r19
    35b2:	84 1f       	adc	r24, r20
    35b4:	48 f4       	brcc	.+18     	; 0x35c8 <__addsf3x+0x9c>
    35b6:	87 95       	ror	r24
    35b8:	77 95       	ror	r23
    35ba:	67 95       	ror	r22
    35bc:	b7 95       	ror	r27
    35be:	f7 95       	ror	r31
    35c0:	9e 3f       	cpi	r25, 0xFE	; 254
    35c2:	08 f0       	brcs	.+2      	; 0x35c6 <__addsf3x+0x9a>
    35c4:	b0 cf       	rjmp	.-160    	; 0x3526 <__addsf3+0x28>
    35c6:	93 95       	inc	r25
    35c8:	88 0f       	add	r24, r24
    35ca:	08 f0       	brcs	.+2      	; 0x35ce <__addsf3x+0xa2>
    35cc:	99 27       	eor	r25, r25
    35ce:	ee 0f       	add	r30, r30
    35d0:	97 95       	ror	r25
    35d2:	87 95       	ror	r24
    35d4:	08 95       	ret

000035d6 <__cmpsf2>:
    35d6:	0e 94 ce 1b 	call	0x379c	; 0x379c <__fp_cmp>
    35da:	08 f4       	brcc	.+2      	; 0x35de <__cmpsf2+0x8>
    35dc:	81 e0       	ldi	r24, 0x01	; 1
    35de:	08 95       	ret

000035e0 <__divsf3>:
    35e0:	0e 94 04 1b 	call	0x3608	; 0x3608 <__divsf3x>
    35e4:	0c 94 09 1c 	jmp	0x3812	; 0x3812 <__fp_round>
    35e8:	0e 94 02 1c 	call	0x3804	; 0x3804 <__fp_pscB>
    35ec:	58 f0       	brcs	.+22     	; 0x3604 <__divsf3+0x24>
    35ee:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <__fp_pscA>
    35f2:	40 f0       	brcs	.+16     	; 0x3604 <__divsf3+0x24>
    35f4:	29 f4       	brne	.+10     	; 0x3600 <__divsf3+0x20>
    35f6:	5f 3f       	cpi	r21, 0xFF	; 255
    35f8:	29 f0       	breq	.+10     	; 0x3604 <__divsf3+0x24>
    35fa:	0c 94 f2 1b 	jmp	0x37e4	; 0x37e4 <__fp_inf>
    35fe:	51 11       	cpse	r21, r1
    3600:	0c 94 3d 1c 	jmp	0x387a	; 0x387a <__fp_szero>
    3604:	0c 94 f8 1b 	jmp	0x37f0	; 0x37f0 <__fp_nan>

00003608 <__divsf3x>:
    3608:	0e 94 1a 1c 	call	0x3834	; 0x3834 <__fp_split3>
    360c:	68 f3       	brcs	.-38     	; 0x35e8 <__divsf3+0x8>

0000360e <__divsf3_pse>:
    360e:	99 23       	and	r25, r25
    3610:	b1 f3       	breq	.-20     	; 0x35fe <__divsf3+0x1e>
    3612:	55 23       	and	r21, r21
    3614:	91 f3       	breq	.-28     	; 0x35fa <__divsf3+0x1a>
    3616:	95 1b       	sub	r25, r21
    3618:	55 0b       	sbc	r21, r21
    361a:	bb 27       	eor	r27, r27
    361c:	aa 27       	eor	r26, r26
    361e:	62 17       	cp	r22, r18
    3620:	73 07       	cpc	r23, r19
    3622:	84 07       	cpc	r24, r20
    3624:	38 f0       	brcs	.+14     	; 0x3634 <__divsf3_pse+0x26>
    3626:	9f 5f       	subi	r25, 0xFF	; 255
    3628:	5f 4f       	sbci	r21, 0xFF	; 255
    362a:	22 0f       	add	r18, r18
    362c:	33 1f       	adc	r19, r19
    362e:	44 1f       	adc	r20, r20
    3630:	aa 1f       	adc	r26, r26
    3632:	a9 f3       	breq	.-22     	; 0x361e <__divsf3_pse+0x10>
    3634:	35 d0       	rcall	.+106    	; 0x36a0 <__divsf3_pse+0x92>
    3636:	0e 2e       	mov	r0, r30
    3638:	3a f0       	brmi	.+14     	; 0x3648 <__divsf3_pse+0x3a>
    363a:	e0 e8       	ldi	r30, 0x80	; 128
    363c:	32 d0       	rcall	.+100    	; 0x36a2 <__divsf3_pse+0x94>
    363e:	91 50       	subi	r25, 0x01	; 1
    3640:	50 40       	sbci	r21, 0x00	; 0
    3642:	e6 95       	lsr	r30
    3644:	00 1c       	adc	r0, r0
    3646:	ca f7       	brpl	.-14     	; 0x363a <__divsf3_pse+0x2c>
    3648:	2b d0       	rcall	.+86     	; 0x36a0 <__divsf3_pse+0x92>
    364a:	fe 2f       	mov	r31, r30
    364c:	29 d0       	rcall	.+82     	; 0x36a0 <__divsf3_pse+0x92>
    364e:	66 0f       	add	r22, r22
    3650:	77 1f       	adc	r23, r23
    3652:	88 1f       	adc	r24, r24
    3654:	bb 1f       	adc	r27, r27
    3656:	26 17       	cp	r18, r22
    3658:	37 07       	cpc	r19, r23
    365a:	48 07       	cpc	r20, r24
    365c:	ab 07       	cpc	r26, r27
    365e:	b0 e8       	ldi	r27, 0x80	; 128
    3660:	09 f0       	breq	.+2      	; 0x3664 <__divsf3_pse+0x56>
    3662:	bb 0b       	sbc	r27, r27
    3664:	80 2d       	mov	r24, r0
    3666:	bf 01       	movw	r22, r30
    3668:	ff 27       	eor	r31, r31
    366a:	93 58       	subi	r25, 0x83	; 131
    366c:	5f 4f       	sbci	r21, 0xFF	; 255
    366e:	3a f0       	brmi	.+14     	; 0x367e <__divsf3_pse+0x70>
    3670:	9e 3f       	cpi	r25, 0xFE	; 254
    3672:	51 05       	cpc	r21, r1
    3674:	78 f0       	brcs	.+30     	; 0x3694 <__divsf3_pse+0x86>
    3676:	0c 94 f2 1b 	jmp	0x37e4	; 0x37e4 <__fp_inf>
    367a:	0c 94 3d 1c 	jmp	0x387a	; 0x387a <__fp_szero>
    367e:	5f 3f       	cpi	r21, 0xFF	; 255
    3680:	e4 f3       	brlt	.-8      	; 0x367a <__divsf3_pse+0x6c>
    3682:	98 3e       	cpi	r25, 0xE8	; 232
    3684:	d4 f3       	brlt	.-12     	; 0x367a <__divsf3_pse+0x6c>
    3686:	86 95       	lsr	r24
    3688:	77 95       	ror	r23
    368a:	67 95       	ror	r22
    368c:	b7 95       	ror	r27
    368e:	f7 95       	ror	r31
    3690:	9f 5f       	subi	r25, 0xFF	; 255
    3692:	c9 f7       	brne	.-14     	; 0x3686 <__divsf3_pse+0x78>
    3694:	88 0f       	add	r24, r24
    3696:	91 1d       	adc	r25, r1
    3698:	96 95       	lsr	r25
    369a:	87 95       	ror	r24
    369c:	97 f9       	bld	r25, 7
    369e:	08 95       	ret
    36a0:	e1 e0       	ldi	r30, 0x01	; 1
    36a2:	66 0f       	add	r22, r22
    36a4:	77 1f       	adc	r23, r23
    36a6:	88 1f       	adc	r24, r24
    36a8:	bb 1f       	adc	r27, r27
    36aa:	62 17       	cp	r22, r18
    36ac:	73 07       	cpc	r23, r19
    36ae:	84 07       	cpc	r24, r20
    36b0:	ba 07       	cpc	r27, r26
    36b2:	20 f0       	brcs	.+8      	; 0x36bc <__divsf3_pse+0xae>
    36b4:	62 1b       	sub	r22, r18
    36b6:	73 0b       	sbc	r23, r19
    36b8:	84 0b       	sbc	r24, r20
    36ba:	ba 0b       	sbc	r27, r26
    36bc:	ee 1f       	adc	r30, r30
    36be:	88 f7       	brcc	.-30     	; 0x36a2 <__divsf3_pse+0x94>
    36c0:	e0 95       	com	r30
    36c2:	08 95       	ret

000036c4 <__fixunssfsi>:
    36c4:	0e 94 22 1c 	call	0x3844	; 0x3844 <__fp_splitA>
    36c8:	88 f0       	brcs	.+34     	; 0x36ec <__fixunssfsi+0x28>
    36ca:	9f 57       	subi	r25, 0x7F	; 127
    36cc:	98 f0       	brcs	.+38     	; 0x36f4 <__fixunssfsi+0x30>
    36ce:	b9 2f       	mov	r27, r25
    36d0:	99 27       	eor	r25, r25
    36d2:	b7 51       	subi	r27, 0x17	; 23
    36d4:	b0 f0       	brcs	.+44     	; 0x3702 <__fixunssfsi+0x3e>
    36d6:	e1 f0       	breq	.+56     	; 0x3710 <__fixunssfsi+0x4c>
    36d8:	66 0f       	add	r22, r22
    36da:	77 1f       	adc	r23, r23
    36dc:	88 1f       	adc	r24, r24
    36de:	99 1f       	adc	r25, r25
    36e0:	1a f0       	brmi	.+6      	; 0x36e8 <__fixunssfsi+0x24>
    36e2:	ba 95       	dec	r27
    36e4:	c9 f7       	brne	.-14     	; 0x36d8 <__fixunssfsi+0x14>
    36e6:	14 c0       	rjmp	.+40     	; 0x3710 <__fixunssfsi+0x4c>
    36e8:	b1 30       	cpi	r27, 0x01	; 1
    36ea:	91 f0       	breq	.+36     	; 0x3710 <__fixunssfsi+0x4c>
    36ec:	0e 94 3c 1c 	call	0x3878	; 0x3878 <__fp_zero>
    36f0:	b1 e0       	ldi	r27, 0x01	; 1
    36f2:	08 95       	ret
    36f4:	0c 94 3c 1c 	jmp	0x3878	; 0x3878 <__fp_zero>
    36f8:	67 2f       	mov	r22, r23
    36fa:	78 2f       	mov	r23, r24
    36fc:	88 27       	eor	r24, r24
    36fe:	b8 5f       	subi	r27, 0xF8	; 248
    3700:	39 f0       	breq	.+14     	; 0x3710 <__fixunssfsi+0x4c>
    3702:	b9 3f       	cpi	r27, 0xF9	; 249
    3704:	cc f3       	brlt	.-14     	; 0x36f8 <__fixunssfsi+0x34>
    3706:	86 95       	lsr	r24
    3708:	77 95       	ror	r23
    370a:	67 95       	ror	r22
    370c:	b3 95       	inc	r27
    370e:	d9 f7       	brne	.-10     	; 0x3706 <__fixunssfsi+0x42>
    3710:	3e f4       	brtc	.+14     	; 0x3720 <__fixunssfsi+0x5c>
    3712:	90 95       	com	r25
    3714:	80 95       	com	r24
    3716:	70 95       	com	r23
    3718:	61 95       	neg	r22
    371a:	7f 4f       	sbci	r23, 0xFF	; 255
    371c:	8f 4f       	sbci	r24, 0xFF	; 255
    371e:	9f 4f       	sbci	r25, 0xFF	; 255
    3720:	08 95       	ret

00003722 <__floatunsisf>:
    3722:	e8 94       	clt
    3724:	09 c0       	rjmp	.+18     	; 0x3738 <__floatsisf+0x12>

00003726 <__floatsisf>:
    3726:	97 fb       	bst	r25, 7
    3728:	3e f4       	brtc	.+14     	; 0x3738 <__floatsisf+0x12>
    372a:	90 95       	com	r25
    372c:	80 95       	com	r24
    372e:	70 95       	com	r23
    3730:	61 95       	neg	r22
    3732:	7f 4f       	sbci	r23, 0xFF	; 255
    3734:	8f 4f       	sbci	r24, 0xFF	; 255
    3736:	9f 4f       	sbci	r25, 0xFF	; 255
    3738:	99 23       	and	r25, r25
    373a:	a9 f0       	breq	.+42     	; 0x3766 <__floatsisf+0x40>
    373c:	f9 2f       	mov	r31, r25
    373e:	96 e9       	ldi	r25, 0x96	; 150
    3740:	bb 27       	eor	r27, r27
    3742:	93 95       	inc	r25
    3744:	f6 95       	lsr	r31
    3746:	87 95       	ror	r24
    3748:	77 95       	ror	r23
    374a:	67 95       	ror	r22
    374c:	b7 95       	ror	r27
    374e:	f1 11       	cpse	r31, r1
    3750:	f8 cf       	rjmp	.-16     	; 0x3742 <__floatsisf+0x1c>
    3752:	fa f4       	brpl	.+62     	; 0x3792 <__floatsisf+0x6c>
    3754:	bb 0f       	add	r27, r27
    3756:	11 f4       	brne	.+4      	; 0x375c <__floatsisf+0x36>
    3758:	60 ff       	sbrs	r22, 0
    375a:	1b c0       	rjmp	.+54     	; 0x3792 <__floatsisf+0x6c>
    375c:	6f 5f       	subi	r22, 0xFF	; 255
    375e:	7f 4f       	sbci	r23, 0xFF	; 255
    3760:	8f 4f       	sbci	r24, 0xFF	; 255
    3762:	9f 4f       	sbci	r25, 0xFF	; 255
    3764:	16 c0       	rjmp	.+44     	; 0x3792 <__floatsisf+0x6c>
    3766:	88 23       	and	r24, r24
    3768:	11 f0       	breq	.+4      	; 0x376e <__floatsisf+0x48>
    376a:	96 e9       	ldi	r25, 0x96	; 150
    376c:	11 c0       	rjmp	.+34     	; 0x3790 <__floatsisf+0x6a>
    376e:	77 23       	and	r23, r23
    3770:	21 f0       	breq	.+8      	; 0x377a <__floatsisf+0x54>
    3772:	9e e8       	ldi	r25, 0x8E	; 142
    3774:	87 2f       	mov	r24, r23
    3776:	76 2f       	mov	r23, r22
    3778:	05 c0       	rjmp	.+10     	; 0x3784 <__floatsisf+0x5e>
    377a:	66 23       	and	r22, r22
    377c:	71 f0       	breq	.+28     	; 0x379a <__floatsisf+0x74>
    377e:	96 e8       	ldi	r25, 0x86	; 134
    3780:	86 2f       	mov	r24, r22
    3782:	70 e0       	ldi	r23, 0x00	; 0
    3784:	60 e0       	ldi	r22, 0x00	; 0
    3786:	2a f0       	brmi	.+10     	; 0x3792 <__floatsisf+0x6c>
    3788:	9a 95       	dec	r25
    378a:	66 0f       	add	r22, r22
    378c:	77 1f       	adc	r23, r23
    378e:	88 1f       	adc	r24, r24
    3790:	da f7       	brpl	.-10     	; 0x3788 <__floatsisf+0x62>
    3792:	88 0f       	add	r24, r24
    3794:	96 95       	lsr	r25
    3796:	87 95       	ror	r24
    3798:	97 f9       	bld	r25, 7
    379a:	08 95       	ret

0000379c <__fp_cmp>:
    379c:	99 0f       	add	r25, r25
    379e:	00 08       	sbc	r0, r0
    37a0:	55 0f       	add	r21, r21
    37a2:	aa 0b       	sbc	r26, r26
    37a4:	e0 e8       	ldi	r30, 0x80	; 128
    37a6:	fe ef       	ldi	r31, 0xFE	; 254
    37a8:	16 16       	cp	r1, r22
    37aa:	17 06       	cpc	r1, r23
    37ac:	e8 07       	cpc	r30, r24
    37ae:	f9 07       	cpc	r31, r25
    37b0:	c0 f0       	brcs	.+48     	; 0x37e2 <__fp_cmp+0x46>
    37b2:	12 16       	cp	r1, r18
    37b4:	13 06       	cpc	r1, r19
    37b6:	e4 07       	cpc	r30, r20
    37b8:	f5 07       	cpc	r31, r21
    37ba:	98 f0       	brcs	.+38     	; 0x37e2 <__fp_cmp+0x46>
    37bc:	62 1b       	sub	r22, r18
    37be:	73 0b       	sbc	r23, r19
    37c0:	84 0b       	sbc	r24, r20
    37c2:	95 0b       	sbc	r25, r21
    37c4:	39 f4       	brne	.+14     	; 0x37d4 <__fp_cmp+0x38>
    37c6:	0a 26       	eor	r0, r26
    37c8:	61 f0       	breq	.+24     	; 0x37e2 <__fp_cmp+0x46>
    37ca:	23 2b       	or	r18, r19
    37cc:	24 2b       	or	r18, r20
    37ce:	25 2b       	or	r18, r21
    37d0:	21 f4       	brne	.+8      	; 0x37da <__fp_cmp+0x3e>
    37d2:	08 95       	ret
    37d4:	0a 26       	eor	r0, r26
    37d6:	09 f4       	brne	.+2      	; 0x37da <__fp_cmp+0x3e>
    37d8:	a1 40       	sbci	r26, 0x01	; 1
    37da:	a6 95       	lsr	r26
    37dc:	8f ef       	ldi	r24, 0xFF	; 255
    37de:	81 1d       	adc	r24, r1
    37e0:	81 1d       	adc	r24, r1
    37e2:	08 95       	ret

000037e4 <__fp_inf>:
    37e4:	97 f9       	bld	r25, 7
    37e6:	9f 67       	ori	r25, 0x7F	; 127
    37e8:	80 e8       	ldi	r24, 0x80	; 128
    37ea:	70 e0       	ldi	r23, 0x00	; 0
    37ec:	60 e0       	ldi	r22, 0x00	; 0
    37ee:	08 95       	ret

000037f0 <__fp_nan>:
    37f0:	9f ef       	ldi	r25, 0xFF	; 255
    37f2:	80 ec       	ldi	r24, 0xC0	; 192
    37f4:	08 95       	ret

000037f6 <__fp_pscA>:
    37f6:	00 24       	eor	r0, r0
    37f8:	0a 94       	dec	r0
    37fa:	16 16       	cp	r1, r22
    37fc:	17 06       	cpc	r1, r23
    37fe:	18 06       	cpc	r1, r24
    3800:	09 06       	cpc	r0, r25
    3802:	08 95       	ret

00003804 <__fp_pscB>:
    3804:	00 24       	eor	r0, r0
    3806:	0a 94       	dec	r0
    3808:	12 16       	cp	r1, r18
    380a:	13 06       	cpc	r1, r19
    380c:	14 06       	cpc	r1, r20
    380e:	05 06       	cpc	r0, r21
    3810:	08 95       	ret

00003812 <__fp_round>:
    3812:	09 2e       	mov	r0, r25
    3814:	03 94       	inc	r0
    3816:	00 0c       	add	r0, r0
    3818:	11 f4       	brne	.+4      	; 0x381e <__fp_round+0xc>
    381a:	88 23       	and	r24, r24
    381c:	52 f0       	brmi	.+20     	; 0x3832 <__fp_round+0x20>
    381e:	bb 0f       	add	r27, r27
    3820:	40 f4       	brcc	.+16     	; 0x3832 <__fp_round+0x20>
    3822:	bf 2b       	or	r27, r31
    3824:	11 f4       	brne	.+4      	; 0x382a <__fp_round+0x18>
    3826:	60 ff       	sbrs	r22, 0
    3828:	04 c0       	rjmp	.+8      	; 0x3832 <__fp_round+0x20>
    382a:	6f 5f       	subi	r22, 0xFF	; 255
    382c:	7f 4f       	sbci	r23, 0xFF	; 255
    382e:	8f 4f       	sbci	r24, 0xFF	; 255
    3830:	9f 4f       	sbci	r25, 0xFF	; 255
    3832:	08 95       	ret

00003834 <__fp_split3>:
    3834:	57 fd       	sbrc	r21, 7
    3836:	90 58       	subi	r25, 0x80	; 128
    3838:	44 0f       	add	r20, r20
    383a:	55 1f       	adc	r21, r21
    383c:	59 f0       	breq	.+22     	; 0x3854 <__fp_splitA+0x10>
    383e:	5f 3f       	cpi	r21, 0xFF	; 255
    3840:	71 f0       	breq	.+28     	; 0x385e <__fp_splitA+0x1a>
    3842:	47 95       	ror	r20

00003844 <__fp_splitA>:
    3844:	88 0f       	add	r24, r24
    3846:	97 fb       	bst	r25, 7
    3848:	99 1f       	adc	r25, r25
    384a:	61 f0       	breq	.+24     	; 0x3864 <__fp_splitA+0x20>
    384c:	9f 3f       	cpi	r25, 0xFF	; 255
    384e:	79 f0       	breq	.+30     	; 0x386e <__fp_splitA+0x2a>
    3850:	87 95       	ror	r24
    3852:	08 95       	ret
    3854:	12 16       	cp	r1, r18
    3856:	13 06       	cpc	r1, r19
    3858:	14 06       	cpc	r1, r20
    385a:	55 1f       	adc	r21, r21
    385c:	f2 cf       	rjmp	.-28     	; 0x3842 <__fp_split3+0xe>
    385e:	46 95       	lsr	r20
    3860:	f1 df       	rcall	.-30     	; 0x3844 <__fp_splitA>
    3862:	08 c0       	rjmp	.+16     	; 0x3874 <__fp_splitA+0x30>
    3864:	16 16       	cp	r1, r22
    3866:	17 06       	cpc	r1, r23
    3868:	18 06       	cpc	r1, r24
    386a:	99 1f       	adc	r25, r25
    386c:	f1 cf       	rjmp	.-30     	; 0x3850 <__fp_splitA+0xc>
    386e:	86 95       	lsr	r24
    3870:	71 05       	cpc	r23, r1
    3872:	61 05       	cpc	r22, r1
    3874:	08 94       	sec
    3876:	08 95       	ret

00003878 <__fp_zero>:
    3878:	e8 94       	clt

0000387a <__fp_szero>:
    387a:	bb 27       	eor	r27, r27
    387c:	66 27       	eor	r22, r22
    387e:	77 27       	eor	r23, r23
    3880:	cb 01       	movw	r24, r22
    3882:	97 f9       	bld	r25, 7
    3884:	08 95       	ret

00003886 <__mulsf3>:
    3886:	0e 94 56 1c 	call	0x38ac	; 0x38ac <__mulsf3x>
    388a:	0c 94 09 1c 	jmp	0x3812	; 0x3812 <__fp_round>
    388e:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <__fp_pscA>
    3892:	38 f0       	brcs	.+14     	; 0x38a2 <__mulsf3+0x1c>
    3894:	0e 94 02 1c 	call	0x3804	; 0x3804 <__fp_pscB>
    3898:	20 f0       	brcs	.+8      	; 0x38a2 <__mulsf3+0x1c>
    389a:	95 23       	and	r25, r21
    389c:	11 f0       	breq	.+4      	; 0x38a2 <__mulsf3+0x1c>
    389e:	0c 94 f2 1b 	jmp	0x37e4	; 0x37e4 <__fp_inf>
    38a2:	0c 94 f8 1b 	jmp	0x37f0	; 0x37f0 <__fp_nan>
    38a6:	11 24       	eor	r1, r1
    38a8:	0c 94 3d 1c 	jmp	0x387a	; 0x387a <__fp_szero>

000038ac <__mulsf3x>:
    38ac:	0e 94 1a 1c 	call	0x3834	; 0x3834 <__fp_split3>
    38b0:	70 f3       	brcs	.-36     	; 0x388e <__mulsf3+0x8>

000038b2 <__mulsf3_pse>:
    38b2:	95 9f       	mul	r25, r21
    38b4:	c1 f3       	breq	.-16     	; 0x38a6 <__mulsf3+0x20>
    38b6:	95 0f       	add	r25, r21
    38b8:	50 e0       	ldi	r21, 0x00	; 0
    38ba:	55 1f       	adc	r21, r21
    38bc:	62 9f       	mul	r22, r18
    38be:	f0 01       	movw	r30, r0
    38c0:	72 9f       	mul	r23, r18
    38c2:	bb 27       	eor	r27, r27
    38c4:	f0 0d       	add	r31, r0
    38c6:	b1 1d       	adc	r27, r1
    38c8:	63 9f       	mul	r22, r19
    38ca:	aa 27       	eor	r26, r26
    38cc:	f0 0d       	add	r31, r0
    38ce:	b1 1d       	adc	r27, r1
    38d0:	aa 1f       	adc	r26, r26
    38d2:	64 9f       	mul	r22, r20
    38d4:	66 27       	eor	r22, r22
    38d6:	b0 0d       	add	r27, r0
    38d8:	a1 1d       	adc	r26, r1
    38da:	66 1f       	adc	r22, r22
    38dc:	82 9f       	mul	r24, r18
    38de:	22 27       	eor	r18, r18
    38e0:	b0 0d       	add	r27, r0
    38e2:	a1 1d       	adc	r26, r1
    38e4:	62 1f       	adc	r22, r18
    38e6:	73 9f       	mul	r23, r19
    38e8:	b0 0d       	add	r27, r0
    38ea:	a1 1d       	adc	r26, r1
    38ec:	62 1f       	adc	r22, r18
    38ee:	83 9f       	mul	r24, r19
    38f0:	a0 0d       	add	r26, r0
    38f2:	61 1d       	adc	r22, r1
    38f4:	22 1f       	adc	r18, r18
    38f6:	74 9f       	mul	r23, r20
    38f8:	33 27       	eor	r19, r19
    38fa:	a0 0d       	add	r26, r0
    38fc:	61 1d       	adc	r22, r1
    38fe:	23 1f       	adc	r18, r19
    3900:	84 9f       	mul	r24, r20
    3902:	60 0d       	add	r22, r0
    3904:	21 1d       	adc	r18, r1
    3906:	82 2f       	mov	r24, r18
    3908:	76 2f       	mov	r23, r22
    390a:	6a 2f       	mov	r22, r26
    390c:	11 24       	eor	r1, r1
    390e:	9f 57       	subi	r25, 0x7F	; 127
    3910:	50 40       	sbci	r21, 0x00	; 0
    3912:	9a f0       	brmi	.+38     	; 0x393a <__mulsf3_pse+0x88>
    3914:	f1 f0       	breq	.+60     	; 0x3952 <__mulsf3_pse+0xa0>
    3916:	88 23       	and	r24, r24
    3918:	4a f0       	brmi	.+18     	; 0x392c <__mulsf3_pse+0x7a>
    391a:	ee 0f       	add	r30, r30
    391c:	ff 1f       	adc	r31, r31
    391e:	bb 1f       	adc	r27, r27
    3920:	66 1f       	adc	r22, r22
    3922:	77 1f       	adc	r23, r23
    3924:	88 1f       	adc	r24, r24
    3926:	91 50       	subi	r25, 0x01	; 1
    3928:	50 40       	sbci	r21, 0x00	; 0
    392a:	a9 f7       	brne	.-22     	; 0x3916 <__mulsf3_pse+0x64>
    392c:	9e 3f       	cpi	r25, 0xFE	; 254
    392e:	51 05       	cpc	r21, r1
    3930:	80 f0       	brcs	.+32     	; 0x3952 <__mulsf3_pse+0xa0>
    3932:	0c 94 f2 1b 	jmp	0x37e4	; 0x37e4 <__fp_inf>
    3936:	0c 94 3d 1c 	jmp	0x387a	; 0x387a <__fp_szero>
    393a:	5f 3f       	cpi	r21, 0xFF	; 255
    393c:	e4 f3       	brlt	.-8      	; 0x3936 <__mulsf3_pse+0x84>
    393e:	98 3e       	cpi	r25, 0xE8	; 232
    3940:	d4 f3       	brlt	.-12     	; 0x3936 <__mulsf3_pse+0x84>
    3942:	86 95       	lsr	r24
    3944:	77 95       	ror	r23
    3946:	67 95       	ror	r22
    3948:	b7 95       	ror	r27
    394a:	f7 95       	ror	r31
    394c:	e7 95       	ror	r30
    394e:	9f 5f       	subi	r25, 0xFF	; 255
    3950:	c1 f7       	brne	.-16     	; 0x3942 <__mulsf3_pse+0x90>
    3952:	fe 2b       	or	r31, r30
    3954:	88 0f       	add	r24, r24
    3956:	91 1d       	adc	r25, r1
    3958:	96 95       	lsr	r25
    395a:	87 95       	ror	r24
    395c:	97 f9       	bld	r25, 7
    395e:	08 95       	ret

00003960 <__udivmodsi4>:
    3960:	a1 e2       	ldi	r26, 0x21	; 33
    3962:	1a 2e       	mov	r1, r26
    3964:	aa 1b       	sub	r26, r26
    3966:	bb 1b       	sub	r27, r27
    3968:	fd 01       	movw	r30, r26
    396a:	0d c0       	rjmp	.+26     	; 0x3986 <__udivmodsi4_ep>

0000396c <__udivmodsi4_loop>:
    396c:	aa 1f       	adc	r26, r26
    396e:	bb 1f       	adc	r27, r27
    3970:	ee 1f       	adc	r30, r30
    3972:	ff 1f       	adc	r31, r31
    3974:	a2 17       	cp	r26, r18
    3976:	b3 07       	cpc	r27, r19
    3978:	e4 07       	cpc	r30, r20
    397a:	f5 07       	cpc	r31, r21
    397c:	20 f0       	brcs	.+8      	; 0x3986 <__udivmodsi4_ep>
    397e:	a2 1b       	sub	r26, r18
    3980:	b3 0b       	sbc	r27, r19
    3982:	e4 0b       	sbc	r30, r20
    3984:	f5 0b       	sbc	r31, r21

00003986 <__udivmodsi4_ep>:
    3986:	66 1f       	adc	r22, r22
    3988:	77 1f       	adc	r23, r23
    398a:	88 1f       	adc	r24, r24
    398c:	99 1f       	adc	r25, r25
    398e:	1a 94       	dec	r1
    3990:	69 f7       	brne	.-38     	; 0x396c <__udivmodsi4_loop>
    3992:	60 95       	com	r22
    3994:	70 95       	com	r23
    3996:	80 95       	com	r24
    3998:	90 95       	com	r25
    399a:	9b 01       	movw	r18, r22
    399c:	ac 01       	movw	r20, r24
    399e:	bd 01       	movw	r22, r26
    39a0:	cf 01       	movw	r24, r30
    39a2:	08 95       	ret

000039a4 <sprintf>:
    39a4:	ae e0       	ldi	r26, 0x0E	; 14
    39a6:	b0 e0       	ldi	r27, 0x00	; 0
    39a8:	e8 ed       	ldi	r30, 0xD8	; 216
    39aa:	fc e1       	ldi	r31, 0x1C	; 28
    39ac:	0c 94 93 1f 	jmp	0x3f26	; 0x3f26 <__prologue_saves__+0x1c>
    39b0:	0d 89       	ldd	r16, Y+21	; 0x15
    39b2:	1e 89       	ldd	r17, Y+22	; 0x16
    39b4:	86 e0       	ldi	r24, 0x06	; 6
    39b6:	8c 83       	std	Y+4, r24	; 0x04
    39b8:	1a 83       	std	Y+2, r17	; 0x02
    39ba:	09 83       	std	Y+1, r16	; 0x01
    39bc:	8f ef       	ldi	r24, 0xFF	; 255
    39be:	9f e7       	ldi	r25, 0x7F	; 127
    39c0:	9e 83       	std	Y+6, r25	; 0x06
    39c2:	8d 83       	std	Y+5, r24	; 0x05
    39c4:	ae 01       	movw	r20, r28
    39c6:	47 5e       	subi	r20, 0xE7	; 231
    39c8:	5f 4f       	sbci	r21, 0xFF	; 255
    39ca:	6f 89       	ldd	r22, Y+23	; 0x17
    39cc:	78 8d       	ldd	r23, Y+24	; 0x18
    39ce:	ce 01       	movw	r24, r28
    39d0:	01 96       	adiw	r24, 0x01	; 1
    39d2:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <vfprintf>
    39d6:	ef 81       	ldd	r30, Y+7	; 0x07
    39d8:	f8 85       	ldd	r31, Y+8	; 0x08
    39da:	e0 0f       	add	r30, r16
    39dc:	f1 1f       	adc	r31, r17
    39de:	10 82       	st	Z, r1
    39e0:	2e 96       	adiw	r28, 0x0e	; 14
    39e2:	e4 e0       	ldi	r30, 0x04	; 4
    39e4:	0c 94 af 1f 	jmp	0x3f5e	; 0x3f5e <__epilogue_restores__+0x1c>

000039e8 <vfprintf>:
    39e8:	ab e0       	ldi	r26, 0x0B	; 11
    39ea:	b0 e0       	ldi	r27, 0x00	; 0
    39ec:	ea ef       	ldi	r30, 0xFA	; 250
    39ee:	fc e1       	ldi	r31, 0x1C	; 28
    39f0:	0c 94 85 1f 	jmp	0x3f0a	; 0x3f0a <__prologue_saves__>
    39f4:	6c 01       	movw	r12, r24
    39f6:	7b 01       	movw	r14, r22
    39f8:	8a 01       	movw	r16, r20
    39fa:	fc 01       	movw	r30, r24
    39fc:	17 82       	std	Z+7, r1	; 0x07
    39fe:	16 82       	std	Z+6, r1	; 0x06
    3a00:	83 81       	ldd	r24, Z+3	; 0x03
    3a02:	81 ff       	sbrs	r24, 1
    3a04:	cc c1       	rjmp	.+920    	; 0x3d9e <vfprintf+0x3b6>
    3a06:	ce 01       	movw	r24, r28
    3a08:	01 96       	adiw	r24, 0x01	; 1
    3a0a:	3c 01       	movw	r6, r24
    3a0c:	f6 01       	movw	r30, r12
    3a0e:	93 81       	ldd	r25, Z+3	; 0x03
    3a10:	f7 01       	movw	r30, r14
    3a12:	93 fd       	sbrc	r25, 3
    3a14:	85 91       	lpm	r24, Z+
    3a16:	93 ff       	sbrs	r25, 3
    3a18:	81 91       	ld	r24, Z+
    3a1a:	7f 01       	movw	r14, r30
    3a1c:	88 23       	and	r24, r24
    3a1e:	09 f4       	brne	.+2      	; 0x3a22 <vfprintf+0x3a>
    3a20:	ba c1       	rjmp	.+884    	; 0x3d96 <vfprintf+0x3ae>
    3a22:	85 32       	cpi	r24, 0x25	; 37
    3a24:	39 f4       	brne	.+14     	; 0x3a34 <vfprintf+0x4c>
    3a26:	93 fd       	sbrc	r25, 3
    3a28:	85 91       	lpm	r24, Z+
    3a2a:	93 ff       	sbrs	r25, 3
    3a2c:	81 91       	ld	r24, Z+
    3a2e:	7f 01       	movw	r14, r30
    3a30:	85 32       	cpi	r24, 0x25	; 37
    3a32:	29 f4       	brne	.+10     	; 0x3a3e <vfprintf+0x56>
    3a34:	b6 01       	movw	r22, r12
    3a36:	90 e0       	ldi	r25, 0x00	; 0
    3a38:	0e 94 eb 1e 	call	0x3dd6	; 0x3dd6 <fputc>
    3a3c:	e7 cf       	rjmp	.-50     	; 0x3a0c <vfprintf+0x24>
    3a3e:	91 2c       	mov	r9, r1
    3a40:	21 2c       	mov	r2, r1
    3a42:	31 2c       	mov	r3, r1
    3a44:	ff e1       	ldi	r31, 0x1F	; 31
    3a46:	f3 15       	cp	r31, r3
    3a48:	d8 f0       	brcs	.+54     	; 0x3a80 <vfprintf+0x98>
    3a4a:	8b 32       	cpi	r24, 0x2B	; 43
    3a4c:	79 f0       	breq	.+30     	; 0x3a6c <vfprintf+0x84>
    3a4e:	38 f4       	brcc	.+14     	; 0x3a5e <vfprintf+0x76>
    3a50:	80 32       	cpi	r24, 0x20	; 32
    3a52:	79 f0       	breq	.+30     	; 0x3a72 <vfprintf+0x8a>
    3a54:	83 32       	cpi	r24, 0x23	; 35
    3a56:	a1 f4       	brne	.+40     	; 0x3a80 <vfprintf+0x98>
    3a58:	23 2d       	mov	r18, r3
    3a5a:	20 61       	ori	r18, 0x10	; 16
    3a5c:	1d c0       	rjmp	.+58     	; 0x3a98 <vfprintf+0xb0>
    3a5e:	8d 32       	cpi	r24, 0x2D	; 45
    3a60:	61 f0       	breq	.+24     	; 0x3a7a <vfprintf+0x92>
    3a62:	80 33       	cpi	r24, 0x30	; 48
    3a64:	69 f4       	brne	.+26     	; 0x3a80 <vfprintf+0x98>
    3a66:	23 2d       	mov	r18, r3
    3a68:	21 60       	ori	r18, 0x01	; 1
    3a6a:	16 c0       	rjmp	.+44     	; 0x3a98 <vfprintf+0xb0>
    3a6c:	83 2d       	mov	r24, r3
    3a6e:	82 60       	ori	r24, 0x02	; 2
    3a70:	38 2e       	mov	r3, r24
    3a72:	e3 2d       	mov	r30, r3
    3a74:	e4 60       	ori	r30, 0x04	; 4
    3a76:	3e 2e       	mov	r3, r30
    3a78:	2a c0       	rjmp	.+84     	; 0x3ace <vfprintf+0xe6>
    3a7a:	f3 2d       	mov	r31, r3
    3a7c:	f8 60       	ori	r31, 0x08	; 8
    3a7e:	1d c0       	rjmp	.+58     	; 0x3aba <vfprintf+0xd2>
    3a80:	37 fc       	sbrc	r3, 7
    3a82:	2d c0       	rjmp	.+90     	; 0x3ade <vfprintf+0xf6>
    3a84:	20 ed       	ldi	r18, 0xD0	; 208
    3a86:	28 0f       	add	r18, r24
    3a88:	2a 30       	cpi	r18, 0x0A	; 10
    3a8a:	40 f0       	brcs	.+16     	; 0x3a9c <vfprintf+0xb4>
    3a8c:	8e 32       	cpi	r24, 0x2E	; 46
    3a8e:	b9 f4       	brne	.+46     	; 0x3abe <vfprintf+0xd6>
    3a90:	36 fc       	sbrc	r3, 6
    3a92:	81 c1       	rjmp	.+770    	; 0x3d96 <vfprintf+0x3ae>
    3a94:	23 2d       	mov	r18, r3
    3a96:	20 64       	ori	r18, 0x40	; 64
    3a98:	32 2e       	mov	r3, r18
    3a9a:	19 c0       	rjmp	.+50     	; 0x3ace <vfprintf+0xe6>
    3a9c:	36 fe       	sbrs	r3, 6
    3a9e:	06 c0       	rjmp	.+12     	; 0x3aac <vfprintf+0xc4>
    3aa0:	8a e0       	ldi	r24, 0x0A	; 10
    3aa2:	98 9e       	mul	r9, r24
    3aa4:	20 0d       	add	r18, r0
    3aa6:	11 24       	eor	r1, r1
    3aa8:	92 2e       	mov	r9, r18
    3aaa:	11 c0       	rjmp	.+34     	; 0x3ace <vfprintf+0xe6>
    3aac:	ea e0       	ldi	r30, 0x0A	; 10
    3aae:	2e 9e       	mul	r2, r30
    3ab0:	20 0d       	add	r18, r0
    3ab2:	11 24       	eor	r1, r1
    3ab4:	22 2e       	mov	r2, r18
    3ab6:	f3 2d       	mov	r31, r3
    3ab8:	f0 62       	ori	r31, 0x20	; 32
    3aba:	3f 2e       	mov	r3, r31
    3abc:	08 c0       	rjmp	.+16     	; 0x3ace <vfprintf+0xe6>
    3abe:	8c 36       	cpi	r24, 0x6C	; 108
    3ac0:	21 f4       	brne	.+8      	; 0x3aca <vfprintf+0xe2>
    3ac2:	83 2d       	mov	r24, r3
    3ac4:	80 68       	ori	r24, 0x80	; 128
    3ac6:	38 2e       	mov	r3, r24
    3ac8:	02 c0       	rjmp	.+4      	; 0x3ace <vfprintf+0xe6>
    3aca:	88 36       	cpi	r24, 0x68	; 104
    3acc:	41 f4       	brne	.+16     	; 0x3ade <vfprintf+0xf6>
    3ace:	f7 01       	movw	r30, r14
    3ad0:	93 fd       	sbrc	r25, 3
    3ad2:	85 91       	lpm	r24, Z+
    3ad4:	93 ff       	sbrs	r25, 3
    3ad6:	81 91       	ld	r24, Z+
    3ad8:	7f 01       	movw	r14, r30
    3ada:	81 11       	cpse	r24, r1
    3adc:	b3 cf       	rjmp	.-154    	; 0x3a44 <vfprintf+0x5c>
    3ade:	98 2f       	mov	r25, r24
    3ae0:	9f 7d       	andi	r25, 0xDF	; 223
    3ae2:	95 54       	subi	r25, 0x45	; 69
    3ae4:	93 30       	cpi	r25, 0x03	; 3
    3ae6:	28 f4       	brcc	.+10     	; 0x3af2 <vfprintf+0x10a>
    3ae8:	0c 5f       	subi	r16, 0xFC	; 252
    3aea:	1f 4f       	sbci	r17, 0xFF	; 255
    3aec:	9f e3       	ldi	r25, 0x3F	; 63
    3aee:	99 83       	std	Y+1, r25	; 0x01
    3af0:	0d c0       	rjmp	.+26     	; 0x3b0c <vfprintf+0x124>
    3af2:	83 36       	cpi	r24, 0x63	; 99
    3af4:	31 f0       	breq	.+12     	; 0x3b02 <vfprintf+0x11a>
    3af6:	83 37       	cpi	r24, 0x73	; 115
    3af8:	71 f0       	breq	.+28     	; 0x3b16 <vfprintf+0x12e>
    3afa:	83 35       	cpi	r24, 0x53	; 83
    3afc:	09 f0       	breq	.+2      	; 0x3b00 <vfprintf+0x118>
    3afe:	59 c0       	rjmp	.+178    	; 0x3bb2 <vfprintf+0x1ca>
    3b00:	21 c0       	rjmp	.+66     	; 0x3b44 <vfprintf+0x15c>
    3b02:	f8 01       	movw	r30, r16
    3b04:	80 81       	ld	r24, Z
    3b06:	89 83       	std	Y+1, r24	; 0x01
    3b08:	0e 5f       	subi	r16, 0xFE	; 254
    3b0a:	1f 4f       	sbci	r17, 0xFF	; 255
    3b0c:	88 24       	eor	r8, r8
    3b0e:	83 94       	inc	r8
    3b10:	91 2c       	mov	r9, r1
    3b12:	53 01       	movw	r10, r6
    3b14:	13 c0       	rjmp	.+38     	; 0x3b3c <vfprintf+0x154>
    3b16:	28 01       	movw	r4, r16
    3b18:	f2 e0       	ldi	r31, 0x02	; 2
    3b1a:	4f 0e       	add	r4, r31
    3b1c:	51 1c       	adc	r5, r1
    3b1e:	f8 01       	movw	r30, r16
    3b20:	a0 80       	ld	r10, Z
    3b22:	b1 80       	ldd	r11, Z+1	; 0x01
    3b24:	36 fe       	sbrs	r3, 6
    3b26:	03 c0       	rjmp	.+6      	; 0x3b2e <vfprintf+0x146>
    3b28:	69 2d       	mov	r22, r9
    3b2a:	70 e0       	ldi	r23, 0x00	; 0
    3b2c:	02 c0       	rjmp	.+4      	; 0x3b32 <vfprintf+0x14a>
    3b2e:	6f ef       	ldi	r22, 0xFF	; 255
    3b30:	7f ef       	ldi	r23, 0xFF	; 255
    3b32:	c5 01       	movw	r24, r10
    3b34:	0e 94 e0 1e 	call	0x3dc0	; 0x3dc0 <strnlen>
    3b38:	4c 01       	movw	r8, r24
    3b3a:	82 01       	movw	r16, r4
    3b3c:	f3 2d       	mov	r31, r3
    3b3e:	ff 77       	andi	r31, 0x7F	; 127
    3b40:	3f 2e       	mov	r3, r31
    3b42:	16 c0       	rjmp	.+44     	; 0x3b70 <vfprintf+0x188>
    3b44:	28 01       	movw	r4, r16
    3b46:	22 e0       	ldi	r18, 0x02	; 2
    3b48:	42 0e       	add	r4, r18
    3b4a:	51 1c       	adc	r5, r1
    3b4c:	f8 01       	movw	r30, r16
    3b4e:	a0 80       	ld	r10, Z
    3b50:	b1 80       	ldd	r11, Z+1	; 0x01
    3b52:	36 fe       	sbrs	r3, 6
    3b54:	03 c0       	rjmp	.+6      	; 0x3b5c <vfprintf+0x174>
    3b56:	69 2d       	mov	r22, r9
    3b58:	70 e0       	ldi	r23, 0x00	; 0
    3b5a:	02 c0       	rjmp	.+4      	; 0x3b60 <vfprintf+0x178>
    3b5c:	6f ef       	ldi	r22, 0xFF	; 255
    3b5e:	7f ef       	ldi	r23, 0xFF	; 255
    3b60:	c5 01       	movw	r24, r10
    3b62:	0e 94 d5 1e 	call	0x3daa	; 0x3daa <strnlen_P>
    3b66:	4c 01       	movw	r8, r24
    3b68:	f3 2d       	mov	r31, r3
    3b6a:	f0 68       	ori	r31, 0x80	; 128
    3b6c:	3f 2e       	mov	r3, r31
    3b6e:	82 01       	movw	r16, r4
    3b70:	33 fc       	sbrc	r3, 3
    3b72:	1b c0       	rjmp	.+54     	; 0x3baa <vfprintf+0x1c2>
    3b74:	82 2d       	mov	r24, r2
    3b76:	90 e0       	ldi	r25, 0x00	; 0
    3b78:	88 16       	cp	r8, r24
    3b7a:	99 06       	cpc	r9, r25
    3b7c:	b0 f4       	brcc	.+44     	; 0x3baa <vfprintf+0x1c2>
    3b7e:	b6 01       	movw	r22, r12
    3b80:	80 e2       	ldi	r24, 0x20	; 32
    3b82:	90 e0       	ldi	r25, 0x00	; 0
    3b84:	0e 94 eb 1e 	call	0x3dd6	; 0x3dd6 <fputc>
    3b88:	2a 94       	dec	r2
    3b8a:	f4 cf       	rjmp	.-24     	; 0x3b74 <vfprintf+0x18c>
    3b8c:	f5 01       	movw	r30, r10
    3b8e:	37 fc       	sbrc	r3, 7
    3b90:	85 91       	lpm	r24, Z+
    3b92:	37 fe       	sbrs	r3, 7
    3b94:	81 91       	ld	r24, Z+
    3b96:	5f 01       	movw	r10, r30
    3b98:	b6 01       	movw	r22, r12
    3b9a:	90 e0       	ldi	r25, 0x00	; 0
    3b9c:	0e 94 eb 1e 	call	0x3dd6	; 0x3dd6 <fputc>
    3ba0:	21 10       	cpse	r2, r1
    3ba2:	2a 94       	dec	r2
    3ba4:	21 e0       	ldi	r18, 0x01	; 1
    3ba6:	82 1a       	sub	r8, r18
    3ba8:	91 08       	sbc	r9, r1
    3baa:	81 14       	cp	r8, r1
    3bac:	91 04       	cpc	r9, r1
    3bae:	71 f7       	brne	.-36     	; 0x3b8c <vfprintf+0x1a4>
    3bb0:	e8 c0       	rjmp	.+464    	; 0x3d82 <vfprintf+0x39a>
    3bb2:	84 36       	cpi	r24, 0x64	; 100
    3bb4:	11 f0       	breq	.+4      	; 0x3bba <vfprintf+0x1d2>
    3bb6:	89 36       	cpi	r24, 0x69	; 105
    3bb8:	41 f5       	brne	.+80     	; 0x3c0a <vfprintf+0x222>
    3bba:	f8 01       	movw	r30, r16
    3bbc:	37 fe       	sbrs	r3, 7
    3bbe:	07 c0       	rjmp	.+14     	; 0x3bce <vfprintf+0x1e6>
    3bc0:	60 81       	ld	r22, Z
    3bc2:	71 81       	ldd	r23, Z+1	; 0x01
    3bc4:	82 81       	ldd	r24, Z+2	; 0x02
    3bc6:	93 81       	ldd	r25, Z+3	; 0x03
    3bc8:	0c 5f       	subi	r16, 0xFC	; 252
    3bca:	1f 4f       	sbci	r17, 0xFF	; 255
    3bcc:	08 c0       	rjmp	.+16     	; 0x3bde <vfprintf+0x1f6>
    3bce:	60 81       	ld	r22, Z
    3bd0:	71 81       	ldd	r23, Z+1	; 0x01
    3bd2:	07 2e       	mov	r0, r23
    3bd4:	00 0c       	add	r0, r0
    3bd6:	88 0b       	sbc	r24, r24
    3bd8:	99 0b       	sbc	r25, r25
    3bda:	0e 5f       	subi	r16, 0xFE	; 254
    3bdc:	1f 4f       	sbci	r17, 0xFF	; 255
    3bde:	f3 2d       	mov	r31, r3
    3be0:	ff 76       	andi	r31, 0x6F	; 111
    3be2:	3f 2e       	mov	r3, r31
    3be4:	97 ff       	sbrs	r25, 7
    3be6:	09 c0       	rjmp	.+18     	; 0x3bfa <vfprintf+0x212>
    3be8:	90 95       	com	r25
    3bea:	80 95       	com	r24
    3bec:	70 95       	com	r23
    3bee:	61 95       	neg	r22
    3bf0:	7f 4f       	sbci	r23, 0xFF	; 255
    3bf2:	8f 4f       	sbci	r24, 0xFF	; 255
    3bf4:	9f 4f       	sbci	r25, 0xFF	; 255
    3bf6:	f0 68       	ori	r31, 0x80	; 128
    3bf8:	3f 2e       	mov	r3, r31
    3bfa:	2a e0       	ldi	r18, 0x0A	; 10
    3bfc:	30 e0       	ldi	r19, 0x00	; 0
    3bfe:	a3 01       	movw	r20, r6
    3c00:	0e 94 27 1f 	call	0x3e4e	; 0x3e4e <__ultoa_invert>
    3c04:	88 2e       	mov	r8, r24
    3c06:	86 18       	sub	r8, r6
    3c08:	45 c0       	rjmp	.+138    	; 0x3c94 <vfprintf+0x2ac>
    3c0a:	85 37       	cpi	r24, 0x75	; 117
    3c0c:	31 f4       	brne	.+12     	; 0x3c1a <vfprintf+0x232>
    3c0e:	23 2d       	mov	r18, r3
    3c10:	2f 7e       	andi	r18, 0xEF	; 239
    3c12:	b2 2e       	mov	r11, r18
    3c14:	2a e0       	ldi	r18, 0x0A	; 10
    3c16:	30 e0       	ldi	r19, 0x00	; 0
    3c18:	25 c0       	rjmp	.+74     	; 0x3c64 <vfprintf+0x27c>
    3c1a:	93 2d       	mov	r25, r3
    3c1c:	99 7f       	andi	r25, 0xF9	; 249
    3c1e:	b9 2e       	mov	r11, r25
    3c20:	8f 36       	cpi	r24, 0x6F	; 111
    3c22:	c1 f0       	breq	.+48     	; 0x3c54 <vfprintf+0x26c>
    3c24:	18 f4       	brcc	.+6      	; 0x3c2c <vfprintf+0x244>
    3c26:	88 35       	cpi	r24, 0x58	; 88
    3c28:	79 f0       	breq	.+30     	; 0x3c48 <vfprintf+0x260>
    3c2a:	b5 c0       	rjmp	.+362    	; 0x3d96 <vfprintf+0x3ae>
    3c2c:	80 37       	cpi	r24, 0x70	; 112
    3c2e:	19 f0       	breq	.+6      	; 0x3c36 <vfprintf+0x24e>
    3c30:	88 37       	cpi	r24, 0x78	; 120
    3c32:	21 f0       	breq	.+8      	; 0x3c3c <vfprintf+0x254>
    3c34:	b0 c0       	rjmp	.+352    	; 0x3d96 <vfprintf+0x3ae>
    3c36:	e9 2f       	mov	r30, r25
    3c38:	e0 61       	ori	r30, 0x10	; 16
    3c3a:	be 2e       	mov	r11, r30
    3c3c:	b4 fe       	sbrs	r11, 4
    3c3e:	0d c0       	rjmp	.+26     	; 0x3c5a <vfprintf+0x272>
    3c40:	fb 2d       	mov	r31, r11
    3c42:	f4 60       	ori	r31, 0x04	; 4
    3c44:	bf 2e       	mov	r11, r31
    3c46:	09 c0       	rjmp	.+18     	; 0x3c5a <vfprintf+0x272>
    3c48:	34 fe       	sbrs	r3, 4
    3c4a:	0a c0       	rjmp	.+20     	; 0x3c60 <vfprintf+0x278>
    3c4c:	29 2f       	mov	r18, r25
    3c4e:	26 60       	ori	r18, 0x06	; 6
    3c50:	b2 2e       	mov	r11, r18
    3c52:	06 c0       	rjmp	.+12     	; 0x3c60 <vfprintf+0x278>
    3c54:	28 e0       	ldi	r18, 0x08	; 8
    3c56:	30 e0       	ldi	r19, 0x00	; 0
    3c58:	05 c0       	rjmp	.+10     	; 0x3c64 <vfprintf+0x27c>
    3c5a:	20 e1       	ldi	r18, 0x10	; 16
    3c5c:	30 e0       	ldi	r19, 0x00	; 0
    3c5e:	02 c0       	rjmp	.+4      	; 0x3c64 <vfprintf+0x27c>
    3c60:	20 e1       	ldi	r18, 0x10	; 16
    3c62:	32 e0       	ldi	r19, 0x02	; 2
    3c64:	f8 01       	movw	r30, r16
    3c66:	b7 fe       	sbrs	r11, 7
    3c68:	07 c0       	rjmp	.+14     	; 0x3c78 <vfprintf+0x290>
    3c6a:	60 81       	ld	r22, Z
    3c6c:	71 81       	ldd	r23, Z+1	; 0x01
    3c6e:	82 81       	ldd	r24, Z+2	; 0x02
    3c70:	93 81       	ldd	r25, Z+3	; 0x03
    3c72:	0c 5f       	subi	r16, 0xFC	; 252
    3c74:	1f 4f       	sbci	r17, 0xFF	; 255
    3c76:	06 c0       	rjmp	.+12     	; 0x3c84 <vfprintf+0x29c>
    3c78:	60 81       	ld	r22, Z
    3c7a:	71 81       	ldd	r23, Z+1	; 0x01
    3c7c:	80 e0       	ldi	r24, 0x00	; 0
    3c7e:	90 e0       	ldi	r25, 0x00	; 0
    3c80:	0e 5f       	subi	r16, 0xFE	; 254
    3c82:	1f 4f       	sbci	r17, 0xFF	; 255
    3c84:	a3 01       	movw	r20, r6
    3c86:	0e 94 27 1f 	call	0x3e4e	; 0x3e4e <__ultoa_invert>
    3c8a:	88 2e       	mov	r8, r24
    3c8c:	86 18       	sub	r8, r6
    3c8e:	fb 2d       	mov	r31, r11
    3c90:	ff 77       	andi	r31, 0x7F	; 127
    3c92:	3f 2e       	mov	r3, r31
    3c94:	36 fe       	sbrs	r3, 6
    3c96:	0d c0       	rjmp	.+26     	; 0x3cb2 <vfprintf+0x2ca>
    3c98:	23 2d       	mov	r18, r3
    3c9a:	2e 7f       	andi	r18, 0xFE	; 254
    3c9c:	a2 2e       	mov	r10, r18
    3c9e:	89 14       	cp	r8, r9
    3ca0:	58 f4       	brcc	.+22     	; 0x3cb8 <vfprintf+0x2d0>
    3ca2:	34 fe       	sbrs	r3, 4
    3ca4:	0b c0       	rjmp	.+22     	; 0x3cbc <vfprintf+0x2d4>
    3ca6:	32 fc       	sbrc	r3, 2
    3ca8:	09 c0       	rjmp	.+18     	; 0x3cbc <vfprintf+0x2d4>
    3caa:	83 2d       	mov	r24, r3
    3cac:	8e 7e       	andi	r24, 0xEE	; 238
    3cae:	a8 2e       	mov	r10, r24
    3cb0:	05 c0       	rjmp	.+10     	; 0x3cbc <vfprintf+0x2d4>
    3cb2:	b8 2c       	mov	r11, r8
    3cb4:	a3 2c       	mov	r10, r3
    3cb6:	03 c0       	rjmp	.+6      	; 0x3cbe <vfprintf+0x2d6>
    3cb8:	b8 2c       	mov	r11, r8
    3cba:	01 c0       	rjmp	.+2      	; 0x3cbe <vfprintf+0x2d6>
    3cbc:	b9 2c       	mov	r11, r9
    3cbe:	a4 fe       	sbrs	r10, 4
    3cc0:	0f c0       	rjmp	.+30     	; 0x3ce0 <vfprintf+0x2f8>
    3cc2:	fe 01       	movw	r30, r28
    3cc4:	e8 0d       	add	r30, r8
    3cc6:	f1 1d       	adc	r31, r1
    3cc8:	80 81       	ld	r24, Z
    3cca:	80 33       	cpi	r24, 0x30	; 48
    3ccc:	21 f4       	brne	.+8      	; 0x3cd6 <vfprintf+0x2ee>
    3cce:	9a 2d       	mov	r25, r10
    3cd0:	99 7e       	andi	r25, 0xE9	; 233
    3cd2:	a9 2e       	mov	r10, r25
    3cd4:	09 c0       	rjmp	.+18     	; 0x3ce8 <vfprintf+0x300>
    3cd6:	a2 fe       	sbrs	r10, 2
    3cd8:	06 c0       	rjmp	.+12     	; 0x3ce6 <vfprintf+0x2fe>
    3cda:	b3 94       	inc	r11
    3cdc:	b3 94       	inc	r11
    3cde:	04 c0       	rjmp	.+8      	; 0x3ce8 <vfprintf+0x300>
    3ce0:	8a 2d       	mov	r24, r10
    3ce2:	86 78       	andi	r24, 0x86	; 134
    3ce4:	09 f0       	breq	.+2      	; 0x3ce8 <vfprintf+0x300>
    3ce6:	b3 94       	inc	r11
    3ce8:	a3 fc       	sbrc	r10, 3
    3cea:	11 c0       	rjmp	.+34     	; 0x3d0e <vfprintf+0x326>
    3cec:	a0 fe       	sbrs	r10, 0
    3cee:	06 c0       	rjmp	.+12     	; 0x3cfc <vfprintf+0x314>
    3cf0:	b2 14       	cp	r11, r2
    3cf2:	88 f4       	brcc	.+34     	; 0x3d16 <vfprintf+0x32e>
    3cf4:	28 0c       	add	r2, r8
    3cf6:	92 2c       	mov	r9, r2
    3cf8:	9b 18       	sub	r9, r11
    3cfa:	0e c0       	rjmp	.+28     	; 0x3d18 <vfprintf+0x330>
    3cfc:	b2 14       	cp	r11, r2
    3cfe:	60 f4       	brcc	.+24     	; 0x3d18 <vfprintf+0x330>
    3d00:	b6 01       	movw	r22, r12
    3d02:	80 e2       	ldi	r24, 0x20	; 32
    3d04:	90 e0       	ldi	r25, 0x00	; 0
    3d06:	0e 94 eb 1e 	call	0x3dd6	; 0x3dd6 <fputc>
    3d0a:	b3 94       	inc	r11
    3d0c:	f7 cf       	rjmp	.-18     	; 0x3cfc <vfprintf+0x314>
    3d0e:	b2 14       	cp	r11, r2
    3d10:	18 f4       	brcc	.+6      	; 0x3d18 <vfprintf+0x330>
    3d12:	2b 18       	sub	r2, r11
    3d14:	02 c0       	rjmp	.+4      	; 0x3d1a <vfprintf+0x332>
    3d16:	98 2c       	mov	r9, r8
    3d18:	21 2c       	mov	r2, r1
    3d1a:	a4 fe       	sbrs	r10, 4
    3d1c:	10 c0       	rjmp	.+32     	; 0x3d3e <vfprintf+0x356>
    3d1e:	b6 01       	movw	r22, r12
    3d20:	80 e3       	ldi	r24, 0x30	; 48
    3d22:	90 e0       	ldi	r25, 0x00	; 0
    3d24:	0e 94 eb 1e 	call	0x3dd6	; 0x3dd6 <fputc>
    3d28:	a2 fe       	sbrs	r10, 2
    3d2a:	17 c0       	rjmp	.+46     	; 0x3d5a <vfprintf+0x372>
    3d2c:	a1 fc       	sbrc	r10, 1
    3d2e:	03 c0       	rjmp	.+6      	; 0x3d36 <vfprintf+0x34e>
    3d30:	88 e7       	ldi	r24, 0x78	; 120
    3d32:	90 e0       	ldi	r25, 0x00	; 0
    3d34:	02 c0       	rjmp	.+4      	; 0x3d3a <vfprintf+0x352>
    3d36:	88 e5       	ldi	r24, 0x58	; 88
    3d38:	90 e0       	ldi	r25, 0x00	; 0
    3d3a:	b6 01       	movw	r22, r12
    3d3c:	0c c0       	rjmp	.+24     	; 0x3d56 <vfprintf+0x36e>
    3d3e:	8a 2d       	mov	r24, r10
    3d40:	86 78       	andi	r24, 0x86	; 134
    3d42:	59 f0       	breq	.+22     	; 0x3d5a <vfprintf+0x372>
    3d44:	a1 fe       	sbrs	r10, 1
    3d46:	02 c0       	rjmp	.+4      	; 0x3d4c <vfprintf+0x364>
    3d48:	8b e2       	ldi	r24, 0x2B	; 43
    3d4a:	01 c0       	rjmp	.+2      	; 0x3d4e <vfprintf+0x366>
    3d4c:	80 e2       	ldi	r24, 0x20	; 32
    3d4e:	a7 fc       	sbrc	r10, 7
    3d50:	8d e2       	ldi	r24, 0x2D	; 45
    3d52:	b6 01       	movw	r22, r12
    3d54:	90 e0       	ldi	r25, 0x00	; 0
    3d56:	0e 94 eb 1e 	call	0x3dd6	; 0x3dd6 <fputc>
    3d5a:	89 14       	cp	r8, r9
    3d5c:	38 f4       	brcc	.+14     	; 0x3d6c <vfprintf+0x384>
    3d5e:	b6 01       	movw	r22, r12
    3d60:	80 e3       	ldi	r24, 0x30	; 48
    3d62:	90 e0       	ldi	r25, 0x00	; 0
    3d64:	0e 94 eb 1e 	call	0x3dd6	; 0x3dd6 <fputc>
    3d68:	9a 94       	dec	r9
    3d6a:	f7 cf       	rjmp	.-18     	; 0x3d5a <vfprintf+0x372>
    3d6c:	8a 94       	dec	r8
    3d6e:	f3 01       	movw	r30, r6
    3d70:	e8 0d       	add	r30, r8
    3d72:	f1 1d       	adc	r31, r1
    3d74:	80 81       	ld	r24, Z
    3d76:	b6 01       	movw	r22, r12
    3d78:	90 e0       	ldi	r25, 0x00	; 0
    3d7a:	0e 94 eb 1e 	call	0x3dd6	; 0x3dd6 <fputc>
    3d7e:	81 10       	cpse	r8, r1
    3d80:	f5 cf       	rjmp	.-22     	; 0x3d6c <vfprintf+0x384>
    3d82:	22 20       	and	r2, r2
    3d84:	09 f4       	brne	.+2      	; 0x3d88 <vfprintf+0x3a0>
    3d86:	42 ce       	rjmp	.-892    	; 0x3a0c <vfprintf+0x24>
    3d88:	b6 01       	movw	r22, r12
    3d8a:	80 e2       	ldi	r24, 0x20	; 32
    3d8c:	90 e0       	ldi	r25, 0x00	; 0
    3d8e:	0e 94 eb 1e 	call	0x3dd6	; 0x3dd6 <fputc>
    3d92:	2a 94       	dec	r2
    3d94:	f6 cf       	rjmp	.-20     	; 0x3d82 <vfprintf+0x39a>
    3d96:	f6 01       	movw	r30, r12
    3d98:	86 81       	ldd	r24, Z+6	; 0x06
    3d9a:	97 81       	ldd	r25, Z+7	; 0x07
    3d9c:	02 c0       	rjmp	.+4      	; 0x3da2 <vfprintf+0x3ba>
    3d9e:	8f ef       	ldi	r24, 0xFF	; 255
    3da0:	9f ef       	ldi	r25, 0xFF	; 255
    3da2:	2b 96       	adiw	r28, 0x0b	; 11
    3da4:	e2 e1       	ldi	r30, 0x12	; 18
    3da6:	0c 94 a1 1f 	jmp	0x3f42	; 0x3f42 <__epilogue_restores__>

00003daa <strnlen_P>:
    3daa:	fc 01       	movw	r30, r24
    3dac:	05 90       	lpm	r0, Z+
    3dae:	61 50       	subi	r22, 0x01	; 1
    3db0:	70 40       	sbci	r23, 0x00	; 0
    3db2:	01 10       	cpse	r0, r1
    3db4:	d8 f7       	brcc	.-10     	; 0x3dac <strnlen_P+0x2>
    3db6:	80 95       	com	r24
    3db8:	90 95       	com	r25
    3dba:	8e 0f       	add	r24, r30
    3dbc:	9f 1f       	adc	r25, r31
    3dbe:	08 95       	ret

00003dc0 <strnlen>:
    3dc0:	fc 01       	movw	r30, r24
    3dc2:	61 50       	subi	r22, 0x01	; 1
    3dc4:	70 40       	sbci	r23, 0x00	; 0
    3dc6:	01 90       	ld	r0, Z+
    3dc8:	01 10       	cpse	r0, r1
    3dca:	d8 f7       	brcc	.-10     	; 0x3dc2 <strnlen+0x2>
    3dcc:	80 95       	com	r24
    3dce:	90 95       	com	r25
    3dd0:	8e 0f       	add	r24, r30
    3dd2:	9f 1f       	adc	r25, r31
    3dd4:	08 95       	ret

00003dd6 <fputc>:
    3dd6:	0f 93       	push	r16
    3dd8:	1f 93       	push	r17
    3dda:	cf 93       	push	r28
    3ddc:	df 93       	push	r29
    3dde:	fb 01       	movw	r30, r22
    3de0:	23 81       	ldd	r18, Z+3	; 0x03
    3de2:	21 fd       	sbrc	r18, 1
    3de4:	03 c0       	rjmp	.+6      	; 0x3dec <fputc+0x16>
    3de6:	8f ef       	ldi	r24, 0xFF	; 255
    3de8:	9f ef       	ldi	r25, 0xFF	; 255
    3dea:	2c c0       	rjmp	.+88     	; 0x3e44 <fputc+0x6e>
    3dec:	22 ff       	sbrs	r18, 2
    3dee:	16 c0       	rjmp	.+44     	; 0x3e1c <fputc+0x46>
    3df0:	46 81       	ldd	r20, Z+6	; 0x06
    3df2:	57 81       	ldd	r21, Z+7	; 0x07
    3df4:	24 81       	ldd	r18, Z+4	; 0x04
    3df6:	35 81       	ldd	r19, Z+5	; 0x05
    3df8:	42 17       	cp	r20, r18
    3dfa:	53 07       	cpc	r21, r19
    3dfc:	44 f4       	brge	.+16     	; 0x3e0e <fputc+0x38>
    3dfe:	a0 81       	ld	r26, Z
    3e00:	b1 81       	ldd	r27, Z+1	; 0x01
    3e02:	9d 01       	movw	r18, r26
    3e04:	2f 5f       	subi	r18, 0xFF	; 255
    3e06:	3f 4f       	sbci	r19, 0xFF	; 255
    3e08:	31 83       	std	Z+1, r19	; 0x01
    3e0a:	20 83       	st	Z, r18
    3e0c:	8c 93       	st	X, r24
    3e0e:	26 81       	ldd	r18, Z+6	; 0x06
    3e10:	37 81       	ldd	r19, Z+7	; 0x07
    3e12:	2f 5f       	subi	r18, 0xFF	; 255
    3e14:	3f 4f       	sbci	r19, 0xFF	; 255
    3e16:	37 83       	std	Z+7, r19	; 0x07
    3e18:	26 83       	std	Z+6, r18	; 0x06
    3e1a:	14 c0       	rjmp	.+40     	; 0x3e44 <fputc+0x6e>
    3e1c:	8b 01       	movw	r16, r22
    3e1e:	ec 01       	movw	r28, r24
    3e20:	fb 01       	movw	r30, r22
    3e22:	00 84       	ldd	r0, Z+8	; 0x08
    3e24:	f1 85       	ldd	r31, Z+9	; 0x09
    3e26:	e0 2d       	mov	r30, r0
    3e28:	09 95       	icall
    3e2a:	89 2b       	or	r24, r25
    3e2c:	e1 f6       	brne	.-72     	; 0x3de6 <fputc+0x10>
    3e2e:	d8 01       	movw	r26, r16
    3e30:	16 96       	adiw	r26, 0x06	; 6
    3e32:	8d 91       	ld	r24, X+
    3e34:	9c 91       	ld	r25, X
    3e36:	17 97       	sbiw	r26, 0x07	; 7
    3e38:	01 96       	adiw	r24, 0x01	; 1
    3e3a:	17 96       	adiw	r26, 0x07	; 7
    3e3c:	9c 93       	st	X, r25
    3e3e:	8e 93       	st	-X, r24
    3e40:	16 97       	sbiw	r26, 0x06	; 6
    3e42:	ce 01       	movw	r24, r28
    3e44:	df 91       	pop	r29
    3e46:	cf 91       	pop	r28
    3e48:	1f 91       	pop	r17
    3e4a:	0f 91       	pop	r16
    3e4c:	08 95       	ret

00003e4e <__ultoa_invert>:
    3e4e:	fa 01       	movw	r30, r20
    3e50:	aa 27       	eor	r26, r26
    3e52:	28 30       	cpi	r18, 0x08	; 8
    3e54:	51 f1       	breq	.+84     	; 0x3eaa <__ultoa_invert+0x5c>
    3e56:	20 31       	cpi	r18, 0x10	; 16
    3e58:	81 f1       	breq	.+96     	; 0x3eba <__ultoa_invert+0x6c>
    3e5a:	e8 94       	clt
    3e5c:	6f 93       	push	r22
    3e5e:	6e 7f       	andi	r22, 0xFE	; 254
    3e60:	6e 5f       	subi	r22, 0xFE	; 254
    3e62:	7f 4f       	sbci	r23, 0xFF	; 255
    3e64:	8f 4f       	sbci	r24, 0xFF	; 255
    3e66:	9f 4f       	sbci	r25, 0xFF	; 255
    3e68:	af 4f       	sbci	r26, 0xFF	; 255
    3e6a:	b1 e0       	ldi	r27, 0x01	; 1
    3e6c:	3e d0       	rcall	.+124    	; 0x3eea <__ultoa_invert+0x9c>
    3e6e:	b4 e0       	ldi	r27, 0x04	; 4
    3e70:	3c d0       	rcall	.+120    	; 0x3eea <__ultoa_invert+0x9c>
    3e72:	67 0f       	add	r22, r23
    3e74:	78 1f       	adc	r23, r24
    3e76:	89 1f       	adc	r24, r25
    3e78:	9a 1f       	adc	r25, r26
    3e7a:	a1 1d       	adc	r26, r1
    3e7c:	68 0f       	add	r22, r24
    3e7e:	79 1f       	adc	r23, r25
    3e80:	8a 1f       	adc	r24, r26
    3e82:	91 1d       	adc	r25, r1
    3e84:	a1 1d       	adc	r26, r1
    3e86:	6a 0f       	add	r22, r26
    3e88:	71 1d       	adc	r23, r1
    3e8a:	81 1d       	adc	r24, r1
    3e8c:	91 1d       	adc	r25, r1
    3e8e:	a1 1d       	adc	r26, r1
    3e90:	20 d0       	rcall	.+64     	; 0x3ed2 <__ultoa_invert+0x84>
    3e92:	09 f4       	brne	.+2      	; 0x3e96 <__ultoa_invert+0x48>
    3e94:	68 94       	set
    3e96:	3f 91       	pop	r19
    3e98:	2a e0       	ldi	r18, 0x0A	; 10
    3e9a:	26 9f       	mul	r18, r22
    3e9c:	11 24       	eor	r1, r1
    3e9e:	30 19       	sub	r19, r0
    3ea0:	30 5d       	subi	r19, 0xD0	; 208
    3ea2:	31 93       	st	Z+, r19
    3ea4:	de f6       	brtc	.-74     	; 0x3e5c <__ultoa_invert+0xe>
    3ea6:	cf 01       	movw	r24, r30
    3ea8:	08 95       	ret
    3eaa:	46 2f       	mov	r20, r22
    3eac:	47 70       	andi	r20, 0x07	; 7
    3eae:	40 5d       	subi	r20, 0xD0	; 208
    3eb0:	41 93       	st	Z+, r20
    3eb2:	b3 e0       	ldi	r27, 0x03	; 3
    3eb4:	0f d0       	rcall	.+30     	; 0x3ed4 <__ultoa_invert+0x86>
    3eb6:	c9 f7       	brne	.-14     	; 0x3eaa <__ultoa_invert+0x5c>
    3eb8:	f6 cf       	rjmp	.-20     	; 0x3ea6 <__ultoa_invert+0x58>
    3eba:	46 2f       	mov	r20, r22
    3ebc:	4f 70       	andi	r20, 0x0F	; 15
    3ebe:	40 5d       	subi	r20, 0xD0	; 208
    3ec0:	4a 33       	cpi	r20, 0x3A	; 58
    3ec2:	18 f0       	brcs	.+6      	; 0x3eca <__ultoa_invert+0x7c>
    3ec4:	49 5d       	subi	r20, 0xD9	; 217
    3ec6:	31 fd       	sbrc	r19, 1
    3ec8:	40 52       	subi	r20, 0x20	; 32
    3eca:	41 93       	st	Z+, r20
    3ecc:	02 d0       	rcall	.+4      	; 0x3ed2 <__ultoa_invert+0x84>
    3ece:	a9 f7       	brne	.-22     	; 0x3eba <__ultoa_invert+0x6c>
    3ed0:	ea cf       	rjmp	.-44     	; 0x3ea6 <__ultoa_invert+0x58>
    3ed2:	b4 e0       	ldi	r27, 0x04	; 4
    3ed4:	a6 95       	lsr	r26
    3ed6:	97 95       	ror	r25
    3ed8:	87 95       	ror	r24
    3eda:	77 95       	ror	r23
    3edc:	67 95       	ror	r22
    3ede:	ba 95       	dec	r27
    3ee0:	c9 f7       	brne	.-14     	; 0x3ed4 <__ultoa_invert+0x86>
    3ee2:	00 97       	sbiw	r24, 0x00	; 0
    3ee4:	61 05       	cpc	r22, r1
    3ee6:	71 05       	cpc	r23, r1
    3ee8:	08 95       	ret
    3eea:	9b 01       	movw	r18, r22
    3eec:	ac 01       	movw	r20, r24
    3eee:	0a 2e       	mov	r0, r26
    3ef0:	06 94       	lsr	r0
    3ef2:	57 95       	ror	r21
    3ef4:	47 95       	ror	r20
    3ef6:	37 95       	ror	r19
    3ef8:	27 95       	ror	r18
    3efa:	ba 95       	dec	r27
    3efc:	c9 f7       	brne	.-14     	; 0x3ef0 <__ultoa_invert+0xa2>
    3efe:	62 0f       	add	r22, r18
    3f00:	73 1f       	adc	r23, r19
    3f02:	84 1f       	adc	r24, r20
    3f04:	95 1f       	adc	r25, r21
    3f06:	a0 1d       	adc	r26, r0
    3f08:	08 95       	ret

00003f0a <__prologue_saves__>:
    3f0a:	2f 92       	push	r2
    3f0c:	3f 92       	push	r3
    3f0e:	4f 92       	push	r4
    3f10:	5f 92       	push	r5
    3f12:	6f 92       	push	r6
    3f14:	7f 92       	push	r7
    3f16:	8f 92       	push	r8
    3f18:	9f 92       	push	r9
    3f1a:	af 92       	push	r10
    3f1c:	bf 92       	push	r11
    3f1e:	cf 92       	push	r12
    3f20:	df 92       	push	r13
    3f22:	ef 92       	push	r14
    3f24:	ff 92       	push	r15
    3f26:	0f 93       	push	r16
    3f28:	1f 93       	push	r17
    3f2a:	cf 93       	push	r28
    3f2c:	df 93       	push	r29
    3f2e:	cd b7       	in	r28, 0x3d	; 61
    3f30:	de b7       	in	r29, 0x3e	; 62
    3f32:	ca 1b       	sub	r28, r26
    3f34:	db 0b       	sbc	r29, r27
    3f36:	0f b6       	in	r0, 0x3f	; 63
    3f38:	f8 94       	cli
    3f3a:	de bf       	out	0x3e, r29	; 62
    3f3c:	0f be       	out	0x3f, r0	; 63
    3f3e:	cd bf       	out	0x3d, r28	; 61
    3f40:	09 94       	ijmp

00003f42 <__epilogue_restores__>:
    3f42:	2a 88       	ldd	r2, Y+18	; 0x12
    3f44:	39 88       	ldd	r3, Y+17	; 0x11
    3f46:	48 88       	ldd	r4, Y+16	; 0x10
    3f48:	5f 84       	ldd	r5, Y+15	; 0x0f
    3f4a:	6e 84       	ldd	r6, Y+14	; 0x0e
    3f4c:	7d 84       	ldd	r7, Y+13	; 0x0d
    3f4e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3f50:	9b 84       	ldd	r9, Y+11	; 0x0b
    3f52:	aa 84       	ldd	r10, Y+10	; 0x0a
    3f54:	b9 84       	ldd	r11, Y+9	; 0x09
    3f56:	c8 84       	ldd	r12, Y+8	; 0x08
    3f58:	df 80       	ldd	r13, Y+7	; 0x07
    3f5a:	ee 80       	ldd	r14, Y+6	; 0x06
    3f5c:	fd 80       	ldd	r15, Y+5	; 0x05
    3f5e:	0c 81       	ldd	r16, Y+4	; 0x04
    3f60:	1b 81       	ldd	r17, Y+3	; 0x03
    3f62:	aa 81       	ldd	r26, Y+2	; 0x02
    3f64:	b9 81       	ldd	r27, Y+1	; 0x01
    3f66:	ce 0f       	add	r28, r30
    3f68:	d1 1d       	adc	r29, r1
    3f6a:	0f b6       	in	r0, 0x3f	; 63
    3f6c:	f8 94       	cli
    3f6e:	de bf       	out	0x3e, r29	; 62
    3f70:	0f be       	out	0x3f, r0	; 63
    3f72:	cd bf       	out	0x3d, r28	; 61
    3f74:	ed 01       	movw	r28, r26
    3f76:	08 95       	ret

00003f78 <_exit>:
    3f78:	f8 94       	cli

00003f7a <__stop_program>:
    3f7a:	ff cf       	rjmp	.-2      	; 0x3f7a <__stop_program>
