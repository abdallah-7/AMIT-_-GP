
project_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e92  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000bc  00800060  00000e92  00000f06  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000fc2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ff4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000220  00000000  00000000  00001030  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000281f  00000000  00000000  00001250  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000cc8  00000000  00000000  00003a6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000015f3  00000000  00000000  00004737  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004ec  00000000  00000000  00005d2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000d26  00000000  00000000  00006218  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001787  00000000  00000000  00006f3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001e8  00000000  00000000  000086c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e9       	ldi	r30, 0x92	; 146
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 31       	cpi	r26, 0x1C	; 28
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 cd 04 	call	0x99a	; 0x99a <main>
  7a:	0c 94 47 07 	jmp	0xe8e	; 0xe8e <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <BL_voidInit>:



void BL_voidInit(void)
{
	UART_voidInit();
  82:	0e 94 36 07 	call	0xe6c	; 0xe6c <UART_voidInit>
  86:	08 95       	ret

00000088 <EEPROM_voidInit>:
	{
		//error
	}
	
	
}
  88:	0e 94 ab 06 	call	0xd56	; 0xd56 <TWI_voidInitMaster>
  8c:	08 95       	ret

0000008e <EEPROM_voidWritePage>:
  8e:	0f 93       	push	r16
  90:	1f 93       	push	r17
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	61 15       	cp	r22, r1
  98:	71 05       	cpc	r23, r1
  9a:	f9 f0       	breq	.+62     	; 0xda <EEPROM_voidWritePage+0x4c>
  9c:	8b 01       	movw	r16, r22
  9e:	d8 2f       	mov	r29, r24
  a0:	c9 2f       	mov	r28, r25
  a2:	c0 65       	ori	r28, 0x50	; 80
  a4:	0e 94 b7 06 	call	0xd6e	; 0xd6e <TWI_voidSendStartCondition>
  a8:	8c 2f       	mov	r24, r28
  aa:	0e 94 da 06 	call	0xdb4	; 0xdb4 <TWI_voidSendSlaveAddWithWrite>
  ae:	8d 2f       	mov	r24, r29
  b0:	0e 94 04 07 	call	0xe08	; 0xe08 <TWI_voidTransmitMasterDataByte>
  b4:	c0 e0       	ldi	r28, 0x00	; 0
  b6:	07 c0       	rjmp	.+14     	; 0xc6 <EEPROM_voidWritePage+0x38>
  b8:	f8 01       	movw	r30, r16
  ba:	ec 0f       	add	r30, r28
  bc:	f1 1d       	adc	r31, r1
  be:	80 81       	ld	r24, Z
  c0:	0e 94 04 07 	call	0xe08	; 0xe08 <TWI_voidTransmitMasterDataByte>
  c4:	cf 5f       	subi	r28, 0xFF	; 255
  c6:	c8 30       	cpi	r28, 0x08	; 8
  c8:	b8 f3       	brcs	.-18     	; 0xb8 <EEPROM_voidWritePage+0x2a>
  ca:	0e 94 d3 06 	call	0xda6	; 0xda6 <TWI_voidSendStopCondition>
  ce:	8f e1       	ldi	r24, 0x1F	; 31
  d0:	9e e4       	ldi	r25, 0x4E	; 78
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <EEPROM_voidWritePage+0x44>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <EEPROM_voidWritePage+0x4a>
  d8:	00 00       	nop
  da:	df 91       	pop	r29
  dc:	cf 91       	pop	r28
  de:	1f 91       	pop	r17
  e0:	0f 91       	pop	r16
  e2:	08 95       	ret

000000e4 <EEPROM_voidSequentialRead>:

void EEPROM_voidSequentialRead(u16 copy_u16WordAdress,u16 copy_u18NumOfDataBytes,u8* copy_pu8RxData)
{
  e4:	ef 92       	push	r14
  e6:	ff 92       	push	r15
  e8:	0f 93       	push	r16
  ea:	1f 93       	push	r17
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
	if((copy_pu8RxData !=NULL)&&copy_u18NumOfDataBytes<512)
  f0:	41 15       	cp	r20, r1
  f2:	51 05       	cpc	r21, r1
  f4:	81 f1       	breq	.+96     	; 0x156 <EEPROM_voidSequentialRead+0x72>
  f6:	61 15       	cp	r22, r1
  f8:	22 e0       	ldi	r18, 0x02	; 2
  fa:	72 07       	cpc	r23, r18
  fc:	60 f5       	brcc	.+88     	; 0x156 <EEPROM_voidSequentialRead+0x72>
  fe:	8a 01       	movw	r16, r20
 100:	7b 01       	movw	r14, r22
 102:	d8 2f       	mov	r29, r24
	{
		u8 Local_u8DeviceAddress = ( copy_u16WordAdress>>8)|EEPROM_FIXED_ADDRESS;
 104:	c9 2f       	mov	r28, r25
 106:	c0 65       	ori	r28, 0x50	; 80
		u16 Local_u16BytesCounter;
		TWI_voidSendStartCondition();
 108:	0e 94 b7 06 	call	0xd6e	; 0xd6e <TWI_voidSendStartCondition>
		TWI_voidSendSlaveAddWithWrite(Local_u8DeviceAddress);
 10c:	8c 2f       	mov	r24, r28
 10e:	0e 94 da 06 	call	0xdb4	; 0xdb4 <TWI_voidSendSlaveAddWithWrite>
		TWI_voidTransmitMasterDataByte((u8)copy_u16WordAdress);
 112:	8d 2f       	mov	r24, r29
 114:	0e 94 04 07 	call	0xe08	; 0xe08 <TWI_voidTransmitMasterDataByte>
		TWI_voidSendRepeatedStartCondition();
 118:	0e 94 c5 06 	call	0xd8a	; 0xd8a <TWI_voidSendRepeatedStartCondition>
		TWI_voidSendSlaveAddWithRead(Local_u8DeviceAddress);
 11c:	8c 2f       	mov	r24, r28
 11e:	0e 94 ef 06 	call	0xdde	; 0xdde <TWI_voidSendSlaveAddWithRead>
		
		for(Local_u16BytesCounter=0;Local_u16BytesCounter<copy_u18NumOfDataBytes-1;Local_u16BytesCounter++)
 122:	c0 e0       	ldi	r28, 0x00	; 0
 124:	d0 e0       	ldi	r29, 0x00	; 0
 126:	06 c0       	rjmp	.+12     	; 0x134 <EEPROM_voidSequentialRead+0x50>
		{
			TWI_voidRecieveMasterDataByteWithAch(&copy_pu8RxData[Local_u16BytesCounter]);
 128:	c8 01       	movw	r24, r16
 12a:	8c 0f       	add	r24, r28
 12c:	9d 1f       	adc	r25, r29
 12e:	0e 94 10 07 	call	0xe20	; 0xe20 <TWI_voidRecieveMasterDataByteWithAch>
		TWI_voidSendSlaveAddWithWrite(Local_u8DeviceAddress);
		TWI_voidTransmitMasterDataByte((u8)copy_u16WordAdress);
		TWI_voidSendRepeatedStartCondition();
		TWI_voidSendSlaveAddWithRead(Local_u8DeviceAddress);
		
		for(Local_u16BytesCounter=0;Local_u16BytesCounter<copy_u18NumOfDataBytes-1;Local_u16BytesCounter++)
 132:	21 96       	adiw	r28, 0x01	; 1
 134:	c7 01       	movw	r24, r14
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	c8 17       	cp	r28, r24
 13a:	d9 07       	cpc	r29, r25
 13c:	a8 f3       	brcs	.-22     	; 0x128 <EEPROM_voidSequentialRead+0x44>
		{
			TWI_voidRecieveMasterDataByteWithAch(&copy_pu8RxData[Local_u16BytesCounter]);
			
		}
		
		TWI_voidRecieveMasterDataByteWithNAch(&copy_pu8RxData[copy_u18NumOfDataBytes-1]);
 13e:	80 0f       	add	r24, r16
 140:	91 1f       	adc	r25, r17
 142:	0e 94 26 07 	call	0xe4c	; 0xe4c <TWI_voidRecieveMasterDataByteWithNAch>
		TWI_voidSendStopCondition();
 146:	0e 94 d3 06 	call	0xda6	; 0xda6 <TWI_voidSendStopCondition>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14a:	8f e1       	ldi	r24, 0x1F	; 31
 14c:	9e e4       	ldi	r25, 0x4E	; 78
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <EEPROM_voidSequentialRead+0x6a>
 152:	00 c0       	rjmp	.+0      	; 0x154 <EEPROM_voidSequentialRead+0x70>
 154:	00 00       	nop
	{
		//error state
	}


 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	1f 91       	pop	r17
 15c:	0f 91       	pop	r16
 15e:	ff 90       	pop	r15
 160:	ef 90       	pop	r14
 162:	08 95       	ret

00000164 <KEYPAD_voidInit>:


void KEYPAD_voidInit(void)
{
	//inti keypad rowa as inpts pins
	DIO_voidSetPinDirection(KEYPAD_ROW0_PORT,KEYPAD_ROW0_PIN,DIO_PIN_INPUT);
 164:	40 e0       	ldi	r20, 0x00	; 0
 166:	63 e0       	ldi	r22, 0x03	; 3
 168:	82 e0       	ldi	r24, 0x02	; 2
 16a:	0e 94 41 05 	call	0xa82	; 0xa82 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_ROW1_PORT,KEYPAD_ROW1_PIN,DIO_PIN_INPUT);
 16e:	40 e0       	ldi	r20, 0x00	; 0
 170:	64 e0       	ldi	r22, 0x04	; 4
 172:	82 e0       	ldi	r24, 0x02	; 2
 174:	0e 94 41 05 	call	0xa82	; 0xa82 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_ROW2_PORT,KEYPAD_ROW2_PIN,DIO_PIN_INPUT);
 178:	40 e0       	ldi	r20, 0x00	; 0
 17a:	65 e0       	ldi	r22, 0x05	; 5
 17c:	82 e0       	ldi	r24, 0x02	; 2
 17e:	0e 94 41 05 	call	0xa82	; 0xa82 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_ROW3_PORT,KEYPAD_ROW3_PIN,DIO_PIN_INPUT);
 182:	40 e0       	ldi	r20, 0x00	; 0
 184:	66 e0       	ldi	r22, 0x06	; 6
 186:	82 e0       	ldi	r24, 0x02	; 2
 188:	0e 94 41 05 	call	0xa82	; 0xa82 <DIO_voidSetPinDirection>
	
	//inti keypad cols as outputs pins
	DIO_voidSetPinDirection(KEYPAD_COL0_PORT,KEYPAD_COL0_PIN,DIO_PIN_OUTPUT);
 18c:	41 e0       	ldi	r20, 0x01	; 1
 18e:	64 e0       	ldi	r22, 0x04	; 4
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	0e 94 41 05 	call	0xa82	; 0xa82 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_COL1_PORT,KEYPAD_COL1_PIN,DIO_PIN_OUTPUT);
 196:	41 e0       	ldi	r20, 0x01	; 1
 198:	65 e0       	ldi	r22, 0x05	; 5
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	0e 94 41 05 	call	0xa82	; 0xa82 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_COL2_PORT,KEYPAD_COL2_PIN,DIO_PIN_OUTPUT);
 1a0:	41 e0       	ldi	r20, 0x01	; 1
 1a2:	66 e0       	ldi	r22, 0x06	; 6
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	0e 94 41 05 	call	0xa82	; 0xa82 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_COL3_PORT,KEYPAD_COL3_PIN,DIO_PIN_OUTPUT);
 1aa:	41 e0       	ldi	r20, 0x01	; 1
 1ac:	67 e0       	ldi	r22, 0x07	; 7
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	0e 94 41 05 	call	0xa82	; 0xa82 <DIO_voidSetPinDirection>
	
	//active pull up res for inpts pins
	DIO_voidActivePinPullUpResistance (KEYPAD_ROW0_PORT,KEYPAD_ROW0_PIN);
 1b4:	63 e0       	ldi	r22, 0x03	; 3
 1b6:	82 e0       	ldi	r24, 0x02	; 2
 1b8:	0e 94 73 06 	call	0xce6	; 0xce6 <DIO_voidActivePinPullUpResistance>
	DIO_voidActivePinPullUpResistance (KEYPAD_ROW1_PORT,KEYPAD_ROW1_PIN);
 1bc:	64 e0       	ldi	r22, 0x04	; 4
 1be:	82 e0       	ldi	r24, 0x02	; 2
 1c0:	0e 94 73 06 	call	0xce6	; 0xce6 <DIO_voidActivePinPullUpResistance>
	DIO_voidActivePinPullUpResistance (KEYPAD_ROW2_PORT,KEYPAD_ROW2_PIN);
 1c4:	65 e0       	ldi	r22, 0x05	; 5
 1c6:	82 e0       	ldi	r24, 0x02	; 2
 1c8:	0e 94 73 06 	call	0xce6	; 0xce6 <DIO_voidActivePinPullUpResistance>
	DIO_voidActivePinPullUpResistance (KEYPAD_ROW3_PORT,KEYPAD_ROW3_PIN);
 1cc:	66 e0       	ldi	r22, 0x06	; 6
 1ce:	82 e0       	ldi	r24, 0x02	; 2
 1d0:	0e 94 73 06 	call	0xce6	; 0xce6 <DIO_voidActivePinPullUpResistance>
 1d4:	08 95       	ret

000001d6 <KEYPAD_voidGetValue>:
	
}

void KEYPAD_voidGetValue(u8* copy_pu8ReturnedValue)
{
 1d6:	6f 92       	push	r6
 1d8:	7f 92       	push	r7
 1da:	8f 92       	push	r8
 1dc:	9f 92       	push	r9
 1de:	af 92       	push	r10
 1e0:	bf 92       	push	r11
 1e2:	cf 92       	push	r12
 1e4:	df 92       	push	r13
 1e6:	ef 92       	push	r14
 1e8:	ff 92       	push	r15
 1ea:	0f 93       	push	r16
 1ec:	1f 93       	push	r17
 1ee:	cf 93       	push	r28
 1f0:	df 93       	push	r29
 1f2:	cd b7       	in	r28, 0x3d	; 61
 1f4:	de b7       	in	r29, 0x3e	; 62
 1f6:	a1 97       	sbiw	r28, 0x21	; 33
 1f8:	0f b6       	in	r0, 0x3f	; 63
 1fa:	f8 94       	cli
 1fc:	de bf       	out	0x3e, r29	; 62
 1fe:	0f be       	out	0x3f, r0	; 63
 200:	cd bf       	out	0x3d, r28	; 61
	if(copy_pu8ReturnedValue!=NULL)
 202:	00 97       	sbiw	r24, 0x00	; 0
 204:	09 f4       	brne	.+2      	; 0x208 <KEYPAD_voidGetValue+0x32>
 206:	80 c0       	rjmp	.+256    	; 0x308 <KEYPAD_voidGetValue+0x132>
 208:	5c 01       	movw	r10, r24
	{
		//case i didnt press anything on keypad
		*copy_pu8ReturnedValue=KEYPAD_NOT_PRESSED;
 20a:	8f ef       	ldi	r24, 0xFF	; 255
 20c:	f5 01       	movw	r30, r10
 20e:	80 83       	st	Z, r24
		
		u8 Local_u8ColsCounter;
		//matrics for cols port and pins
		u8 Local_u8ColsPorts[4]={KEYPAD_COL0_PORT,KEYPAD_COL1_PORT,KEYPAD_COL2_PORT,KEYPAD_COL3_PORT};
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	8d 8f       	std	Y+29, r24	; 0x1d
 214:	8e 8f       	std	Y+30, r24	; 0x1e
 216:	8f 8f       	std	Y+31, r24	; 0x1f
 218:	88 a3       	std	Y+32, r24	; 0x20
		u8 Local_u8ColsPins[4]={KEYPAD_COL0_PIN,KEYPAD_COL1_PIN,KEYPAD_COL2_PIN,KEYPAD_COL3_PIN};
 21a:	34 e0       	ldi	r19, 0x04	; 4
 21c:	39 8f       	std	Y+25, r19	; 0x19
 21e:	25 e0       	ldi	r18, 0x05	; 5
 220:	2a 8f       	std	Y+26, r18	; 0x1a
 222:	96 e0       	ldi	r25, 0x06	; 6
 224:	9b 8f       	std	Y+27, r25	; 0x1b
 226:	87 e0       	ldi	r24, 0x07	; 7
 228:	8c 8f       	std	Y+28, r24	; 0x1c
		
		u8 Local_u8RowsCounter;
		//matrics for rows port and pins
		u8 Local_u8RowsPorts[4]={KEYPAD_ROW0_PORT,KEYPAD_ROW1_PORT,KEYPAD_ROW2_PORT,KEYPAD_ROW3_PORT};
 22a:	82 e0       	ldi	r24, 0x02	; 2
 22c:	8d 8b       	std	Y+21, r24	; 0x15
 22e:	8e 8b       	std	Y+22, r24	; 0x16
 230:	8f 8b       	std	Y+23, r24	; 0x17
 232:	88 8f       	std	Y+24, r24	; 0x18
		u8 Local_u8RowsPins[4]={KEYPAD_ROW0_PIN,KEYPAD_ROW1_PIN,KEYPAD_ROW2_PIN,KEYPAD_ROW3_PIN};
 234:	83 e0       	ldi	r24, 0x03	; 3
 236:	89 8b       	std	Y+17, r24	; 0x11
 238:	3a 8b       	std	Y+18, r19	; 0x12
 23a:	2b 8b       	std	Y+19, r18	; 0x13
 23c:	9c 8b       	std	Y+20, r25	; 0x14
		
		u8 Local_u8RowValue;
		
		//keypad chars
		u8 Local_u8Keys[4][4]=KeyPAD_KEYS;
 23e:	80 e1       	ldi	r24, 0x10	; 16
 240:	e0 e6       	ldi	r30, 0x60	; 96
 242:	f0 e0       	ldi	r31, 0x00	; 0
 244:	de 01       	movw	r26, r28
 246:	11 96       	adiw	r26, 0x01	; 1
 248:	01 90       	ld	r0, Z+
 24a:	0d 92       	st	X+, r0
 24c:	8a 95       	dec	r24
 24e:	e1 f7       	brne	.-8      	; 0x248 <KEYPAD_voidGetValue+0x72>
		
		for(Local_u8ColsCounter=0;Local_u8ColsCounter<4;Local_u8ColsCounter++)
 250:	81 2c       	mov	r8, r1
 252:	56 c0       	rjmp	.+172    	; 0x300 <KEYPAD_voidGetValue+0x12a>
		{
			//activate each colomns
			DIO_voidSetPinValue(Local_u8ColsPorts[Local_u8ColsCounter],Local_u8ColsPins[Local_u8ColsCounter],DIO_PIN_LOW );
 254:	c8 2c       	mov	r12, r8
 256:	d1 2c       	mov	r13, r1
 258:	e9 e1       	ldi	r30, 0x19	; 25
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	ec 0f       	add	r30, r28
 25e:	fd 1f       	adc	r31, r29
 260:	ec 0d       	add	r30, r12
 262:	fd 1d       	adc	r31, r13
 264:	60 80       	ld	r6, Z
 266:	ed e1       	ldi	r30, 0x1D	; 29
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	ec 0f       	add	r30, r28
 26c:	fd 1f       	adc	r31, r29
 26e:	ec 0d       	add	r30, r12
 270:	fd 1d       	adc	r31, r13
 272:	70 80       	ld	r7, Z
 274:	40 e0       	ldi	r20, 0x00	; 0
 276:	66 2d       	mov	r22, r6
 278:	87 2d       	mov	r24, r7
 27a:	0e 94 b8 05 	call	0xb70	; 0xb70 <DIO_voidSetPinValue>
			
			//read each row
			for(Local_u8RowsCounter=0;Local_u8RowsCounter<4;Local_u8RowsCounter++)
 27e:	10 e0       	ldi	r17, 0x00	; 0
 280:	37 c0       	rjmp	.+110    	; 0x2f0 <KEYPAD_voidGetValue+0x11a>
			{
				//read each row
				DIO_voidGetPinValue(Local_u8RowsPorts[Local_u8RowsCounter],Local_u8RowsPins[Local_u8RowsCounter],&Local_u8RowValue);
 282:	e1 2e       	mov	r14, r17
 284:	f1 2c       	mov	r15, r1
 286:	e1 e1       	ldi	r30, 0x11	; 17
 288:	f0 e0       	ldi	r31, 0x00	; 0
 28a:	ec 0f       	add	r30, r28
 28c:	fd 1f       	adc	r31, r29
 28e:	ee 0d       	add	r30, r14
 290:	ff 1d       	adc	r31, r15
 292:	00 81       	ld	r16, Z
 294:	e5 e1       	ldi	r30, 0x15	; 21
 296:	f0 e0       	ldi	r31, 0x00	; 0
 298:	ec 0f       	add	r30, r28
 29a:	fd 1f       	adc	r31, r29
 29c:	ee 0d       	add	r30, r14
 29e:	ff 1d       	adc	r31, r15
 2a0:	90 80       	ld	r9, Z
 2a2:	ae 01       	movw	r20, r28
 2a4:	4f 5d       	subi	r20, 0xDF	; 223
 2a6:	5f 4f       	sbci	r21, 0xFF	; 255
 2a8:	60 2f       	mov	r22, r16
 2aa:	89 2d       	mov	r24, r9
 2ac:	0e 94 38 06 	call	0xc70	; 0xc70 <DIO_voidGetPinValue>
				//is pressed
				if(0==Local_u8RowValue)
 2b0:	89 a1       	ldd	r24, Y+33	; 0x21
 2b2:	81 11       	cpse	r24, r1
 2b4:	1c c0       	rjmp	.+56     	; 0x2ee <KEYPAD_voidGetValue+0x118>
 2b6:	07 c0       	rjmp	.+14     	; 0x2c6 <KEYPAD_voidGetValue+0xf0>
				{
					//to make loop until i move my finger
					while(0==Local_u8RowValue)
					{
						DIO_voidGetPinValue(Local_u8RowsPorts[Local_u8RowsCounter],Local_u8RowsPins[Local_u8RowsCounter],&Local_u8RowValue);
 2b8:	ae 01       	movw	r20, r28
 2ba:	4f 5d       	subi	r20, 0xDF	; 223
 2bc:	5f 4f       	sbci	r21, 0xFF	; 255
 2be:	60 2f       	mov	r22, r16
 2c0:	89 2d       	mov	r24, r9
 2c2:	0e 94 38 06 	call	0xc70	; 0xc70 <DIO_voidGetPinValue>
				DIO_voidGetPinValue(Local_u8RowsPorts[Local_u8RowsCounter],Local_u8RowsPins[Local_u8RowsCounter],&Local_u8RowValue);
				//is pressed
				if(0==Local_u8RowValue)
				{
					//to make loop until i move my finger
					while(0==Local_u8RowValue)
 2c6:	89 a1       	ldd	r24, Y+33	; 0x21
 2c8:	88 23       	and	r24, r24
 2ca:	b1 f3       	breq	.-20     	; 0x2b8 <KEYPAD_voidGetValue+0xe2>
					{
						DIO_voidGetPinValue(Local_u8RowsPorts[Local_u8RowsCounter],Local_u8RowsPins[Local_u8RowsCounter],&Local_u8RowValue);
						
					}
					
					*copy_pu8ReturnedValue=Local_u8Keys[Local_u8RowsCounter][Local_u8ColsCounter];
 2cc:	ee 0c       	add	r14, r14
 2ce:	ff 1c       	adc	r15, r15
 2d0:	ee 0c       	add	r14, r14
 2d2:	ff 1c       	adc	r15, r15
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	8c 0f       	add	r24, r28
 2da:	9d 1f       	adc	r25, r29
 2dc:	e8 0e       	add	r14, r24
 2de:	f9 1e       	adc	r15, r25
 2e0:	f7 01       	movw	r30, r14
 2e2:	ec 0d       	add	r30, r12
 2e4:	fd 1d       	adc	r31, r13
 2e6:	80 81       	ld	r24, Z
 2e8:	f5 01       	movw	r30, r10
 2ea:	80 83       	st	Z, r24
 2ec:	0d c0       	rjmp	.+26     	; 0x308 <KEYPAD_voidGetValue+0x132>
		{
			//activate each colomns
			DIO_voidSetPinValue(Local_u8ColsPorts[Local_u8ColsCounter],Local_u8ColsPins[Local_u8ColsCounter],DIO_PIN_LOW );
			
			//read each row
			for(Local_u8RowsCounter=0;Local_u8RowsCounter<4;Local_u8RowsCounter++)
 2ee:	1f 5f       	subi	r17, 0xFF	; 255
 2f0:	14 30       	cpi	r17, 0x04	; 4
 2f2:	38 f2       	brcs	.-114    	; 0x282 <KEYPAD_voidGetValue+0xac>
				
				
			}
			
			//decativate current colomns
			DIO_voidSetPinValue(Local_u8ColsPorts[Local_u8ColsCounter],Local_u8ColsPins[Local_u8ColsCounter],DIO_PIN_High);
 2f4:	41 e0       	ldi	r20, 0x01	; 1
 2f6:	66 2d       	mov	r22, r6
 2f8:	87 2d       	mov	r24, r7
 2fa:	0e 94 b8 05 	call	0xb70	; 0xb70 <DIO_voidSetPinValue>
		u8 Local_u8RowValue;
		
		//keypad chars
		u8 Local_u8Keys[4][4]=KeyPAD_KEYS;
		
		for(Local_u8ColsCounter=0;Local_u8ColsCounter<4;Local_u8ColsCounter++)
 2fe:	83 94       	inc	r8
 300:	f3 e0       	ldi	r31, 0x03	; 3
 302:	f8 15       	cp	r31, r8
 304:	08 f0       	brcs	.+2      	; 0x308 <KEYPAD_voidGetValue+0x132>
 306:	a6 cf       	rjmp	.-180    	; 0x254 <KEYPAD_voidGetValue+0x7e>
	{
		//error
	}
	
	
}
 308:	a1 96       	adiw	r28, 0x21	; 33
 30a:	0f b6       	in	r0, 0x3f	; 63
 30c:	f8 94       	cli
 30e:	de bf       	out	0x3e, r29	; 62
 310:	0f be       	out	0x3f, r0	; 63
 312:	cd bf       	out	0x3d, r28	; 61
 314:	df 91       	pop	r29
 316:	cf 91       	pop	r28
 318:	1f 91       	pop	r17
 31a:	0f 91       	pop	r16
 31c:	ff 90       	pop	r15
 31e:	ef 90       	pop	r14
 320:	df 90       	pop	r13
 322:	cf 90       	pop	r12
 324:	bf 90       	pop	r11
 326:	af 90       	pop	r10
 328:	9f 90       	pop	r9
 32a:	8f 90       	pop	r8
 32c:	7f 90       	pop	r7
 32e:	6f 90       	pop	r6
 330:	08 95       	ret

00000332 <PRV_voidWriteHalfPort>:
		LCD_voidSendCommand(0b00011100);
		break;
		
		//move display to left
		case LCD_SHIFT_DIS_LEFT:
		LCD_voidSendCommand(0b00011000);
 332:	cf 93       	push	r28
 334:	c8 2f       	mov	r28, r24
 336:	80 ff       	sbrs	r24, 0
 338:	06 c0       	rjmp	.+12     	; 0x346 <PRV_voidWriteHalfPort+0x14>
 33a:	41 e0       	ldi	r20, 0x01	; 1
 33c:	64 e0       	ldi	r22, 0x04	; 4
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	0e 94 b8 05 	call	0xb70	; 0xb70 <DIO_voidSetPinValue>
 344:	05 c0       	rjmp	.+10     	; 0x350 <PRV_voidWriteHalfPort+0x1e>
 346:	40 e0       	ldi	r20, 0x00	; 0
 348:	64 e0       	ldi	r22, 0x04	; 4
 34a:	80 e0       	ldi	r24, 0x00	; 0
 34c:	0e 94 b8 05 	call	0xb70	; 0xb70 <DIO_voidSetPinValue>
 350:	c1 ff       	sbrs	r28, 1
 352:	06 c0       	rjmp	.+12     	; 0x360 <PRV_voidWriteHalfPort+0x2e>
 354:	41 e0       	ldi	r20, 0x01	; 1
 356:	65 e0       	ldi	r22, 0x05	; 5
 358:	80 e0       	ldi	r24, 0x00	; 0
 35a:	0e 94 b8 05 	call	0xb70	; 0xb70 <DIO_voidSetPinValue>
 35e:	05 c0       	rjmp	.+10     	; 0x36a <PRV_voidWriteHalfPort+0x38>
 360:	40 e0       	ldi	r20, 0x00	; 0
 362:	65 e0       	ldi	r22, 0x05	; 5
 364:	80 e0       	ldi	r24, 0x00	; 0
 366:	0e 94 b8 05 	call	0xb70	; 0xb70 <DIO_voidSetPinValue>
 36a:	c2 ff       	sbrs	r28, 2
 36c:	06 c0       	rjmp	.+12     	; 0x37a <PRV_voidWriteHalfPort+0x48>
 36e:	41 e0       	ldi	r20, 0x01	; 1
 370:	66 e0       	ldi	r22, 0x06	; 6
 372:	80 e0       	ldi	r24, 0x00	; 0
 374:	0e 94 b8 05 	call	0xb70	; 0xb70 <DIO_voidSetPinValue>
 378:	05 c0       	rjmp	.+10     	; 0x384 <PRV_voidWriteHalfPort+0x52>
 37a:	40 e0       	ldi	r20, 0x00	; 0
 37c:	66 e0       	ldi	r22, 0x06	; 6
 37e:	80 e0       	ldi	r24, 0x00	; 0
 380:	0e 94 b8 05 	call	0xb70	; 0xb70 <DIO_voidSetPinValue>
 384:	c3 ff       	sbrs	r28, 3
 386:	06 c0       	rjmp	.+12     	; 0x394 <PRV_voidWriteHalfPort+0x62>
 388:	41 e0       	ldi	r20, 0x01	; 1
 38a:	67 e0       	ldi	r22, 0x07	; 7
 38c:	80 e0       	ldi	r24, 0x00	; 0
 38e:	0e 94 b8 05 	call	0xb70	; 0xb70 <DIO_voidSetPinValue>
 392:	05 c0       	rjmp	.+10     	; 0x39e <PRV_voidWriteHalfPort+0x6c>
 394:	40 e0       	ldi	r20, 0x00	; 0
 396:	67 e0       	ldi	r22, 0x07	; 7
 398:	80 e0       	ldi	r24, 0x00	; 0
 39a:	0e 94 b8 05 	call	0xb70	; 0xb70 <DIO_voidSetPinValue>
 39e:	cf 91       	pop	r28
 3a0:	08 95       	ret

000003a2 <LCD_voidSendCommand>:
 3a2:	cf 93       	push	r28
 3a4:	c8 2f       	mov	r28, r24
 3a6:	40 e0       	ldi	r20, 0x00	; 0
 3a8:	61 e0       	ldi	r22, 0x01	; 1
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	0e 94 b8 05 	call	0xb70	; 0xb70 <DIO_voidSetPinValue>
 3b0:	40 e0       	ldi	r20, 0x00	; 0
 3b2:	62 e0       	ldi	r22, 0x02	; 2
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	0e 94 b8 05 	call	0xb70	; 0xb70 <DIO_voidSetPinValue>
 3ba:	8c 2f       	mov	r24, r28
 3bc:	82 95       	swap	r24
 3be:	8f 70       	andi	r24, 0x0F	; 15
 3c0:	0e 94 99 01 	call	0x332	; 0x332 <PRV_voidWriteHalfPort>
 3c4:	41 e0       	ldi	r20, 0x01	; 1
 3c6:	63 e0       	ldi	r22, 0x03	; 3
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	0e 94 b8 05 	call	0xb70	; 0xb70 <DIO_voidSetPinValue>
 3ce:	8f e9       	ldi	r24, 0x9F	; 159
 3d0:	9f e0       	ldi	r25, 0x0F	; 15
 3d2:	01 97       	sbiw	r24, 0x01	; 1
 3d4:	f1 f7       	brne	.-4      	; 0x3d2 <LCD_voidSendCommand+0x30>
 3d6:	00 c0       	rjmp	.+0      	; 0x3d8 <LCD_voidSendCommand+0x36>
 3d8:	00 00       	nop
 3da:	40 e0       	ldi	r20, 0x00	; 0
 3dc:	63 e0       	ldi	r22, 0x03	; 3
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	0e 94 b8 05 	call	0xb70	; 0xb70 <DIO_voidSetPinValue>
 3e4:	8c 2f       	mov	r24, r28
 3e6:	0e 94 99 01 	call	0x332	; 0x332 <PRV_voidWriteHalfPort>
 3ea:	41 e0       	ldi	r20, 0x01	; 1
 3ec:	63 e0       	ldi	r22, 0x03	; 3
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	0e 94 b8 05 	call	0xb70	; 0xb70 <DIO_voidSetPinValue>
 3f4:	8f e9       	ldi	r24, 0x9F	; 159
 3f6:	9f e0       	ldi	r25, 0x0F	; 15
 3f8:	01 97       	sbiw	r24, 0x01	; 1
 3fa:	f1 f7       	brne	.-4      	; 0x3f8 <LCD_voidSendCommand+0x56>
 3fc:	00 c0       	rjmp	.+0      	; 0x3fe <LCD_voidSendCommand+0x5c>
 3fe:	00 00       	nop
 400:	40 e0       	ldi	r20, 0x00	; 0
 402:	63 e0       	ldi	r22, 0x03	; 3
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	0e 94 b8 05 	call	0xb70	; 0xb70 <DIO_voidSetPinValue>
 40a:	cf 91       	pop	r28
 40c:	08 95       	ret

0000040e <LCD_voidInit>:
 40e:	41 e0       	ldi	r20, 0x01	; 1
 410:	61 e0       	ldi	r22, 0x01	; 1
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	0e 94 41 05 	call	0xa82	; 0xa82 <DIO_voidSetPinDirection>
 418:	41 e0       	ldi	r20, 0x01	; 1
 41a:	62 e0       	ldi	r22, 0x02	; 2
 41c:	81 e0       	ldi	r24, 0x01	; 1
 41e:	0e 94 41 05 	call	0xa82	; 0xa82 <DIO_voidSetPinDirection>
 422:	41 e0       	ldi	r20, 0x01	; 1
 424:	63 e0       	ldi	r22, 0x03	; 3
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	0e 94 41 05 	call	0xa82	; 0xa82 <DIO_voidSetPinDirection>
 42c:	41 e0       	ldi	r20, 0x01	; 1
 42e:	64 e0       	ldi	r22, 0x04	; 4
 430:	80 e0       	ldi	r24, 0x00	; 0
 432:	0e 94 41 05 	call	0xa82	; 0xa82 <DIO_voidSetPinDirection>
 436:	41 e0       	ldi	r20, 0x01	; 1
 438:	65 e0       	ldi	r22, 0x05	; 5
 43a:	80 e0       	ldi	r24, 0x00	; 0
 43c:	0e 94 41 05 	call	0xa82	; 0xa82 <DIO_voidSetPinDirection>
 440:	41 e0       	ldi	r20, 0x01	; 1
 442:	66 e0       	ldi	r22, 0x06	; 6
 444:	80 e0       	ldi	r24, 0x00	; 0
 446:	0e 94 41 05 	call	0xa82	; 0xa82 <DIO_voidSetPinDirection>
 44a:	41 e0       	ldi	r20, 0x01	; 1
 44c:	67 e0       	ldi	r22, 0x07	; 7
 44e:	80 e0       	ldi	r24, 0x00	; 0
 450:	0e 94 41 05 	call	0xa82	; 0xa82 <DIO_voidSetPinDirection>
 454:	2f e7       	ldi	r18, 0x7F	; 127
 456:	85 eb       	ldi	r24, 0xB5	; 181
 458:	91 e0       	ldi	r25, 0x01	; 1
 45a:	21 50       	subi	r18, 0x01	; 1
 45c:	80 40       	sbci	r24, 0x00	; 0
 45e:	90 40       	sbci	r25, 0x00	; 0
 460:	e1 f7       	brne	.-8      	; 0x45a <LCD_voidInit+0x4c>
 462:	00 c0       	rjmp	.+0      	; 0x464 <LCD_voidInit+0x56>
 464:	00 00       	nop
 466:	40 e0       	ldi	r20, 0x00	; 0
 468:	61 e0       	ldi	r22, 0x01	; 1
 46a:	81 e0       	ldi	r24, 0x01	; 1
 46c:	0e 94 b8 05 	call	0xb70	; 0xb70 <DIO_voidSetPinValue>
 470:	40 e0       	ldi	r20, 0x00	; 0
 472:	62 e0       	ldi	r22, 0x02	; 2
 474:	81 e0       	ldi	r24, 0x01	; 1
 476:	0e 94 b8 05 	call	0xb70	; 0xb70 <DIO_voidSetPinValue>
 47a:	82 e0       	ldi	r24, 0x02	; 2
 47c:	0e 94 99 01 	call	0x332	; 0x332 <PRV_voidWriteHalfPort>
 480:	41 e0       	ldi	r20, 0x01	; 1
 482:	63 e0       	ldi	r22, 0x03	; 3
 484:	81 e0       	ldi	r24, 0x01	; 1
 486:	0e 94 b8 05 	call	0xb70	; 0xb70 <DIO_voidSetPinValue>
 48a:	8f e9       	ldi	r24, 0x9F	; 159
 48c:	9f e0       	ldi	r25, 0x0F	; 15
 48e:	01 97       	sbiw	r24, 0x01	; 1
 490:	f1 f7       	brne	.-4      	; 0x48e <LCD_voidInit+0x80>
 492:	00 c0       	rjmp	.+0      	; 0x494 <LCD_voidInit+0x86>
 494:	00 00       	nop
 496:	40 e0       	ldi	r20, 0x00	; 0
 498:	63 e0       	ldi	r22, 0x03	; 3
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	0e 94 b8 05 	call	0xb70	; 0xb70 <DIO_voidSetPinValue>
 4a0:	88 e2       	ldi	r24, 0x28	; 40
 4a2:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <LCD_voidSendCommand>
 4a6:	90 ef       	ldi	r25, 0xF0	; 240
 4a8:	9a 95       	dec	r25
 4aa:	f1 f7       	brne	.-4      	; 0x4a8 <LCD_voidInit+0x9a>
 4ac:	8f e0       	ldi	r24, 0x0F	; 15
 4ae:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <LCD_voidSendCommand>
 4b2:	20 ef       	ldi	r18, 0xF0	; 240
 4b4:	2a 95       	dec	r18
 4b6:	f1 f7       	brne	.-4      	; 0x4b4 <LCD_voidInit+0xa6>
 4b8:	81 e0       	ldi	r24, 0x01	; 1
 4ba:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <LCD_voidSendCommand>
 4be:	8f e3       	ldi	r24, 0x3F	; 63
 4c0:	9f e1       	ldi	r25, 0x1F	; 31
 4c2:	01 97       	sbiw	r24, 0x01	; 1
 4c4:	f1 f7       	brne	.-4      	; 0x4c2 <LCD_voidInit+0xb4>
 4c6:	00 c0       	rjmp	.+0      	; 0x4c8 <LCD_voidInit+0xba>
 4c8:	00 00       	nop
 4ca:	86 e0       	ldi	r24, 0x06	; 6
 4cc:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <LCD_voidSendCommand>
 4d0:	08 95       	ret

000004d2 <LCD_voidDisplayChar>:
 4d2:	cf 93       	push	r28
 4d4:	c8 2f       	mov	r28, r24
 4d6:	41 e0       	ldi	r20, 0x01	; 1
 4d8:	61 e0       	ldi	r22, 0x01	; 1
 4da:	81 e0       	ldi	r24, 0x01	; 1
 4dc:	0e 94 b8 05 	call	0xb70	; 0xb70 <DIO_voidSetPinValue>
 4e0:	40 e0       	ldi	r20, 0x00	; 0
 4e2:	62 e0       	ldi	r22, 0x02	; 2
 4e4:	81 e0       	ldi	r24, 0x01	; 1
 4e6:	0e 94 b8 05 	call	0xb70	; 0xb70 <DIO_voidSetPinValue>
 4ea:	8c 2f       	mov	r24, r28
 4ec:	82 95       	swap	r24
 4ee:	8f 70       	andi	r24, 0x0F	; 15
 4f0:	0e 94 99 01 	call	0x332	; 0x332 <PRV_voidWriteHalfPort>
 4f4:	41 e0       	ldi	r20, 0x01	; 1
 4f6:	63 e0       	ldi	r22, 0x03	; 3
 4f8:	81 e0       	ldi	r24, 0x01	; 1
 4fa:	0e 94 b8 05 	call	0xb70	; 0xb70 <DIO_voidSetPinValue>
 4fe:	8f e9       	ldi	r24, 0x9F	; 159
 500:	9f e0       	ldi	r25, 0x0F	; 15
 502:	01 97       	sbiw	r24, 0x01	; 1
 504:	f1 f7       	brne	.-4      	; 0x502 <LCD_voidDisplayChar+0x30>
 506:	00 c0       	rjmp	.+0      	; 0x508 <LCD_voidDisplayChar+0x36>
 508:	00 00       	nop
 50a:	40 e0       	ldi	r20, 0x00	; 0
 50c:	63 e0       	ldi	r22, 0x03	; 3
 50e:	81 e0       	ldi	r24, 0x01	; 1
 510:	0e 94 b8 05 	call	0xb70	; 0xb70 <DIO_voidSetPinValue>
 514:	8c 2f       	mov	r24, r28
 516:	0e 94 99 01 	call	0x332	; 0x332 <PRV_voidWriteHalfPort>
 51a:	41 e0       	ldi	r20, 0x01	; 1
 51c:	63 e0       	ldi	r22, 0x03	; 3
 51e:	81 e0       	ldi	r24, 0x01	; 1
 520:	0e 94 b8 05 	call	0xb70	; 0xb70 <DIO_voidSetPinValue>
 524:	8f e9       	ldi	r24, 0x9F	; 159
 526:	9f e0       	ldi	r25, 0x0F	; 15
 528:	01 97       	sbiw	r24, 0x01	; 1
 52a:	f1 f7       	brne	.-4      	; 0x528 <LCD_voidDisplayChar+0x56>
 52c:	00 c0       	rjmp	.+0      	; 0x52e <LCD_voidDisplayChar+0x5c>
 52e:	00 00       	nop
 530:	40 e0       	ldi	r20, 0x00	; 0
 532:	63 e0       	ldi	r22, 0x03	; 3
 534:	81 e0       	ldi	r24, 0x01	; 1
 536:	0e 94 b8 05 	call	0xb70	; 0xb70 <DIO_voidSetPinValue>
 53a:	cf 91       	pop	r28
 53c:	08 95       	ret

0000053e <LCD_voidDisplayString>:
 53e:	0f 93       	push	r16
 540:	1f 93       	push	r17
 542:	cf 93       	push	r28
 544:	00 97       	sbiw	r24, 0x00	; 0
 546:	71 f4       	brne	.+28     	; 0x564 <LCD_voidDisplayString+0x26>
 548:	15 c0       	rjmp	.+42     	; 0x574 <LCD_voidDisplayString+0x36>
 54a:	0e 94 69 02 	call	0x4d2	; 0x4d2 <LCD_voidDisplayChar>
 54e:	2f ef       	ldi	r18, 0xFF	; 255
 550:	80 e7       	ldi	r24, 0x70	; 112
 552:	92 e0       	ldi	r25, 0x02	; 2
 554:	21 50       	subi	r18, 0x01	; 1
 556:	80 40       	sbci	r24, 0x00	; 0
 558:	90 40       	sbci	r25, 0x00	; 0
 55a:	e1 f7       	brne	.-8      	; 0x554 <LCD_voidDisplayString+0x16>
 55c:	00 c0       	rjmp	.+0      	; 0x55e <LCD_voidDisplayString+0x20>
 55e:	00 00       	nop
 560:	cf 5f       	subi	r28, 0xFF	; 255
 562:	02 c0       	rjmp	.+4      	; 0x568 <LCD_voidDisplayString+0x2a>
 564:	8c 01       	movw	r16, r24
 566:	c0 e0       	ldi	r28, 0x00	; 0
 568:	f8 01       	movw	r30, r16
 56a:	ec 0f       	add	r30, r28
 56c:	f1 1d       	adc	r31, r1
 56e:	80 81       	ld	r24, Z
 570:	81 11       	cpse	r24, r1
 572:	eb cf       	rjmp	.-42     	; 0x54a <LCD_voidDisplayString+0xc>
 574:	cf 91       	pop	r28
 576:	1f 91       	pop	r17
 578:	0f 91       	pop	r16
 57a:	08 95       	ret

0000057c <LCD_voidDisplayNumber>:
 57c:	cf 93       	push	r28
 57e:	df 93       	push	r29
 580:	cd b7       	in	r28, 0x3d	; 61
 582:	de b7       	in	r29, 0x3e	; 62
 584:	a8 97       	sbiw	r28, 0x28	; 40
 586:	0f b6       	in	r0, 0x3f	; 63
 588:	f8 94       	cli
 58a:	de bf       	out	0x3e, r29	; 62
 58c:	0f be       	out	0x3f, r0	; 63
 58e:	cd bf       	out	0x3d, r28	; 61
 590:	98 2f       	mov	r25, r24
 592:	60 e0       	ldi	r22, 0x00	; 0
 594:	08 c0       	rjmp	.+16     	; 0x5a6 <LCD_voidDisplayNumber+0x2a>
 596:	6f 5f       	subi	r22, 0xFF	; 255
 598:	2d ec       	ldi	r18, 0xCD	; 205
 59a:	92 9f       	mul	r25, r18
 59c:	91 2d       	mov	r25, r1
 59e:	11 24       	eor	r1, r1
 5a0:	96 95       	lsr	r25
 5a2:	96 95       	lsr	r25
 5a4:	96 95       	lsr	r25
 5a6:	91 11       	cpse	r25, r1
 5a8:	f6 cf       	rjmp	.-20     	; 0x596 <LCD_voidDisplayNumber+0x1a>
 5aa:	30 e0       	ldi	r19, 0x00	; 0
 5ac:	24 c0       	rjmp	.+72     	; 0x5f6 <LCD_voidDisplayNumber+0x7a>
 5ae:	2d ec       	ldi	r18, 0xCD	; 205
 5b0:	82 9f       	mul	r24, r18
 5b2:	21 2d       	mov	r18, r1
 5b4:	11 24       	eor	r1, r1
 5b6:	92 2f       	mov	r25, r18
 5b8:	96 95       	lsr	r25
 5ba:	96 95       	lsr	r25
 5bc:	96 95       	lsr	r25
 5be:	99 0f       	add	r25, r25
 5c0:	49 2f       	mov	r20, r25
 5c2:	44 0f       	add	r20, r20
 5c4:	44 0f       	add	r20, r20
 5c6:	94 0f       	add	r25, r20
 5c8:	89 1b       	sub	r24, r25
 5ca:	98 2f       	mov	r25, r24
 5cc:	82 2f       	mov	r24, r18
 5ce:	86 95       	lsr	r24
 5d0:	86 95       	lsr	r24
 5d2:	86 95       	lsr	r24
 5d4:	43 2f       	mov	r20, r19
 5d6:	50 e0       	ldi	r21, 0x00	; 0
 5d8:	4f 5f       	subi	r20, 0xFF	; 255
 5da:	5f 4f       	sbci	r21, 0xFF	; 255
 5dc:	e6 2f       	mov	r30, r22
 5de:	f0 e0       	ldi	r31, 0x00	; 0
 5e0:	e4 1b       	sub	r30, r20
 5e2:	f5 0b       	sbc	r31, r21
 5e4:	41 e0       	ldi	r20, 0x01	; 1
 5e6:	50 e0       	ldi	r21, 0x00	; 0
 5e8:	4c 0f       	add	r20, r28
 5ea:	5d 1f       	adc	r21, r29
 5ec:	e4 0f       	add	r30, r20
 5ee:	f5 1f       	adc	r31, r21
 5f0:	90 5d       	subi	r25, 0xD0	; 208
 5f2:	90 83       	st	Z, r25
 5f4:	3f 5f       	subi	r19, 0xFF	; 255
 5f6:	36 17       	cp	r19, r22
 5f8:	d0 f2       	brcs	.-76     	; 0x5ae <LCD_voidDisplayNumber+0x32>
 5fa:	e1 e0       	ldi	r30, 0x01	; 1
 5fc:	f0 e0       	ldi	r31, 0x00	; 0
 5fe:	ec 0f       	add	r30, r28
 600:	fd 1f       	adc	r31, r29
 602:	e6 0f       	add	r30, r22
 604:	f1 1d       	adc	r31, r1
 606:	10 82       	st	Z, r1
 608:	ce 01       	movw	r24, r28
 60a:	01 96       	adiw	r24, 0x01	; 1
 60c:	0e 94 9f 02 	call	0x53e	; 0x53e <LCD_voidDisplayString>
 610:	a8 96       	adiw	r28, 0x28	; 40
 612:	0f b6       	in	r0, 0x3f	; 63
 614:	f8 94       	cli
 616:	de bf       	out	0x3e, r29	; 62
 618:	0f be       	out	0x3f, r0	; 63
 61a:	cd bf       	out	0x3d, r28	; 61
 61c:	df 91       	pop	r29
 61e:	cf 91       	pop	r28
 620:	08 95       	ret

00000622 <LCD_voidClear>:
 622:	81 e0       	ldi	r24, 0x01	; 1
 624:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <LCD_voidSendCommand>
 628:	08 95       	ret

0000062a <LCD_voidGoTOSpecificPosition>:
	}
	
}

void LCD_voidGoTOSpecificPosition(u8 copy_u8LineNumber,u8 copy_u8Position)
{
 62a:	cf 93       	push	r28
 62c:	df 93       	push	r29
	if(copy_u8Position<40)
 62e:	68 32       	cpi	r22, 0x28	; 40
 630:	a0 f4       	brcc	.+40     	; 0x65a <LCD_voidGoTOSpecificPosition+0x30>
 632:	c6 2f       	mov	r28, r22
 634:	d8 2f       	mov	r29, r24
	{
		//cmnd to return cursor to home position
		LCD_voidSendCommand(0b00000010);
 636:	82 e0       	ldi	r24, 0x02	; 2
 638:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <LCD_voidSendCommand>
		
		switch(copy_u8LineNumber)
 63c:	d1 30       	cpi	r29, 0x01	; 1
 63e:	19 f0       	breq	.+6      	; 0x646 <LCD_voidGoTOSpecificPosition+0x1c>
 640:	d2 30       	cpi	r29, 0x02	; 2
 642:	31 f0       	breq	.+12     	; 0x650 <LCD_voidGoTOSpecificPosition+0x26>
 644:	0a c0       	rjmp	.+20     	; 0x65a <LCD_voidGoTOSpecificPosition+0x30>
		{
			case LCD_LINE_ONE:
			
			LCD_voidSendCommand(0b10000000|copy_u8Position);
 646:	8c 2f       	mov	r24, r28
 648:	80 68       	ori	r24, 0x80	; 128
 64a:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <LCD_voidSendCommand>
		
			
			break;
 64e:	05 c0       	rjmp	.+10     	; 0x65a <LCD_voidGoTOSpecificPosition+0x30>
			
			case LCD_LINE_TWO:

			LCD_voidSendCommand(0b10000000|(copy_u8Position+0x40));
 650:	80 e4       	ldi	r24, 0x40	; 64
 652:	8c 0f       	add	r24, r28
 654:	80 68       	ori	r24, 0x80	; 128
 656:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <LCD_voidSendCommand>
		//error state
	}
	
	
	
}
 65a:	df 91       	pop	r29
 65c:	cf 91       	pop	r28
 65e:	08 95       	ret

00000660 <HOME_voidInit>:



void HOME_voidInit(void)
{
	EEPROM_voidInit();
 660:	0e 94 44 00 	call	0x88	; 0x88 <EEPROM_voidInit>
	
	LCD_voidInit();
 664:	0e 94 07 02 	call	0x40e	; 0x40e <LCD_voidInit>
	
	KEYPAD_voidInit();
 668:	0e 94 b2 00 	call	0x164	; 0x164 <KEYPAD_voidInit>
	
	BL_voidInit();
 66c:	0e 94 41 00 	call	0x82	; 0x82 <BL_voidInit>
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN1,DIO_PIN_OUTPUT);
 670:	41 e0       	ldi	r20, 0x01	; 1
 672:	61 e0       	ldi	r22, 0x01	; 1
 674:	83 e0       	ldi	r24, 0x03	; 3
 676:	0e 94 41 05 	call	0xa82	; 0xa82 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN0,DIO_PIN_INPUT);
 67a:	40 e0       	ldi	r20, 0x00	; 0
 67c:	60 e0       	ldi	r22, 0x00	; 0
 67e:	83 e0       	ldi	r24, 0x03	; 3
 680:	0e 94 41 05 	call	0xa82	; 0xa82 <DIO_voidSetPinDirection>
 684:	08 95       	ret

00000686 <HOME_voidLocalGetUserAndPass>:
	
	//check alarm 
}

void HOME_voidLocalGetUserAndPass(u8* copy_pu8LocalUserName,u8* copy_pu8LocalUserPass)
{
 686:	cf 92       	push	r12
 688:	df 92       	push	r13
 68a:	ef 92       	push	r14
 68c:	ff 92       	push	r15
 68e:	1f 93       	push	r17
 690:	cf 93       	push	r28
 692:	df 93       	push	r29
	if((copy_pu8LocalUserName!=NULL)&&(copy_pu8LocalUserPass!=NULL))
 694:	00 97       	sbiw	r24, 0x00	; 0
 696:	09 f4       	brne	.+2      	; 0x69a <HOME_voidLocalGetUserAndPass+0x14>
 698:	5f c0       	rjmp	.+190    	; 0x758 <HOME_voidLocalGetUserAndPass+0xd2>
 69a:	61 15       	cp	r22, r1
 69c:	71 05       	cpc	r23, r1
 69e:	09 f4       	brne	.+2      	; 0x6a2 <HOME_voidLocalGetUserAndPass+0x1c>
 6a0:	5b c0       	rjmp	.+182    	; 0x758 <HOME_voidLocalGetUserAndPass+0xd2>
 6a2:	7b 01       	movw	r14, r22
 6a4:	6c 01       	movw	r12, r24
	{
			
		u8 Local_u8UserNameLengthCounter,Local_u8UserPassCounter;
	
		//dis request for use name and pass
		LCD_voidClear();
 6a6:	0e 94 11 03 	call	0x622	; 0x622 <LCD_voidClear>
		LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
 6aa:	60 e0       	ldi	r22, 0x00	; 0
 6ac:	81 e0       	ldi	r24, 0x01	; 1
 6ae:	0e 94 15 03 	call	0x62a	; 0x62a <LCD_voidGoTOSpecificPosition>
		LCD_voidDisplayString("Please Enter User");
 6b2:	8b e8       	ldi	r24, 0x8B	; 139
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	0e 94 9f 02 	call	0x53e	; 0x53e <LCD_voidDisplayString>
		LCD_voidGoTOSpecificPosition(LCD_LINE_TWO,0);
 6ba:	60 e0       	ldi	r22, 0x00	; 0
 6bc:	82 e0       	ldi	r24, 0x02	; 2
 6be:	0e 94 15 03 	call	0x62a	; 0x62a <LCD_voidGoTOSpecificPosition>
		LCD_voidDisplayString("Name&Password");
 6c2:	8d e9       	ldi	r24, 0x9D	; 157
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	0e 94 9f 02 	call	0x53e	; 0x53e <LCD_voidDisplayString>
 6ca:	2f ef       	ldi	r18, 0xFF	; 255
 6cc:	83 ed       	ldi	r24, 0xD3	; 211
 6ce:	90 e3       	ldi	r25, 0x30	; 48
 6d0:	21 50       	subi	r18, 0x01	; 1
 6d2:	80 40       	sbci	r24, 0x00	; 0
 6d4:	90 40       	sbci	r25, 0x00	; 0
 6d6:	e1 f7       	brne	.-8      	; 0x6d0 <HOME_voidLocalGetUserAndPass+0x4a>
 6d8:	00 c0       	rjmp	.+0      	; 0x6da <HOME_voidLocalGetUserAndPass+0x54>
 6da:	00 00       	nop
		_delay_ms(1000);
	
		//dis request for user name
		LCD_voidClear();
 6dc:	0e 94 11 03 	call	0x622	; 0x622 <LCD_voidClear>
		LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
 6e0:	60 e0       	ldi	r22, 0x00	; 0
 6e2:	81 e0       	ldi	r24, 0x01	; 1
 6e4:	0e 94 15 03 	call	0x62a	; 0x62a <LCD_voidGoTOSpecificPosition>
		LCD_voidDisplayString("User Name:");
 6e8:	8b ea       	ldi	r24, 0xAB	; 171
 6ea:	90 e0       	ldi	r25, 0x00	; 0
 6ec:	0e 94 9f 02 	call	0x53e	; 0x53e <LCD_voidDisplayString>
	
		//loop for 8 digits user name
		for(Local_u8UserNameLengthCounter=0;Local_u8UserNameLengthCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8UserNameLengthCounter++)
 6f0:	10 e0       	ldi	r17, 0x00	; 0
 6f2:	11 c0       	rjmp	.+34     	; 0x716 <HOME_voidLocalGetUserAndPass+0x90>
		{
		
		
			do
			{
				KEYPAD_voidGetValue(&copy_pu8LocalUserName[Local_u8UserNameLengthCounter]);
 6f4:	e6 01       	movw	r28, r12
 6f6:	c1 0f       	add	r28, r17
 6f8:	d1 1d       	adc	r29, r1
 6fa:	ce 01       	movw	r24, r28
 6fc:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <KEYPAD_voidGetValue>
			
			}while(copy_pu8LocalUserName[Local_u8UserNameLengthCounter]== KEYPAD_NOT_PRESSED);
 700:	98 81       	ld	r25, Y
 702:	9f 3f       	cpi	r25, 0xFF	; 255
 704:	b9 f3       	breq	.-18     	; 0x6f4 <HOME_voidLocalGetUserAndPass+0x6e>
		
			LCD_voidGoTOSpecificPosition(LCD_LINE_TWO,Local_u8UserNameLengthCounter);
 706:	61 2f       	mov	r22, r17
 708:	82 e0       	ldi	r24, 0x02	; 2
 70a:	0e 94 15 03 	call	0x62a	; 0x62a <LCD_voidGoTOSpecificPosition>
			LCD_voidDisplayChar(copy_pu8LocalUserName[Local_u8UserNameLengthCounter]);
 70e:	88 81       	ld	r24, Y
 710:	0e 94 69 02 	call	0x4d2	; 0x4d2 <LCD_voidDisplayChar>
		LCD_voidClear();
		LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
		LCD_voidDisplayString("User Name:");
	
		//loop for 8 digits user name
		for(Local_u8UserNameLengthCounter=0;Local_u8UserNameLengthCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8UserNameLengthCounter++)
 714:	1f 5f       	subi	r17, 0xFF	; 255
 716:	18 30       	cpi	r17, 0x08	; 8
 718:	68 f3       	brcs	.-38     	; 0x6f4 <HOME_voidLocalGetUserAndPass+0x6e>
			LCD_voidGoTOSpecificPosition(LCD_LINE_TWO,Local_u8UserNameLengthCounter);
			LCD_voidDisplayChar(copy_pu8LocalUserName[Local_u8UserNameLengthCounter]);
		}
	
		//display request for pass
		LCD_voidClear();
 71a:	0e 94 11 03 	call	0x622	; 0x622 <LCD_voidClear>
		LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
 71e:	60 e0       	ldi	r22, 0x00	; 0
 720:	81 e0       	ldi	r24, 0x01	; 1
 722:	0e 94 15 03 	call	0x62a	; 0x62a <LCD_voidGoTOSpecificPosition>
		LCD_voidDisplayString("PASSWORD:");
 726:	86 eb       	ldi	r24, 0xB6	; 182
 728:	90 e0       	ldi	r25, 0x00	; 0
 72a:	0e 94 9f 02 	call	0x53e	; 0x53e <LCD_voidDisplayString>
	
		//loop for 8 digits user pass
			for(Local_u8UserPassCounter=0;Local_u8UserPassCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8UserPassCounter++)
 72e:	10 e0       	ldi	r17, 0x00	; 0
 730:	11 c0       	rjmp	.+34     	; 0x754 <HOME_voidLocalGetUserAndPass+0xce>
			{
				do
				{
					KEYPAD_voidGetValue(&copy_pu8LocalUserPass[Local_u8UserPassCounter]);
 732:	e7 01       	movw	r28, r14
 734:	c1 0f       	add	r28, r17
 736:	d1 1d       	adc	r29, r1
 738:	ce 01       	movw	r24, r28
 73a:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <KEYPAD_voidGetValue>
				
				}while(copy_pu8LocalUserPass[Local_u8UserPassCounter]==KEYPAD_NOT_PRESSED);
 73e:	88 81       	ld	r24, Y
 740:	8f 3f       	cpi	r24, 0xFF	; 255
 742:	b9 f3       	breq	.-18     	; 0x732 <HOME_voidLocalGetUserAndPass+0xac>
			
				LCD_voidGoTOSpecificPosition(LCD_LINE_TWO,Local_u8UserPassCounter);
 744:	61 2f       	mov	r22, r17
 746:	82 e0       	ldi	r24, 0x02	; 2
 748:	0e 94 15 03 	call	0x62a	; 0x62a <LCD_voidGoTOSpecificPosition>
				LCD_voidDisplayChar(copy_pu8LocalUserPass[Local_u8UserPassCounter]);
 74c:	88 81       	ld	r24, Y
 74e:	0e 94 69 02 	call	0x4d2	; 0x4d2 <LCD_voidDisplayChar>
		LCD_voidClear();
		LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
		LCD_voidDisplayString("PASSWORD:");
	
		//loop for 8 digits user pass
			for(Local_u8UserPassCounter=0;Local_u8UserPassCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8UserPassCounter++)
 752:	1f 5f       	subi	r17, 0xFF	; 255
 754:	18 30       	cpi	r17, 0x08	; 8
 756:	68 f3       	brcs	.-38     	; 0x732 <HOME_voidLocalGetUserAndPass+0xac>
		//error massage
	}
			
	
		
}
 758:	df 91       	pop	r29
 75a:	cf 91       	pop	r28
 75c:	1f 91       	pop	r17
 75e:	ff 90       	pop	r15
 760:	ef 90       	pop	r14
 762:	df 90       	pop	r13
 764:	cf 90       	pop	r12
 766:	08 95       	ret

00000768 <HOME_voidCheckUserAndPass>:

void HOME_voidCheckUserAndPass(u8 copy_u8AccessType,u8* copy_pu8UserType )
{
 768:	8f 92       	push	r8
 76a:	9f 92       	push	r9
 76c:	af 92       	push	r10
 76e:	bf 92       	push	r11
 770:	cf 92       	push	r12
 772:	df 92       	push	r13
 774:	ef 92       	push	r14
 776:	ff 92       	push	r15
 778:	0f 93       	push	r16
 77a:	1f 93       	push	r17
 77c:	cf 93       	push	r28
 77e:	df 93       	push	r29
 780:	cd b7       	in	r28, 0x3d	; 61
 782:	de b7       	in	r29, 0x3e	; 62
 784:	a0 97       	sbiw	r28, 0x20	; 32
 786:	0f b6       	in	r0, 0x3f	; 63
 788:	f8 94       	cli
 78a:	de bf       	out	0x3e, r29	; 62
 78c:	0f be       	out	0x3f, r0	; 63
 78e:	cd bf       	out	0x3d, r28	; 61
	//page 32 to 61 for remote user name and password the first page for user name the followed by password
	//word 500 in eeprom is saved for alarm history
	
	
	//validate pointer
	if(copy_pu8UserType!=NULL)
 790:	61 15       	cp	r22, r1
 792:	71 05       	cpc	r23, r1
 794:	09 f4       	brne	.+2      	; 0x798 <HOME_voidCheckUserAndPass+0x30>
 796:	ee c0       	rjmp	.+476    	; 0x974 <__stack+0x115>
	{
		//first case for local access
		if(copy_u8AccessType==HOME_LOCAL_ACCESS)
 798:	81 30       	cpi	r24, 0x01	; 1
 79a:	09 f0       	breq	.+2      	; 0x79e <HOME_voidCheckUserAndPass+0x36>
 79c:	eb c0       	rjmp	.+470    	; 0x974 <__stack+0x115>
 79e:	da c0       	rjmp	.+436    	; 0x954 <__stack+0xf5>
			Local_u8FireAnAlarm=0,Local_u8PagesCounter,Local_u8WrongUserNameCounter=0,Local_u8WrongUserPassCounter=0,Local_u8LocalUserNameLocation,LocaL_u8RightEntery=0;
			
			//every user have max of 3 trials for user name and pass
			for(Local_u8TrailsCounter=0;Local_u8TrailsCounter<HOME_MAX_NUMBER_OF_TRIALS;Local_u8TrailsCounter++)
			{
				Local_u8FireAnAlarm++;
 7a0:	93 94       	inc	r9
				Local_u8WrongUserNameCounter=0;
				Local_u8WrongUserPassCounter=0;
				
				//get user name and pass from KPD & LCD
				HOME_voidLocalGetUserAndPass(&local_u8EnteredLocalUserName,&local_u8EnteredLocalUserPass);
 7a2:	be 01       	movw	r22, r28
 7a4:	6f 5e       	subi	r22, 0xEF	; 239
 7a6:	7f 4f       	sbci	r23, 0xFF	; 255
 7a8:	ce 01       	movw	r24, r28
 7aa:	49 96       	adiw	r24, 0x19	; 25
 7ac:	0e 94 43 03 	call	0x686	; 0x686 <HOME_voidLocalGetUserAndPass>
			//every user have max of 3 trials for user name and pass
			for(Local_u8TrailsCounter=0;Local_u8TrailsCounter<HOME_MAX_NUMBER_OF_TRIALS;Local_u8TrailsCounter++)
			{
				Local_u8FireAnAlarm++;
				Local_u8WrongUserNameCounter=0;
				Local_u8WrongUserPassCounter=0;
 7b0:	b1 2c       	mov	r11, r1
			
			//every user have max of 3 trials for user name and pass
			for(Local_u8TrailsCounter=0;Local_u8TrailsCounter<HOME_MAX_NUMBER_OF_TRIALS;Local_u8TrailsCounter++)
			{
				Local_u8FireAnAlarm++;
				Local_u8WrongUserNameCounter=0;
 7b2:	c1 2c       	mov	r12, r1
				
				//get user name and pass from KPD & LCD
				HOME_voidLocalGetUserAndPass(&local_u8EnteredLocalUserName,&local_u8EnteredLocalUserPass);
				
				//loop on all reserved local eeprom locations
				for(Local_u8PagesCounter=0;Local_u8PagesCounter<(HOME_MAX_NUM_OF_LOCAL_USER+1);Local_u8PagesCounter++)
 7b4:	d1 2c       	mov	r13, r1
 7b6:	5f c0       	rjmp	.+190    	; 0x876 <__stack+0x17>
					Local_u8NameByteCheck=0;
					Local_u8PassByteCheck=0;
					
					//get user name and pass from eeprom for local sys
					Local_u8LocalUserNameLocation=(2*Local_u8PagesCounter)*HOME_USER_NAME_AND_PASS_MAX_LENGTh;
					EEPROM_voidSequentialRead(Local_u8LocalUserNameLocation,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredLocalUserName);
 7b8:	0d 2d       	mov	r16, r13
 7ba:	02 95       	swap	r16
 7bc:	00 7f       	andi	r16, 0xF0	; 240
 7be:	10 e0       	ldi	r17, 0x00	; 0
 7c0:	ae 01       	movw	r20, r28
 7c2:	47 5f       	subi	r20, 0xF7	; 247
 7c4:	5f 4f       	sbci	r21, 0xFF	; 255
 7c6:	68 e0       	ldi	r22, 0x08	; 8
 7c8:	70 e0       	ldi	r23, 0x00	; 0
 7ca:	c8 01       	movw	r24, r16
 7cc:	0e 94 72 00 	call	0xe4	; 0xe4 <EEPROM_voidSequentialRead>
					EEPROM_voidSequentialRead(Local_u8LocalUserNameLocation+HOME_USER_NAME_AND_PASS_MAX_LENGTh,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredLocalUserPass);
 7d0:	ae 01       	movw	r20, r28
 7d2:	4f 5f       	subi	r20, 0xFF	; 255
 7d4:	5f 4f       	sbci	r21, 0xFF	; 255
 7d6:	68 e0       	ldi	r22, 0x08	; 8
 7d8:	70 e0       	ldi	r23, 0x00	; 0
 7da:	c8 01       	movw	r24, r16
 7dc:	08 96       	adiw	r24, 0x08	; 8
 7de:	0e 94 72 00 	call	0xe4	; 0xe4 <EEPROM_voidSequentialRead>
				
				//loop on all reserved local eeprom locations
				for(Local_u8PagesCounter=0;Local_u8PagesCounter<(HOME_MAX_NUM_OF_LOCAL_USER+1);Local_u8PagesCounter++)
				
				{
					Local_u8NameByteCheck=0;
 7e2:	40 e0       	ldi	r20, 0x00	; 0
					Local_u8LocalUserNameLocation=(2*Local_u8PagesCounter)*HOME_USER_NAME_AND_PASS_MAX_LENGTh;
					EEPROM_voidSequentialRead(Local_u8LocalUserNameLocation,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredLocalUserName);
					EEPROM_voidSequentialRead(Local_u8LocalUserNameLocation+HOME_USER_NAME_AND_PASS_MAX_LENGTh,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredLocalUserPass);
					
					//check user name which is entered by is user is the same as the one from eeprom
					for(Local_u8NameByteCheckCounter=0;Local_u8NameByteCheckCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8NameByteCheckCounter++)
 7e4:	20 e0       	ldi	r18, 0x00	; 0
 7e6:	14 c0       	rjmp	.+40     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
					{
							
						if(local_u8EnteredLocalUserName[Local_u8NameByteCheckCounter]==local_u8StoredLocalUserName[Local_u8NameByteCheckCounter])
 7e8:	82 2f       	mov	r24, r18
 7ea:	90 e0       	ldi	r25, 0x00	; 0
 7ec:	e9 e1       	ldi	r30, 0x19	; 25
 7ee:	f0 e0       	ldi	r31, 0x00	; 0
 7f0:	ec 0f       	add	r30, r28
 7f2:	fd 1f       	adc	r31, r29
 7f4:	e8 0f       	add	r30, r24
 7f6:	f9 1f       	adc	r31, r25
 7f8:	30 81       	ld	r19, Z
 7fa:	e9 e0       	ldi	r30, 0x09	; 9
 7fc:	f0 e0       	ldi	r31, 0x00	; 0
 7fe:	ec 0f       	add	r30, r28
 800:	fd 1f       	adc	r31, r29
 802:	e8 0f       	add	r30, r24
 804:	f9 1f       	adc	r31, r25
 806:	80 81       	ld	r24, Z
 808:	38 13       	cpse	r19, r24
 80a:	01 c0       	rjmp	.+2      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
						{
							Local_u8NameByteCheck++;
 80c:	4f 5f       	subi	r20, 0xFF	; 255
					Local_u8LocalUserNameLocation=(2*Local_u8PagesCounter)*HOME_USER_NAME_AND_PASS_MAX_LENGTh;
					EEPROM_voidSequentialRead(Local_u8LocalUserNameLocation,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredLocalUserName);
					EEPROM_voidSequentialRead(Local_u8LocalUserNameLocation+HOME_USER_NAME_AND_PASS_MAX_LENGTh,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredLocalUserPass);
					
					//check user name which is entered by is user is the same as the one from eeprom
					for(Local_u8NameByteCheckCounter=0;Local_u8NameByteCheckCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8NameByteCheckCounter++)
 80e:	2f 5f       	subi	r18, 0xFF	; 255
 810:	28 30       	cpi	r18, 0x08	; 8
 812:	50 f3       	brcs	.-44     	; 0x7e8 <HOME_voidCheckUserAndPass+0x80>
						}
					}
					
					
					//if the user name is right now we can check pass
					if(Local_u8NameByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
 814:	48 30       	cpi	r20, 0x08	; 8
 816:	69 f5       	brne	.+90     	; 0x872 <__stack+0x13>
 818:	15 c0       	rjmp	.+42     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
					{
						
						for(Local_u8PassByteCheckCounter=0;Local_u8PassByteCheckCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8PassByteCheckCounter++)
						{
							
							if(local_u8EnteredLocalUserPass[Local_u8PassByteCheckCounter]==local_u8StoredLocalUserPass[Local_u8PassByteCheckCounter])
 81a:	82 2f       	mov	r24, r18
 81c:	90 e0       	ldi	r25, 0x00	; 0
 81e:	e1 e1       	ldi	r30, 0x11	; 17
 820:	f0 e0       	ldi	r31, 0x00	; 0
 822:	ec 0f       	add	r30, r28
 824:	fd 1f       	adc	r31, r29
 826:	e8 0f       	add	r30, r24
 828:	f9 1f       	adc	r31, r25
 82a:	30 81       	ld	r19, Z
 82c:	e1 e0       	ldi	r30, 0x01	; 1
 82e:	f0 e0       	ldi	r31, 0x00	; 0
 830:	ec 0f       	add	r30, r28
 832:	fd 1f       	adc	r31, r29
 834:	e8 0f       	add	r30, r24
 836:	f9 1f       	adc	r31, r25
 838:	80 81       	ld	r24, Z
 83a:	38 13       	cpse	r19, r24
 83c:	01 c0       	rjmp	.+2      	; 0x840 <__DATA_REGION_LENGTH__+0x40>
							{
								Local_u8PassByteCheck++;
 83e:	4f 5f       	subi	r20, 0xFF	; 255
					
					//if the user name is right now we can check pass
					if(Local_u8NameByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
					{
						
						for(Local_u8PassByteCheckCounter=0;Local_u8PassByteCheckCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8PassByteCheckCounter++)
 840:	2f 5f       	subi	r18, 0xFF	; 255
 842:	02 c0       	rjmp	.+4      	; 0x848 <__DATA_REGION_LENGTH__+0x48>
 844:	40 e0       	ldi	r20, 0x00	; 0
 846:	20 e0       	ldi	r18, 0x00	; 0
 848:	28 30       	cpi	r18, 0x08	; 8
 84a:	38 f3       	brcs	.-50     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
							}
									
						}
						
						//if the pass right now we difine the user type(admin or user)
						if(Local_u8PassByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
 84c:	48 30       	cpi	r20, 0x08	; 8
 84e:	79 f4       	brne	.+30     	; 0x86e <__stack+0xf>
							

							LocaL_u8RightEntery=1;
							
							//admin user name is saved at loc 240(page 30)
							if(Local_u8PagesCounter==HOME_MAX_NUM_OF_LOCAL_USER)
 850:	2f e0       	ldi	r18, 0x0F	; 15
 852:	d2 12       	cpse	r13, r18
 854:	06 c0       	rjmp	.+12     	; 0x862 <__stack+0x3>
							{
								*copy_pu8UserType=HOME_ADMIN;	
 856:	81 e0       	ldi	r24, 0x01	; 1
 858:	f7 01       	movw	r30, r14
 85a:	80 83       	st	Z, r24
						//if the pass right now we difine the user type(admin or user)
						if(Local_u8PassByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
						{
							

							LocaL_u8RightEntery=1;
 85c:	88 24       	eor	r8, r8
 85e:	83 94       	inc	r8
 860:	0e c0       	rjmp	.+28     	; 0x87e <__stack+0x1f>
							{
								*copy_pu8UserType=HOME_ADMIN;	
							}
							else
							{
								*copy_pu8UserType=HOME_USER;
 862:	82 e0       	ldi	r24, 0x02	; 2
 864:	f7 01       	movw	r30, r14
 866:	80 83       	st	Z, r24
						//if the pass right now we difine the user type(admin or user)
						if(Local_u8PassByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
						{
							

							LocaL_u8RightEntery=1;
 868:	88 24       	eor	r8, r8
 86a:	83 94       	inc	r8
 86c:	08 c0       	rjmp	.+16     	; 0x87e <__stack+0x1f>
							break;
							
						}
						else
						{
							Local_u8WrongUserPassCounter++;
 86e:	b3 94       	inc	r11
 870:	01 c0       	rjmp	.+2      	; 0x874 <__stack+0x15>
						}
							
					}
					else
					{
						Local_u8WrongUserNameCounter++;
 872:	c3 94       	inc	r12
				
				//get user name and pass from KPD & LCD
				HOME_voidLocalGetUserAndPass(&local_u8EnteredLocalUserName,&local_u8EnteredLocalUserPass);
				
				//loop on all reserved local eeprom locations
				for(Local_u8PagesCounter=0;Local_u8PagesCounter<(HOME_MAX_NUM_OF_LOCAL_USER+1);Local_u8PagesCounter++)
 874:	d3 94       	inc	r13
 876:	ff e0       	ldi	r31, 0x0F	; 15
 878:	fd 15       	cp	r31, r13
 87a:	08 f0       	brcs	.+2      	; 0x87e <__stack+0x1f>
 87c:	9d cf       	rjmp	.-198    	; 0x7b8 <HOME_voidCheckUserAndPass+0x50>
					}
				
				}
			
				//is the entery was right dis on LCD
				if(LocaL_u8RightEntery==1)
 87e:	21 e0       	ldi	r18, 0x01	; 1
 880:	82 12       	cpse	r8, r18
 882:	14 c0       	rjmp	.+40     	; 0x8ac <__stack+0x4d>
				{
					LCD_voidClear();
 884:	0e 94 11 03 	call	0x622	; 0x622 <LCD_voidClear>
					LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
 888:	60 e0       	ldi	r22, 0x00	; 0
 88a:	81 e0       	ldi	r24, 0x01	; 1
 88c:	0e 94 15 03 	call	0x62a	; 0x62a <LCD_voidGoTOSpecificPosition>
					LCD_voidDisplayString("ACCESS PERMITED");
 890:	80 ec       	ldi	r24, 0xC0	; 192
 892:	90 e0       	ldi	r25, 0x00	; 0
 894:	0e 94 9f 02 	call	0x53e	; 0x53e <LCD_voidDisplayString>
 898:	8f ef       	ldi	r24, 0xFF	; 255
 89a:	99 e6       	ldi	r25, 0x69	; 105
 89c:	e8 e1       	ldi	r30, 0x18	; 24
 89e:	81 50       	subi	r24, 0x01	; 1
 8a0:	90 40       	sbci	r25, 0x00	; 0
 8a2:	e0 40       	sbci	r30, 0x00	; 0
 8a4:	e1 f7       	brne	.-8      	; 0x89e <__stack+0x3f>
 8a6:	00 c0       	rjmp	.+0      	; 0x8a8 <__stack+0x49>
 8a8:	00 00       	nop
 8aa:	5c c0       	rjmp	.+184    	; 0x964 <__stack+0x105>
					_delay_ms(500);
					break;
				}
				//is the entery was wrong dis on LCD and hint the reason
				else if(Local_u8WrongUserNameCounter==16)
 8ac:	f0 e1       	ldi	r31, 0x10	; 16
 8ae:	cf 12       	cpse	r12, r31
 8b0:	27 c0       	rjmp	.+78     	; 0x900 <__stack+0xa1>
				{
					LCD_voidClear();
 8b2:	0e 94 11 03 	call	0x622	; 0x622 <LCD_voidClear>
					LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
 8b6:	60 e0       	ldi	r22, 0x00	; 0
 8b8:	81 e0       	ldi	r24, 0x01	; 1
 8ba:	0e 94 15 03 	call	0x62a	; 0x62a <LCD_voidGoTOSpecificPosition>
					LCD_voidDisplayString("ACCESS DENIED");
 8be:	80 ed       	ldi	r24, 0xD0	; 208
 8c0:	90 e0       	ldi	r25, 0x00	; 0
 8c2:	0e 94 9f 02 	call	0x53e	; 0x53e <LCD_voidDisplayString>
					LCD_voidGoTOSpecificPosition(LCD_LINE_TWO,0);
 8c6:	60 e0       	ldi	r22, 0x00	; 0
 8c8:	82 e0       	ldi	r24, 0x02	; 2
 8ca:	0e 94 15 03 	call	0x62a	; 0x62a <LCD_voidGoTOSpecificPosition>
					LCD_voidDisplayString("Wrong User Name");
 8ce:	8e ed       	ldi	r24, 0xDE	; 222
 8d0:	90 e0       	ldi	r25, 0x00	; 0
 8d2:	0e 94 9f 02 	call	0x53e	; 0x53e <LCD_voidDisplayString>
					//dont display this message on trial 3
					if(Local_u8TrailsCounter!=(HOME_MAX_NUMBER_OF_TRIALS-1))
 8d6:	22 e0       	ldi	r18, 0x02	; 2
 8d8:	a2 16       	cp	r10, r18
 8da:	d1 f1       	breq	.+116    	; 0x950 <__stack+0xf1>
 8dc:	8f ef       	ldi	r24, 0xFF	; 255
 8de:	93 ed       	ldi	r25, 0xD3	; 211
 8e0:	e0 e3       	ldi	r30, 0x30	; 48
 8e2:	81 50       	subi	r24, 0x01	; 1
 8e4:	90 40       	sbci	r25, 0x00	; 0
 8e6:	e0 40       	sbci	r30, 0x00	; 0
 8e8:	e1 f7       	brne	.-8      	; 0x8e2 <__stack+0x83>
 8ea:	00 c0       	rjmp	.+0      	; 0x8ec <__stack+0x8d>
 8ec:	00 00       	nop
					{	
						_delay_ms(1000);
						LCD_voidGoTOSpecificPosition(LCD_LINE_TWO,0);
 8ee:	60 e0       	ldi	r22, 0x00	; 0
 8f0:	82 e0       	ldi	r24, 0x02	; 2
 8f2:	0e 94 15 03 	call	0x62a	; 0x62a <LCD_voidGoTOSpecificPosition>
						LCD_voidDisplayString("Please Try Again");
 8f6:	8e ee       	ldi	r24, 0xEE	; 238
 8f8:	90 e0       	ldi	r25, 0x00	; 0
 8fa:	0e 94 9f 02 	call	0x53e	; 0x53e <LCD_voidDisplayString>
 8fe:	28 c0       	rjmp	.+80     	; 0x950 <__stack+0xf1>
					}
				}
				//is the entery was wrong dis on LCD and hint the reason
				else if(Local_u8WrongUserPassCounter!=0)
 900:	bb 20       	and	r11, r11
 902:	31 f1       	breq	.+76     	; 0x950 <__stack+0xf1>
				{
					LCD_voidClear();
 904:	0e 94 11 03 	call	0x622	; 0x622 <LCD_voidClear>
					LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
 908:	60 e0       	ldi	r22, 0x00	; 0
 90a:	81 e0       	ldi	r24, 0x01	; 1
 90c:	0e 94 15 03 	call	0x62a	; 0x62a <LCD_voidGoTOSpecificPosition>
					LCD_voidDisplayString("ACCESS DENIED");
 910:	80 ed       	ldi	r24, 0xD0	; 208
 912:	90 e0       	ldi	r25, 0x00	; 0
 914:	0e 94 9f 02 	call	0x53e	; 0x53e <LCD_voidDisplayString>
					LCD_voidGoTOSpecificPosition(LCD_LINE_TWO,0);
 918:	60 e0       	ldi	r22, 0x00	; 0
 91a:	82 e0       	ldi	r24, 0x02	; 2
 91c:	0e 94 15 03 	call	0x62a	; 0x62a <LCD_voidGoTOSpecificPosition>
					LCD_voidDisplayString("Wrong Password");
 920:	8f ef       	ldi	r24, 0xFF	; 255
 922:	90 e0       	ldi	r25, 0x00	; 0
 924:	0e 94 9f 02 	call	0x53e	; 0x53e <LCD_voidDisplayString>
					
					//dont display this message on trial 3
					if(Local_u8TrailsCounter!=(HOME_MAX_NUMBER_OF_TRIALS-1))
 928:	f2 e0       	ldi	r31, 0x02	; 2
 92a:	af 16       	cp	r10, r31
 92c:	89 f0       	breq	.+34     	; 0x950 <__stack+0xf1>
 92e:	2f ef       	ldi	r18, 0xFF	; 255
 930:	83 ed       	ldi	r24, 0xD3	; 211
 932:	90 e3       	ldi	r25, 0x30	; 48
 934:	21 50       	subi	r18, 0x01	; 1
 936:	80 40       	sbci	r24, 0x00	; 0
 938:	90 40       	sbci	r25, 0x00	; 0
 93a:	e1 f7       	brne	.-8      	; 0x934 <__stack+0xd5>
 93c:	00 c0       	rjmp	.+0      	; 0x93e <__stack+0xdf>
 93e:	00 00       	nop
					{
						_delay_ms(1000);
						LCD_voidGoTOSpecificPosition(LCD_LINE_TWO,0);
 940:	60 e0       	ldi	r22, 0x00	; 0
 942:	82 e0       	ldi	r24, 0x02	; 2
 944:	0e 94 15 03 	call	0x62a	; 0x62a <LCD_voidGoTOSpecificPosition>
						LCD_voidDisplayString("Please Try Again");
 948:	8e ee       	ldi	r24, 0xEE	; 238
 94a:	90 e0       	ldi	r25, 0x00	; 0
 94c:	0e 94 9f 02 	call	0x53e	; 0x53e <LCD_voidDisplayString>
			u8 local_u8StoredLocalUserName[HOME_USER_NAME_AND_PASS_MAX_LENGTh],local_u8StoredLocalUserPass[HOME_USER_NAME_AND_PASS_MAX_LENGTh];
			u8 Local_u8TrailsCounter,Local_u8NameByteCheckCounter,Local_u8NameByteCheck=0,Local_u8PassByteCheckCounter,Local_u8PassByteCheck=0,
			Local_u8FireAnAlarm=0,Local_u8PagesCounter,Local_u8WrongUserNameCounter=0,Local_u8WrongUserPassCounter=0,Local_u8LocalUserNameLocation,LocaL_u8RightEntery=0;
			
			//every user have max of 3 trials for user name and pass
			for(Local_u8TrailsCounter=0;Local_u8TrailsCounter<HOME_MAX_NUMBER_OF_TRIALS;Local_u8TrailsCounter++)
 950:	a3 94       	inc	r10
 952:	04 c0       	rjmp	.+8      	; 0x95c <__stack+0xfd>
 954:	7b 01       	movw	r14, r22
 956:	81 2c       	mov	r8, r1
 958:	91 2c       	mov	r9, r1
 95a:	a1 2c       	mov	r10, r1
 95c:	e2 e0       	ldi	r30, 0x02	; 2
 95e:	ea 15       	cp	r30, r10
 960:	08 f0       	brcs	.+2      	; 0x964 <__stack+0x105>
 962:	1e cf       	rjmp	.-452    	; 0x7a0 <HOME_voidCheckUserAndPass+0x38>
				}
				
			
			}
			//check the alarm after the 3rd trial
			if((HOME_MAX_NUMBER_OF_TRIALS==Local_u8FireAnAlarm)&&(LocaL_u8RightEntery==0))
 964:	f3 e0       	ldi	r31, 0x03	; 3
 966:	9f 12       	cpse	r9, r31
 968:	05 c0       	rjmp	.+10     	; 0x974 <__stack+0x115>
 96a:	81 10       	cpse	r8, r1
 96c:	03 c0       	rjmp	.+6      	; 0x974 <__stack+0x115>
			{
				*copy_pu8UserType=HOME_USER_FAILED;
 96e:	83 e0       	ldi	r24, 0x03	; 3
 970:	f7 01       	movw	r30, r14
 972:	80 83       	st	Z, r24
	}
	else
	{
		//error massage
	}
 974:	a0 96       	adiw	r28, 0x20	; 32
 976:	0f b6       	in	r0, 0x3f	; 63
 978:	f8 94       	cli
 97a:	de bf       	out	0x3e, r29	; 62
 97c:	0f be       	out	0x3f, r0	; 63
 97e:	cd bf       	out	0x3d, r28	; 61
 980:	df 91       	pop	r29
 982:	cf 91       	pop	r28
 984:	1f 91       	pop	r17
 986:	0f 91       	pop	r16
 988:	ff 90       	pop	r15
 98a:	ef 90       	pop	r14
 98c:	df 90       	pop	r13
 98e:	cf 90       	pop	r12
 990:	bf 90       	pop	r11
 992:	af 90       	pop	r10
 994:	9f 90       	pop	r9
 996:	8f 90       	pop	r8
 998:	08 95       	ret

0000099a <main>:
void HOME_voidLocalGetUserAndPass(u8* copy_pu8LocalUserName,u8* copy_pu8LocalUserPass);
void HOME_voidCheckUserAndPass(u8 copy_u8AccessType,u8* copy_pu8UserType );


int main(void)
{
 99a:	cf 93       	push	r28
 99c:	df 93       	push	r29
 99e:	cd b7       	in	r28, 0x3d	; 61
 9a0:	de b7       	in	r29, 0x3e	; 62
 9a2:	a1 97       	sbiw	r28, 0x21	; 33
 9a4:	0f b6       	in	r0, 0x3f	; 63
 9a6:	f8 94       	cli
 9a8:	de bf       	out	0x3e, r29	; 62
 9aa:	0f be       	out	0x3f, r0	; 63
 9ac:	cd bf       	out	0x3d, r28	; 61

	
	
    HOME_voidInit();
 9ae:	0e 94 30 03 	call	0x660	; 0x660 <HOME_voidInit>
	
	
	
	LCD_voidDisplayString((u8*)"Welcome Home");
 9b2:	8e e0       	ldi	r24, 0x0E	; 14
 9b4:	91 e0       	ldi	r25, 0x01	; 1
 9b6:	0e 94 9f 02 	call	0x53e	; 0x53e <LCD_voidDisplayString>
 9ba:	2f ef       	ldi	r18, 0xFF	; 255
 9bc:	89 e6       	ldi	r24, 0x69	; 105
 9be:	98 e1       	ldi	r25, 0x18	; 24
 9c0:	21 50       	subi	r18, 0x01	; 1
 9c2:	80 40       	sbci	r24, 0x00	; 0
 9c4:	90 40       	sbci	r25, 0x00	; 0
 9c6:	e1 f7       	brne	.-8      	; 0x9c0 <main+0x26>
 9c8:	00 c0       	rjmp	.+0      	; 0x9ca <main+0x30>
 9ca:	00 00       	nop
	_delay_ms(500);
	LCD_voidClear();
 9cc:	0e 94 11 03 	call	0x622	; 0x622 <LCD_voidClear>
	
	u8 testusername[8]={"11111111"};
 9d0:	88 e0       	ldi	r24, 0x08	; 8
 9d2:	e0 e7       	ldi	r30, 0x70	; 112
 9d4:	f0 e0       	ldi	r31, 0x00	; 0
 9d6:	de 01       	movw	r26, r28
 9d8:	11 96       	adiw	r26, 0x01	; 1
 9da:	01 90       	ld	r0, Z+
 9dc:	0d 92       	st	X+, r0
 9de:	8a 95       	dec	r24
 9e0:	e1 f7       	brne	.-8      	; 0x9da <main+0x40>
	u8 testuserpass[8]={"22222222"};
 9e2:	88 e0       	ldi	r24, 0x08	; 8
 9e4:	e9 e7       	ldi	r30, 0x79	; 121
 9e6:	f0 e0       	ldi	r31, 0x00	; 0
 9e8:	de 01       	movw	r26, r28
 9ea:	19 96       	adiw	r26, 0x09	; 9
 9ec:	01 90       	ld	r0, Z+
 9ee:	0d 92       	st	X+, r0
 9f0:	8a 95       	dec	r24
 9f2:	e1 f7       	brne	.-8      	; 0x9ec <main+0x52>
	u8 testadminname[8]={"99999999"};
 9f4:	88 e0       	ldi	r24, 0x08	; 8
 9f6:	e2 e8       	ldi	r30, 0x82	; 130
 9f8:	f0 e0       	ldi	r31, 0x00	; 0
 9fa:	de 01       	movw	r26, r28
 9fc:	51 96       	adiw	r26, 0x11	; 17
 9fe:	01 90       	ld	r0, Z+
 a00:	0d 92       	st	X+, r0
 a02:	8a 95       	dec	r24
 a04:	e1 f7       	brne	.-8      	; 0x9fe <main+0x64>
	u8 testadminpass[8]={"99999999"};
 a06:	88 e0       	ldi	r24, 0x08	; 8
 a08:	e2 e8       	ldi	r30, 0x82	; 130
 a0a:	f0 e0       	ldi	r31, 0x00	; 0
 a0c:	de 01       	movw	r26, r28
 a0e:	59 96       	adiw	r26, 0x19	; 25
 a10:	01 90       	ld	r0, Z+
 a12:	0d 92       	st	X+, r0
 a14:	8a 95       	dec	r24
 a16:	e1 f7       	brne	.-8      	; 0xa10 <main+0x76>
	u8 usertype;	
	
	EEPROM_voidWritePage(16,&testusername[0]);
 a18:	be 01       	movw	r22, r28
 a1a:	6f 5f       	subi	r22, 0xFF	; 255
 a1c:	7f 4f       	sbci	r23, 0xFF	; 255
 a1e:	80 e1       	ldi	r24, 0x10	; 16
 a20:	90 e0       	ldi	r25, 0x00	; 0
 a22:	0e 94 47 00 	call	0x8e	; 0x8e <EEPROM_voidWritePage>
	EEPROM_voidWritePage(24,&testuserpass[0]);
 a26:	be 01       	movw	r22, r28
 a28:	67 5f       	subi	r22, 0xF7	; 247
 a2a:	7f 4f       	sbci	r23, 0xFF	; 255
 a2c:	88 e1       	ldi	r24, 0x18	; 24
 a2e:	90 e0       	ldi	r25, 0x00	; 0
 a30:	0e 94 47 00 	call	0x8e	; 0x8e <EEPROM_voidWritePage>
	EEPROM_voidWritePage(240,&testadminname[0]);
 a34:	be 01       	movw	r22, r28
 a36:	6f 5e       	subi	r22, 0xEF	; 239
 a38:	7f 4f       	sbci	r23, 0xFF	; 255
 a3a:	80 ef       	ldi	r24, 0xF0	; 240
 a3c:	90 e0       	ldi	r25, 0x00	; 0
 a3e:	0e 94 47 00 	call	0x8e	; 0x8e <EEPROM_voidWritePage>
	EEPROM_voidWritePage(248,&testadminpass[0]);
 a42:	be 01       	movw	r22, r28
 a44:	67 5e       	subi	r22, 0xE7	; 231
 a46:	7f 4f       	sbci	r23, 0xFF	; 255
 a48:	88 ef       	ldi	r24, 0xF8	; 248
 a4a:	90 e0       	ldi	r25, 0x00	; 0
 a4c:	0e 94 47 00 	call	0x8e	; 0x8e <EEPROM_voidWritePage>
	
	HOME_voidCheckUserAndPass(HOME_LOCAL_ACCESS,&usertype);
 a50:	be 01       	movw	r22, r28
 a52:	6f 5d       	subi	r22, 0xDF	; 223
 a54:	7f 4f       	sbci	r23, 0xFF	; 255
 a56:	81 e0       	ldi	r24, 0x01	; 1
 a58:	0e 94 b4 03 	call	0x768	; 0x768 <HOME_voidCheckUserAndPass>
	LCD_voidClear();
 a5c:	0e 94 11 03 	call	0x622	; 0x622 <LCD_voidClear>
	LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
 a60:	60 e0       	ldi	r22, 0x00	; 0
 a62:	81 e0       	ldi	r24, 0x01	; 1
 a64:	0e 94 15 03 	call	0x62a	; 0x62a <LCD_voidGoTOSpecificPosition>
	LCD_voidDisplayNumber(usertype);
 a68:	89 a1       	ldd	r24, Y+33	; 0x21
 a6a:	0e 94 be 02 	call	0x57c	; 0x57c <LCD_voidDisplayNumber>
 a6e:	2f ef       	ldi	r18, 0xFF	; 255
 a70:	83 ed       	ldi	r24, 0xD3	; 211
 a72:	90 e3       	ldi	r25, 0x30	; 48
 a74:	21 50       	subi	r18, 0x01	; 1
 a76:	80 40       	sbci	r24, 0x00	; 0
 a78:	90 40       	sbci	r25, 0x00	; 0
 a7a:	e1 f7       	brne	.-8      	; 0xa74 <main+0xda>
 a7c:	00 c0       	rjmp	.+0      	; 0xa7e <main+0xe4>
 a7e:	00 00       	nop
 a80:	ff cf       	rjmp	.-2      	; 0xa80 <main+0xe6>

00000a82 <DIO_voidSetPinDirection>:
		break;
		case DIO_PORTC:
		TOG_BIT(PORTC_REG,copy_u8PinId);
		break;
		case DIO_PORTD:
		TOG_BIT(PORTD_REG,copy_u8PinId);
 a82:	81 30       	cpi	r24, 0x01	; 1
 a84:	19 f1       	breq	.+70     	; 0xacc <DIO_voidSetPinDirection+0x4a>
 a86:	30 f0       	brcs	.+12     	; 0xa94 <DIO_voidSetPinDirection+0x12>
 a88:	82 30       	cpi	r24, 0x02	; 2
 a8a:	e1 f1       	breq	.+120    	; 0xb04 <DIO_voidSetPinDirection+0x82>
 a8c:	83 30       	cpi	r24, 0x03	; 3
 a8e:	09 f4       	brne	.+2      	; 0xa92 <DIO_voidSetPinDirection+0x10>
 a90:	54 c0       	rjmp	.+168    	; 0xb3a <DIO_voidSetPinDirection+0xb8>
 a92:	08 95       	ret
 a94:	44 23       	and	r20, r20
 a96:	71 f0       	breq	.+28     	; 0xab4 <DIO_voidSetPinDirection+0x32>
 a98:	41 30       	cpi	r20, 0x01	; 1
 a9a:	09 f0       	breq	.+2      	; 0xa9e <DIO_voidSetPinDirection+0x1c>
 a9c:	68 c0       	rjmp	.+208    	; 0xb6e <DIO_voidSetPinDirection+0xec>
 a9e:	2a b3       	in	r18, 0x1a	; 26
 aa0:	81 e0       	ldi	r24, 0x01	; 1
 aa2:	90 e0       	ldi	r25, 0x00	; 0
 aa4:	02 c0       	rjmp	.+4      	; 0xaaa <DIO_voidSetPinDirection+0x28>
 aa6:	88 0f       	add	r24, r24
 aa8:	99 1f       	adc	r25, r25
 aaa:	6a 95       	dec	r22
 aac:	e2 f7       	brpl	.-8      	; 0xaa6 <DIO_voidSetPinDirection+0x24>
 aae:	82 2b       	or	r24, r18
 ab0:	8a bb       	out	0x1a, r24	; 26
 ab2:	08 95       	ret
 ab4:	2a b3       	in	r18, 0x1a	; 26
 ab6:	81 e0       	ldi	r24, 0x01	; 1
 ab8:	90 e0       	ldi	r25, 0x00	; 0
 aba:	02 c0       	rjmp	.+4      	; 0xac0 <DIO_voidSetPinDirection+0x3e>
 abc:	88 0f       	add	r24, r24
 abe:	99 1f       	adc	r25, r25
 ac0:	6a 95       	dec	r22
 ac2:	e2 f7       	brpl	.-8      	; 0xabc <DIO_voidSetPinDirection+0x3a>
 ac4:	80 95       	com	r24
 ac6:	82 23       	and	r24, r18
 ac8:	8a bb       	out	0x1a, r24	; 26
 aca:	08 95       	ret
 acc:	44 23       	and	r20, r20
 ace:	71 f0       	breq	.+28     	; 0xaec <DIO_voidSetPinDirection+0x6a>
 ad0:	41 30       	cpi	r20, 0x01	; 1
 ad2:	09 f0       	breq	.+2      	; 0xad6 <DIO_voidSetPinDirection+0x54>
 ad4:	4c c0       	rjmp	.+152    	; 0xb6e <DIO_voidSetPinDirection+0xec>
 ad6:	27 b3       	in	r18, 0x17	; 23
 ad8:	81 e0       	ldi	r24, 0x01	; 1
 ada:	90 e0       	ldi	r25, 0x00	; 0
 adc:	02 c0       	rjmp	.+4      	; 0xae2 <DIO_voidSetPinDirection+0x60>
 ade:	88 0f       	add	r24, r24
 ae0:	99 1f       	adc	r25, r25
 ae2:	6a 95       	dec	r22
 ae4:	e2 f7       	brpl	.-8      	; 0xade <DIO_voidSetPinDirection+0x5c>
 ae6:	82 2b       	or	r24, r18
 ae8:	87 bb       	out	0x17, r24	; 23
 aea:	08 95       	ret
 aec:	27 b3       	in	r18, 0x17	; 23
 aee:	81 e0       	ldi	r24, 0x01	; 1
 af0:	90 e0       	ldi	r25, 0x00	; 0
 af2:	02 c0       	rjmp	.+4      	; 0xaf8 <DIO_voidSetPinDirection+0x76>
 af4:	88 0f       	add	r24, r24
 af6:	99 1f       	adc	r25, r25
 af8:	6a 95       	dec	r22
 afa:	e2 f7       	brpl	.-8      	; 0xaf4 <DIO_voidSetPinDirection+0x72>
 afc:	80 95       	com	r24
 afe:	82 23       	and	r24, r18
 b00:	87 bb       	out	0x17, r24	; 23
 b02:	08 95       	ret
 b04:	44 23       	and	r20, r20
 b06:	69 f0       	breq	.+26     	; 0xb22 <DIO_voidSetPinDirection+0xa0>
 b08:	41 30       	cpi	r20, 0x01	; 1
 b0a:	89 f5       	brne	.+98     	; 0xb6e <DIO_voidSetPinDirection+0xec>
 b0c:	24 b3       	in	r18, 0x14	; 20
 b0e:	81 e0       	ldi	r24, 0x01	; 1
 b10:	90 e0       	ldi	r25, 0x00	; 0
 b12:	02 c0       	rjmp	.+4      	; 0xb18 <DIO_voidSetPinDirection+0x96>
 b14:	88 0f       	add	r24, r24
 b16:	99 1f       	adc	r25, r25
 b18:	6a 95       	dec	r22
 b1a:	e2 f7       	brpl	.-8      	; 0xb14 <DIO_voidSetPinDirection+0x92>
 b1c:	82 2b       	or	r24, r18
 b1e:	84 bb       	out	0x14, r24	; 20
 b20:	08 95       	ret
 b22:	24 b3       	in	r18, 0x14	; 20
 b24:	81 e0       	ldi	r24, 0x01	; 1
 b26:	90 e0       	ldi	r25, 0x00	; 0
 b28:	02 c0       	rjmp	.+4      	; 0xb2e <DIO_voidSetPinDirection+0xac>
 b2a:	88 0f       	add	r24, r24
 b2c:	99 1f       	adc	r25, r25
 b2e:	6a 95       	dec	r22
 b30:	e2 f7       	brpl	.-8      	; 0xb2a <DIO_voidSetPinDirection+0xa8>
 b32:	80 95       	com	r24
 b34:	82 23       	and	r24, r18
 b36:	84 bb       	out	0x14, r24	; 20
 b38:	08 95       	ret
 b3a:	44 23       	and	r20, r20
 b3c:	69 f0       	breq	.+26     	; 0xb58 <DIO_voidSetPinDirection+0xd6>
 b3e:	41 30       	cpi	r20, 0x01	; 1
 b40:	b1 f4       	brne	.+44     	; 0xb6e <DIO_voidSetPinDirection+0xec>
 b42:	21 b3       	in	r18, 0x11	; 17
 b44:	81 e0       	ldi	r24, 0x01	; 1
 b46:	90 e0       	ldi	r25, 0x00	; 0
 b48:	02 c0       	rjmp	.+4      	; 0xb4e <DIO_voidSetPinDirection+0xcc>
 b4a:	88 0f       	add	r24, r24
 b4c:	99 1f       	adc	r25, r25
 b4e:	6a 95       	dec	r22
 b50:	e2 f7       	brpl	.-8      	; 0xb4a <DIO_voidSetPinDirection+0xc8>
 b52:	82 2b       	or	r24, r18
 b54:	81 bb       	out	0x11, r24	; 17
 b56:	08 95       	ret
 b58:	21 b3       	in	r18, 0x11	; 17
 b5a:	81 e0       	ldi	r24, 0x01	; 1
 b5c:	90 e0       	ldi	r25, 0x00	; 0
 b5e:	02 c0       	rjmp	.+4      	; 0xb64 <DIO_voidSetPinDirection+0xe2>
 b60:	88 0f       	add	r24, r24
 b62:	99 1f       	adc	r25, r25
 b64:	6a 95       	dec	r22
 b66:	e2 f7       	brpl	.-8      	; 0xb60 <DIO_voidSetPinDirection+0xde>
 b68:	80 95       	com	r24
 b6a:	82 23       	and	r24, r18
 b6c:	81 bb       	out	0x11, r24	; 17
 b6e:	08 95       	ret

00000b70 <DIO_voidSetPinValue>:
 b70:	84 30       	cpi	r24, 0x04	; 4
 b72:	08 f0       	brcs	.+2      	; 0xb76 <DIO_voidSetPinValue+0x6>
 b74:	7c c0       	rjmp	.+248    	; 0xc6e <DIO_voidSetPinValue+0xfe>
 b76:	68 30       	cpi	r22, 0x08	; 8
 b78:	08 f0       	brcs	.+2      	; 0xb7c <DIO_voidSetPinValue+0xc>
 b7a:	79 c0       	rjmp	.+242    	; 0xc6e <DIO_voidSetPinValue+0xfe>
 b7c:	43 30       	cpi	r20, 0x03	; 3
 b7e:	08 f0       	brcs	.+2      	; 0xb82 <DIO_voidSetPinValue+0x12>
 b80:	76 c0       	rjmp	.+236    	; 0xc6e <DIO_voidSetPinValue+0xfe>
 b82:	81 30       	cpi	r24, 0x01	; 1
 b84:	19 f1       	breq	.+70     	; 0xbcc <DIO_voidSetPinValue+0x5c>
 b86:	30 f0       	brcs	.+12     	; 0xb94 <DIO_voidSetPinValue+0x24>
 b88:	82 30       	cpi	r24, 0x02	; 2
 b8a:	e1 f1       	breq	.+120    	; 0xc04 <DIO_voidSetPinValue+0x94>
 b8c:	83 30       	cpi	r24, 0x03	; 3
 b8e:	09 f4       	brne	.+2      	; 0xb92 <DIO_voidSetPinValue+0x22>
 b90:	54 c0       	rjmp	.+168    	; 0xc3a <DIO_voidSetPinValue+0xca>
 b92:	08 95       	ret
 b94:	44 23       	and	r20, r20
 b96:	71 f0       	breq	.+28     	; 0xbb4 <DIO_voidSetPinValue+0x44>
 b98:	41 30       	cpi	r20, 0x01	; 1
 b9a:	09 f0       	breq	.+2      	; 0xb9e <DIO_voidSetPinValue+0x2e>
 b9c:	68 c0       	rjmp	.+208    	; 0xc6e <DIO_voidSetPinValue+0xfe>
 b9e:	2b b3       	in	r18, 0x1b	; 27
 ba0:	81 e0       	ldi	r24, 0x01	; 1
 ba2:	90 e0       	ldi	r25, 0x00	; 0
 ba4:	02 c0       	rjmp	.+4      	; 0xbaa <DIO_voidSetPinValue+0x3a>
 ba6:	88 0f       	add	r24, r24
 ba8:	99 1f       	adc	r25, r25
 baa:	6a 95       	dec	r22
 bac:	e2 f7       	brpl	.-8      	; 0xba6 <DIO_voidSetPinValue+0x36>
 bae:	82 2b       	or	r24, r18
 bb0:	8b bb       	out	0x1b, r24	; 27
 bb2:	08 95       	ret
 bb4:	2b b3       	in	r18, 0x1b	; 27
 bb6:	81 e0       	ldi	r24, 0x01	; 1
 bb8:	90 e0       	ldi	r25, 0x00	; 0
 bba:	02 c0       	rjmp	.+4      	; 0xbc0 <DIO_voidSetPinValue+0x50>
 bbc:	88 0f       	add	r24, r24
 bbe:	99 1f       	adc	r25, r25
 bc0:	6a 95       	dec	r22
 bc2:	e2 f7       	brpl	.-8      	; 0xbbc <DIO_voidSetPinValue+0x4c>
 bc4:	80 95       	com	r24
 bc6:	82 23       	and	r24, r18
 bc8:	8b bb       	out	0x1b, r24	; 27
 bca:	08 95       	ret
 bcc:	44 23       	and	r20, r20
 bce:	71 f0       	breq	.+28     	; 0xbec <DIO_voidSetPinValue+0x7c>
 bd0:	41 30       	cpi	r20, 0x01	; 1
 bd2:	09 f0       	breq	.+2      	; 0xbd6 <DIO_voidSetPinValue+0x66>
 bd4:	4c c0       	rjmp	.+152    	; 0xc6e <DIO_voidSetPinValue+0xfe>
 bd6:	28 b3       	in	r18, 0x18	; 24
 bd8:	81 e0       	ldi	r24, 0x01	; 1
 bda:	90 e0       	ldi	r25, 0x00	; 0
 bdc:	02 c0       	rjmp	.+4      	; 0xbe2 <DIO_voidSetPinValue+0x72>
 bde:	88 0f       	add	r24, r24
 be0:	99 1f       	adc	r25, r25
 be2:	6a 95       	dec	r22
 be4:	e2 f7       	brpl	.-8      	; 0xbde <DIO_voidSetPinValue+0x6e>
 be6:	82 2b       	or	r24, r18
 be8:	88 bb       	out	0x18, r24	; 24
 bea:	08 95       	ret
 bec:	28 b3       	in	r18, 0x18	; 24
 bee:	81 e0       	ldi	r24, 0x01	; 1
 bf0:	90 e0       	ldi	r25, 0x00	; 0
 bf2:	02 c0       	rjmp	.+4      	; 0xbf8 <DIO_voidSetPinValue+0x88>
 bf4:	88 0f       	add	r24, r24
 bf6:	99 1f       	adc	r25, r25
 bf8:	6a 95       	dec	r22
 bfa:	e2 f7       	brpl	.-8      	; 0xbf4 <DIO_voidSetPinValue+0x84>
 bfc:	80 95       	com	r24
 bfe:	82 23       	and	r24, r18
 c00:	88 bb       	out	0x18, r24	; 24
 c02:	08 95       	ret
 c04:	44 23       	and	r20, r20
 c06:	69 f0       	breq	.+26     	; 0xc22 <DIO_voidSetPinValue+0xb2>
 c08:	41 30       	cpi	r20, 0x01	; 1
 c0a:	89 f5       	brne	.+98     	; 0xc6e <DIO_voidSetPinValue+0xfe>
 c0c:	25 b3       	in	r18, 0x15	; 21
 c0e:	81 e0       	ldi	r24, 0x01	; 1
 c10:	90 e0       	ldi	r25, 0x00	; 0
 c12:	02 c0       	rjmp	.+4      	; 0xc18 <DIO_voidSetPinValue+0xa8>
 c14:	88 0f       	add	r24, r24
 c16:	99 1f       	adc	r25, r25
 c18:	6a 95       	dec	r22
 c1a:	e2 f7       	brpl	.-8      	; 0xc14 <DIO_voidSetPinValue+0xa4>
 c1c:	82 2b       	or	r24, r18
 c1e:	85 bb       	out	0x15, r24	; 21
 c20:	08 95       	ret
 c22:	25 b3       	in	r18, 0x15	; 21
 c24:	81 e0       	ldi	r24, 0x01	; 1
 c26:	90 e0       	ldi	r25, 0x00	; 0
 c28:	02 c0       	rjmp	.+4      	; 0xc2e <DIO_voidSetPinValue+0xbe>
 c2a:	88 0f       	add	r24, r24
 c2c:	99 1f       	adc	r25, r25
 c2e:	6a 95       	dec	r22
 c30:	e2 f7       	brpl	.-8      	; 0xc2a <DIO_voidSetPinValue+0xba>
 c32:	80 95       	com	r24
 c34:	82 23       	and	r24, r18
 c36:	85 bb       	out	0x15, r24	; 21
 c38:	08 95       	ret
 c3a:	44 23       	and	r20, r20
 c3c:	69 f0       	breq	.+26     	; 0xc58 <DIO_voidSetPinValue+0xe8>
 c3e:	41 30       	cpi	r20, 0x01	; 1
 c40:	b1 f4       	brne	.+44     	; 0xc6e <DIO_voidSetPinValue+0xfe>
 c42:	22 b3       	in	r18, 0x12	; 18
 c44:	81 e0       	ldi	r24, 0x01	; 1
 c46:	90 e0       	ldi	r25, 0x00	; 0
 c48:	02 c0       	rjmp	.+4      	; 0xc4e <DIO_voidSetPinValue+0xde>
 c4a:	88 0f       	add	r24, r24
 c4c:	99 1f       	adc	r25, r25
 c4e:	6a 95       	dec	r22
 c50:	e2 f7       	brpl	.-8      	; 0xc4a <DIO_voidSetPinValue+0xda>
 c52:	82 2b       	or	r24, r18
 c54:	82 bb       	out	0x12, r24	; 18
 c56:	08 95       	ret
 c58:	22 b3       	in	r18, 0x12	; 18
 c5a:	81 e0       	ldi	r24, 0x01	; 1
 c5c:	90 e0       	ldi	r25, 0x00	; 0
 c5e:	02 c0       	rjmp	.+4      	; 0xc64 <DIO_voidSetPinValue+0xf4>
 c60:	88 0f       	add	r24, r24
 c62:	99 1f       	adc	r25, r25
 c64:	6a 95       	dec	r22
 c66:	e2 f7       	brpl	.-8      	; 0xc60 <DIO_voidSetPinValue+0xf0>
 c68:	80 95       	com	r24
 c6a:	82 23       	and	r24, r18
 c6c:	82 bb       	out	0x12, r24	; 18
 c6e:	08 95       	ret

00000c70 <DIO_voidGetPinValue>:
 c70:	84 30       	cpi	r24, 0x04	; 4
 c72:	c0 f5       	brcc	.+112    	; 0xce4 <DIO_voidGetPinValue+0x74>
 c74:	68 30       	cpi	r22, 0x08	; 8
 c76:	b0 f5       	brcc	.+108    	; 0xce4 <DIO_voidGetPinValue+0x74>
 c78:	41 15       	cp	r20, r1
 c7a:	51 05       	cpc	r21, r1
 c7c:	99 f1       	breq	.+102    	; 0xce4 <DIO_voidGetPinValue+0x74>
 c7e:	81 30       	cpi	r24, 0x01	; 1
 c80:	89 f0       	breq	.+34     	; 0xca4 <DIO_voidGetPinValue+0x34>
 c82:	28 f0       	brcs	.+10     	; 0xc8e <DIO_voidGetPinValue+0x1e>
 c84:	82 30       	cpi	r24, 0x02	; 2
 c86:	c9 f0       	breq	.+50     	; 0xcba <DIO_voidGetPinValue+0x4a>
 c88:	83 30       	cpi	r24, 0x03	; 3
 c8a:	11 f1       	breq	.+68     	; 0xcd0 <DIO_voidGetPinValue+0x60>
 c8c:	08 95       	ret
 c8e:	89 b3       	in	r24, 0x19	; 25
 c90:	90 e0       	ldi	r25, 0x00	; 0
 c92:	02 c0       	rjmp	.+4      	; 0xc98 <DIO_voidGetPinValue+0x28>
 c94:	95 95       	asr	r25
 c96:	87 95       	ror	r24
 c98:	6a 95       	dec	r22
 c9a:	e2 f7       	brpl	.-8      	; 0xc94 <DIO_voidGetPinValue+0x24>
 c9c:	81 70       	andi	r24, 0x01	; 1
 c9e:	fa 01       	movw	r30, r20
 ca0:	80 83       	st	Z, r24
 ca2:	08 95       	ret
 ca4:	86 b3       	in	r24, 0x16	; 22
 ca6:	90 e0       	ldi	r25, 0x00	; 0
 ca8:	02 c0       	rjmp	.+4      	; 0xcae <DIO_voidGetPinValue+0x3e>
 caa:	95 95       	asr	r25
 cac:	87 95       	ror	r24
 cae:	6a 95       	dec	r22
 cb0:	e2 f7       	brpl	.-8      	; 0xcaa <DIO_voidGetPinValue+0x3a>
 cb2:	81 70       	andi	r24, 0x01	; 1
 cb4:	fa 01       	movw	r30, r20
 cb6:	80 83       	st	Z, r24
 cb8:	08 95       	ret
 cba:	83 b3       	in	r24, 0x13	; 19
 cbc:	90 e0       	ldi	r25, 0x00	; 0
 cbe:	02 c0       	rjmp	.+4      	; 0xcc4 <DIO_voidGetPinValue+0x54>
 cc0:	95 95       	asr	r25
 cc2:	87 95       	ror	r24
 cc4:	6a 95       	dec	r22
 cc6:	e2 f7       	brpl	.-8      	; 0xcc0 <DIO_voidGetPinValue+0x50>
 cc8:	81 70       	andi	r24, 0x01	; 1
 cca:	fa 01       	movw	r30, r20
 ccc:	80 83       	st	Z, r24
 cce:	08 95       	ret
 cd0:	80 b3       	in	r24, 0x10	; 16
 cd2:	90 e0       	ldi	r25, 0x00	; 0
 cd4:	02 c0       	rjmp	.+4      	; 0xcda <DIO_voidGetPinValue+0x6a>
 cd6:	95 95       	asr	r25
 cd8:	87 95       	ror	r24
 cda:	6a 95       	dec	r22
 cdc:	e2 f7       	brpl	.-8      	; 0xcd6 <DIO_voidGetPinValue+0x66>
 cde:	81 70       	andi	r24, 0x01	; 1
 ce0:	fa 01       	movw	r30, r20
 ce2:	80 83       	st	Z, r24
 ce4:	08 95       	ret

00000ce6 <DIO_voidActivePinPullUpResistance>:
		//do nothing
	}
}
void DIO_voidActivePinPullUpResistance (u8 copy_u8PortId, u8 copy_u8PinId)
{
	if((copy_u8PortId<4)&&(copy_u8PinId<8))
 ce6:	84 30       	cpi	r24, 0x04	; 4
 ce8:	a8 f5       	brcc	.+106    	; 0xd54 <DIO_voidActivePinPullUpResistance+0x6e>
 cea:	68 30       	cpi	r22, 0x08	; 8
 cec:	98 f5       	brcc	.+102    	; 0xd54 <DIO_voidActivePinPullUpResistance+0x6e>
	{
		switch(copy_u8PortId)
 cee:	81 30       	cpi	r24, 0x01	; 1
 cf0:	89 f0       	breq	.+34     	; 0xd14 <DIO_voidActivePinPullUpResistance+0x2e>
 cf2:	28 f0       	brcs	.+10     	; 0xcfe <DIO_voidActivePinPullUpResistance+0x18>
 cf4:	82 30       	cpi	r24, 0x02	; 2
 cf6:	c9 f0       	breq	.+50     	; 0xd2a <DIO_voidActivePinPullUpResistance+0x44>
 cf8:	83 30       	cpi	r24, 0x03	; 3
 cfa:	11 f1       	breq	.+68     	; 0xd40 <DIO_voidActivePinPullUpResistance+0x5a>
 cfc:	08 95       	ret
	{
		case DIO_PORTA:
		SET_BIT(PORTA_REG,copy_u8PinId);
 cfe:	2b b3       	in	r18, 0x1b	; 27
 d00:	81 e0       	ldi	r24, 0x01	; 1
 d02:	90 e0       	ldi	r25, 0x00	; 0
 d04:	02 c0       	rjmp	.+4      	; 0xd0a <DIO_voidActivePinPullUpResistance+0x24>
 d06:	88 0f       	add	r24, r24
 d08:	99 1f       	adc	r25, r25
 d0a:	6a 95       	dec	r22
 d0c:	e2 f7       	brpl	.-8      	; 0xd06 <DIO_voidActivePinPullUpResistance+0x20>
 d0e:	82 2b       	or	r24, r18
 d10:	8b bb       	out	0x1b, r24	; 27
		break;
 d12:	08 95       	ret
		case DIO_PORTB:
		SET_BIT(PORTB_REG,copy_u8PinId);
 d14:	28 b3       	in	r18, 0x18	; 24
 d16:	81 e0       	ldi	r24, 0x01	; 1
 d18:	90 e0       	ldi	r25, 0x00	; 0
 d1a:	02 c0       	rjmp	.+4      	; 0xd20 <DIO_voidActivePinPullUpResistance+0x3a>
 d1c:	88 0f       	add	r24, r24
 d1e:	99 1f       	adc	r25, r25
 d20:	6a 95       	dec	r22
 d22:	e2 f7       	brpl	.-8      	; 0xd1c <DIO_voidActivePinPullUpResistance+0x36>
 d24:	82 2b       	or	r24, r18
 d26:	88 bb       	out	0x18, r24	; 24
		break;
 d28:	08 95       	ret
		case DIO_PORTC:
		SET_BIT(PORTC_REG,copy_u8PinId);
 d2a:	25 b3       	in	r18, 0x15	; 21
 d2c:	81 e0       	ldi	r24, 0x01	; 1
 d2e:	90 e0       	ldi	r25, 0x00	; 0
 d30:	02 c0       	rjmp	.+4      	; 0xd36 <DIO_voidActivePinPullUpResistance+0x50>
 d32:	88 0f       	add	r24, r24
 d34:	99 1f       	adc	r25, r25
 d36:	6a 95       	dec	r22
 d38:	e2 f7       	brpl	.-8      	; 0xd32 <DIO_voidActivePinPullUpResistance+0x4c>
 d3a:	82 2b       	or	r24, r18
 d3c:	85 bb       	out	0x15, r24	; 21
		break;
 d3e:	08 95       	ret
		case DIO_PORTD:
		SET_BIT(PORTD_REG,copy_u8PinId);
 d40:	22 b3       	in	r18, 0x12	; 18
 d42:	81 e0       	ldi	r24, 0x01	; 1
 d44:	90 e0       	ldi	r25, 0x00	; 0
 d46:	02 c0       	rjmp	.+4      	; 0xd4c <DIO_voidActivePinPullUpResistance+0x66>
 d48:	88 0f       	add	r24, r24
 d4a:	99 1f       	adc	r25, r25
 d4c:	6a 95       	dec	r22
 d4e:	e2 f7       	brpl	.-8      	; 0xd48 <DIO_voidActivePinPullUpResistance+0x62>
 d50:	82 2b       	or	r24, r18
 d52:	82 bb       	out	0x12, r24	; 18
 d54:	08 95       	ret

00000d56 <TWI_voidInitMaster>:



void TWI_voidInitMaster(void)
{
	TWBR_REG=12;
 d56:	8c e0       	ldi	r24, 0x0C	; 12
 d58:	80 b9       	out	0x00, r24	; 0
	CLR_BIT(TWSR_REG,TWPS1);
 d5a:	81 b1       	in	r24, 0x01	; 1
 d5c:	8d 7f       	andi	r24, 0xFD	; 253
 d5e:	81 b9       	out	0x01, r24	; 1
	CLR_BIT(TWSR_REG,TWPS0);
 d60:	81 b1       	in	r24, 0x01	; 1
 d62:	8e 7f       	andi	r24, 0xFE	; 254
 d64:	81 b9       	out	0x01, r24	; 1
	
	SET_BIT(TWCR_REG,TWEN);
 d66:	86 b7       	in	r24, 0x36	; 54
 d68:	84 60       	ori	r24, 0x04	; 4
 d6a:	86 bf       	out	0x36, r24	; 54
 d6c:	08 95       	ret

00000d6e <TWI_voidSendStartCondition>:



void TWI_voidSendStartCondition(void)
{
	SET_BIT(TWCR_REG,TWSTA);
 d6e:	86 b7       	in	r24, 0x36	; 54
 d70:	80 62       	ori	r24, 0x20	; 32
 d72:	86 bf       	out	0x36, r24	; 54
	
	SET_BIT(TWCR_REG,TWINT);
 d74:	86 b7       	in	r24, 0x36	; 54
 d76:	80 68       	ori	r24, 0x80	; 128
 d78:	86 bf       	out	0x36, r24	; 54
	
	while(0==GET_BIT(TWCR_REG,TWINT));
 d7a:	06 b6       	in	r0, 0x36	; 54
 d7c:	07 fe       	sbrs	r0, 7
 d7e:	fd cf       	rjmp	.-6      	; 0xd7a <TWI_voidSendStartCondition+0xc>
	
	while(TWI_STATUS_VALUE != TWI_START_CONDITION_ACK);
 d80:	81 b1       	in	r24, 0x01	; 1
 d82:	88 7f       	andi	r24, 0xF8	; 248
 d84:	88 30       	cpi	r24, 0x08	; 8
 d86:	e1 f7       	brne	.-8      	; 0xd80 <TWI_voidSendStartCondition+0x12>
}
 d88:	08 95       	ret

00000d8a <TWI_voidSendRepeatedStartCondition>:



void TWI_voidSendRepeatedStartCondition(void)
{
	SET_BIT(TWCR_REG,TWSTA);
 d8a:	86 b7       	in	r24, 0x36	; 54
 d8c:	80 62       	ori	r24, 0x20	; 32
 d8e:	86 bf       	out	0x36, r24	; 54
	
	SET_BIT(TWCR_REG,TWINT);
 d90:	86 b7       	in	r24, 0x36	; 54
 d92:	80 68       	ori	r24, 0x80	; 128
 d94:	86 bf       	out	0x36, r24	; 54
	
	while(0==GET_BIT(TWCR_REG,TWINT));
 d96:	06 b6       	in	r0, 0x36	; 54
 d98:	07 fe       	sbrs	r0, 7
 d9a:	fd cf       	rjmp	.-6      	; 0xd96 <TWI_voidSendRepeatedStartCondition+0xc>
	
	while(TWI_STATUS_VALUE != TWI_REP_START_CONDITION_ACK);
 d9c:	81 b1       	in	r24, 0x01	; 1
 d9e:	88 7f       	andi	r24, 0xF8	; 248
 da0:	80 31       	cpi	r24, 0x10	; 16
 da2:	e1 f7       	brne	.-8      	; 0xd9c <TWI_voidSendRepeatedStartCondition+0x12>
}
 da4:	08 95       	ret

00000da6 <TWI_voidSendStopCondition>:



void TWI_voidSendStopCondition(void)
{
	SET_BIT(TWCR_REG, TWSTO);
 da6:	86 b7       	in	r24, 0x36	; 54
 da8:	80 61       	ori	r24, 0x10	; 16
 daa:	86 bf       	out	0x36, r24	; 54
	
	SET_BIT(TWCR_REG,TWINT);
 dac:	86 b7       	in	r24, 0x36	; 54
 dae:	80 68       	ori	r24, 0x80	; 128
 db0:	86 bf       	out	0x36, r24	; 54
 db2:	08 95       	ret

00000db4 <TWI_voidSendSlaveAddWithWrite>:



void TWI_voidSendSlaveAddWithWrite(u8 copy_u8SlaveAdd)
{
	if(copy_u8SlaveAdd<128)
 db4:	88 23       	and	r24, r24
 db6:	94 f0       	brlt	.+36     	; 0xddc <TWI_voidSendSlaveAddWithWrite+0x28>
	{
		TWDR_REG=(copy_u8SlaveAdd<<1);
 db8:	88 0f       	add	r24, r24
 dba:	83 b9       	out	0x03, r24	; 3
		CLR_BIT(TWDR_REG,TWD0);
 dbc:	83 b1       	in	r24, 0x03	; 3
 dbe:	8e 7f       	andi	r24, 0xFE	; 254
 dc0:	83 b9       	out	0x03, r24	; 3
		
		CLR_BIT(TWCR_REG,TWSTA);
 dc2:	86 b7       	in	r24, 0x36	; 54
 dc4:	8f 7d       	andi	r24, 0xDF	; 223
 dc6:	86 bf       	out	0x36, r24	; 54
		
		/*clr flag*/
		SET_BIT(TWCR_REG,TWINT);
 dc8:	86 b7       	in	r24, 0x36	; 54
 dca:	80 68       	ori	r24, 0x80	; 128
 dcc:	86 bf       	out	0x36, r24	; 54
		
		while(0==GET_BIT(TWCR_REG,TWINT));
 dce:	06 b6       	in	r0, 0x36	; 54
 dd0:	07 fe       	sbrs	r0, 7
 dd2:	fd cf       	rjmp	.-6      	; 0xdce <TWI_voidSendSlaveAddWithWrite+0x1a>
		
		while(TWI_STATUS_VALUE != TWI_SLAVE_ADDRESS_WRITE_ACK);
 dd4:	81 b1       	in	r24, 0x01	; 1
 dd6:	88 7f       	andi	r24, 0xF8	; 248
 dd8:	88 31       	cpi	r24, 0x18	; 24
 dda:	e1 f7       	brne	.-8      	; 0xdd4 <TWI_voidSendSlaveAddWithWrite+0x20>
 ddc:	08 95       	ret

00000dde <TWI_voidSendSlaveAddWithRead>:
	}
}

void TWI_voidSendSlaveAddWithRead(u8 copy_u8SlaveAdd)
{
	if(copy_u8SlaveAdd<128)
 dde:	88 23       	and	r24, r24
 de0:	94 f0       	brlt	.+36     	; 0xe06 <TWI_voidSendSlaveAddWithRead+0x28>
	{
		TWDR_REG=(copy_u8SlaveAdd<<1);
 de2:	88 0f       	add	r24, r24
 de4:	83 b9       	out	0x03, r24	; 3
		SET_BIT(TWDR_REG,TWD0);
 de6:	83 b1       	in	r24, 0x03	; 3
 de8:	81 60       	ori	r24, 0x01	; 1
 dea:	83 b9       	out	0x03, r24	; 3
		
		CLR_BIT(TWCR_REG,TWSTA);
 dec:	86 b7       	in	r24, 0x36	; 54
 dee:	8f 7d       	andi	r24, 0xDF	; 223
 df0:	86 bf       	out	0x36, r24	; 54
		
		/*clr flag*/
		SET_BIT(TWCR_REG,TWINT);
 df2:	86 b7       	in	r24, 0x36	; 54
 df4:	80 68       	ori	r24, 0x80	; 128
 df6:	86 bf       	out	0x36, r24	; 54
		
		while(0==GET_BIT(TWCR_REG,TWINT));
 df8:	06 b6       	in	r0, 0x36	; 54
 dfa:	07 fe       	sbrs	r0, 7
 dfc:	fd cf       	rjmp	.-6      	; 0xdf8 <TWI_voidSendSlaveAddWithRead+0x1a>
		
		while(TWI_STATUS_VALUE != TWI_SLAVE_ADDRESS_READ_ACK);
 dfe:	81 b1       	in	r24, 0x01	; 1
 e00:	88 7f       	andi	r24, 0xF8	; 248
 e02:	80 34       	cpi	r24, 0x40	; 64
 e04:	e1 f7       	brne	.-8      	; 0xdfe <TWI_voidSendSlaveAddWithRead+0x20>
 e06:	08 95       	ret

00000e08 <TWI_voidTransmitMasterDataByte>:



void TWI_voidTransmitMasterDataByte(u8 copy_u8TxData)
{
	TWDR_REG=copy_u8TxData;
 e08:	83 b9       	out	0x03, r24	; 3
	
	/*clr flag*/
	SET_BIT(TWCR_REG,TWINT);
 e0a:	86 b7       	in	r24, 0x36	; 54
 e0c:	80 68       	ori	r24, 0x80	; 128
 e0e:	86 bf       	out	0x36, r24	; 54
	
	while(0==GET_BIT(TWCR_REG,TWINT));
 e10:	06 b6       	in	r0, 0x36	; 54
 e12:	07 fe       	sbrs	r0, 7
 e14:	fd cf       	rjmp	.-6      	; 0xe10 <TWI_voidTransmitMasterDataByte+0x8>
		
	while(TWI_STATUS_VALUE != TWI_MATER_DATA_TRANSMIT_ACK);
 e16:	81 b1       	in	r24, 0x01	; 1
 e18:	88 7f       	andi	r24, 0xF8	; 248
 e1a:	88 32       	cpi	r24, 0x28	; 40
 e1c:	e1 f7       	brne	.-8      	; 0xe16 <TWI_voidTransmitMasterDataByte+0xe>
}
 e1e:	08 95       	ret

00000e20 <TWI_voidRecieveMasterDataByteWithAch>:




void TWI_voidRecieveMasterDataByteWithAch(u8* copy_pu8RxData)
{
 e20:	fc 01       	movw	r30, r24
	if(copy_pu8RxData!=NULL)
 e22:	89 2b       	or	r24, r25
 e24:	91 f0       	breq	.+36     	; 0xe4a <TWI_voidRecieveMasterDataByteWithAch+0x2a>
	{
		SET_BIT(TWCR_REG,TWEA);
 e26:	96 b7       	in	r25, 0x36	; 54
 e28:	90 64       	ori	r25, 0x40	; 64
 e2a:	96 bf       	out	0x36, r25	; 54
		
		/*clr flag*/
		SET_BIT(TWCR_REG,TWINT);
 e2c:	96 b7       	in	r25, 0x36	; 54
 e2e:	90 68       	ori	r25, 0x80	; 128
 e30:	96 bf       	out	0x36, r25	; 54
		
		while(0==GET_BIT(TWCR_REG,TWINT));
 e32:	06 b6       	in	r0, 0x36	; 54
 e34:	07 fe       	sbrs	r0, 7
 e36:	fd cf       	rjmp	.-6      	; 0xe32 <TWI_voidRecieveMasterDataByteWithAch+0x12>
		
		while(TWI_STATUS_VALUE != TWI_MATER_DATA_RECIEVE_ACK);
 e38:	91 b1       	in	r25, 0x01	; 1
 e3a:	98 7f       	andi	r25, 0xF8	; 248
 e3c:	90 35       	cpi	r25, 0x50	; 80
 e3e:	e1 f7       	brne	.-8      	; 0xe38 <TWI_voidRecieveMasterDataByteWithAch+0x18>
		
		*copy_pu8RxData=TWDR_REG;
 e40:	83 b1       	in	r24, 0x03	; 3
 e42:	80 83       	st	Z, r24
		
		CLR_BIT(TWCR_REG,TWEA);
 e44:	86 b7       	in	r24, 0x36	; 54
 e46:	8f 7b       	andi	r24, 0xBF	; 191
 e48:	86 bf       	out	0x36, r24	; 54
 e4a:	08 95       	ret

00000e4c <TWI_voidRecieveMasterDataByteWithNAch>:




void TWI_voidRecieveMasterDataByteWithNAch(u8* copy_pu8RxData)
{
 e4c:	fc 01       	movw	r30, r24
	if(copy_pu8RxData!=NULL)
 e4e:	89 2b       	or	r24, r25
 e50:	61 f0       	breq	.+24     	; 0xe6a <TWI_voidRecieveMasterDataByteWithNAch+0x1e>
	{
		
		
		
		/*clr flag*/
		SET_BIT(TWCR_REG,TWINT);
 e52:	96 b7       	in	r25, 0x36	; 54
 e54:	90 68       	ori	r25, 0x80	; 128
 e56:	96 bf       	out	0x36, r25	; 54
		
		while(0==GET_BIT(TWCR_REG,TWINT));
 e58:	06 b6       	in	r0, 0x36	; 54
 e5a:	07 fe       	sbrs	r0, 7
 e5c:	fd cf       	rjmp	.-6      	; 0xe58 <TWI_voidRecieveMasterDataByteWithNAch+0xc>
		
		while(TWI_STATUS_VALUE != TWI_MATER_DATA_RECIEVE_NACK);
 e5e:	91 b1       	in	r25, 0x01	; 1
 e60:	98 7f       	andi	r25, 0xF8	; 248
 e62:	98 35       	cpi	r25, 0x58	; 88
 e64:	e1 f7       	brne	.-8      	; 0xe5e <TWI_voidRecieveMasterDataByteWithNAch+0x12>
		
		*copy_pu8RxData=TWDR_REG;
 e66:	83 b1       	in	r24, 0x03	; 3
 e68:	80 83       	st	Z, r24
 e6a:	08 95       	ret

00000e6c <UART_voidInit>:


void UART_voidInit(void)
{
	/*Double the USART Transmission Speed>>Disable*/
	CLR_BIT(UCSRA_REG,U2X);
 e6c:	8b b1       	in	r24, 0x0b	; 11
 e6e:	8d 7f       	andi	r24, 0xFD	; 253
 e70:	8b b9       	out	0x0b, r24	; 11
	
	/*USART Baud Rate Register>> set buadrate to 9600 when using 16UL clock & dis double speed*/
	UBRRL_REG=103;
 e72:	87 e6       	ldi	r24, 0x67	; 103
 e74:	89 b9       	out	0x09, r24	; 9
	
	/*Stop Bit Select>>1-bit*/
	CLR_BIT(Local_u8InitVar,USBS);
	
	/*Character Size(Data size)>>8-bit*/
	CLR_BIT(UCSRB_REG,UCSZ2);
 e76:	8a b1       	in	r24, 0x0a	; 10
 e78:	8b 7f       	andi	r24, 0xFB	; 251
 e7a:	8a b9       	out	0x0a, r24	; 10
	SET_BIT(Local_u8InitVar,UCSZ0);
	
	/*Clock Polarity>>Disable*/
	CLR_BIT(Local_u8InitVar,UCPOL);
	
	UCSRC_REG=Local_u8InitVar;
 e7c:	86 e8       	ldi	r24, 0x86	; 134
 e7e:	80 bd       	out	0x20, r24	; 32
	
	/*Receiver Enable>>Enable*/
	SET_BIT(UCSRB_REG,RXEN);
 e80:	8a b1       	in	r24, 0x0a	; 10
 e82:	80 61       	ori	r24, 0x10	; 16
 e84:	8a b9       	out	0x0a, r24	; 10
	
	/*Transmitter Enable>>Enable*/
	SET_BIT(UCSRB_REG,TXEN);
 e86:	8a b1       	in	r24, 0x0a	; 10
 e88:	88 60       	ori	r24, 0x08	; 8
 e8a:	8a b9       	out	0x0a, r24	; 10
 e8c:	08 95       	ret

00000e8e <_exit>:
 e8e:	f8 94       	cli

00000e90 <__stop_program>:
 e90:	ff cf       	rjmp	.-2      	; 0xe90 <__stop_program>
